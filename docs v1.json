{
  "openapi": "3.0.1",
  "info": {
    "description": "Gizmo web api.",
    "contact": {
      "name": "GizmoPowered",
      "url": "https://www.gizmopowered.net",
      "email": "support@gizmopowered.net"
    },
    "version": "v1.0"
  },
  "paths": {
    "/api/apps": {
      "get": {
        "tags": [
          "Apps"
        ],
        "summary": "Gets apps.",
        "parameters": [
          {
            "name": "max",
            "in": "query",
            "description": "Max entries to return.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Skip amount.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/App"
                  }
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/App"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/apps/{appId}": {
      "get": {
        "tags": [
          "Apps"
        ],
        "summary": "Gets app by id.",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "description": "App id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/App"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/App"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/apps/titles": {
      "get": {
        "tags": [
          "Apps"
        ],
        "summary": "Gets app titles.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AppTitle"
                  }
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AppTitle"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/apps/{appId}/image": {
      "get": {
        "tags": [
          "Apps"
        ],
        "summary": "Gets app image.",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "description": "App id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/apps/{appId}/rating": {
      "get": {
        "tags": [
          "Apps"
        ],
        "summary": "Gets app rating.",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "description": "App id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AppRating"
                  }
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AppRating"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/apps/{appId}/rating/average": {
      "get": {
        "tags": [
          "Apps"
        ],
        "summary": "Gets app average rating.",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "description": "App id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/apps/{appId}/rating/count": {
      "get": {
        "tags": [
          "Apps"
        ],
        "summary": "Gets app rates count.",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "description": "App id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/apps/infos": {
      "get": {
        "tags": [
          "Apps"
        ],
        "summary": "Returns apps info.",
        "parameters": [
          {
            "name": "max",
            "in": "query",
            "description": "Max entries to return.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AppInfo"
                  }
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AppInfo"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/apps/infos/top/rating": {
      "get": {
        "tags": [
          "Apps"
        ],
        "summary": "Returns app infos orderd by rating.",
        "parameters": [
          {
            "name": "max",
            "in": "query",
            "description": "Max entries to return.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AppInfo"
                  }
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AppInfo"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/apps/infos/top/use": {
      "get": {
        "tags": [
          "Apps"
        ],
        "summary": "Returns app infos orderd by use.",
        "parameters": [
          {
            "name": "max",
            "in": "query",
            "description": "Max entries to return.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AppInfo"
                  }
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AppInfo"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/attributes": {
      "get": {
        "tags": [
          "Attributes"
        ],
        "summary": "Gets attributes.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Attribute"
                  }
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Attribute"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Attributes"
        ],
        "summary": "Adds attribute.",
        "parameters": [
          {
            "name": "Name",
            "in": "query",
            "description": "Gets or sets attribute name.",
            "required": true,
            "schema": {
              "maxLength": 45,
              "minLength": 0,
              "type": "string"
            }
          },
          {
            "name": "FriendlyName",
            "in": "query",
            "description": "Gets or sets friendly name.",
            "schema": {
              "maxLength": 45,
              "minLength": 0,
              "type": "string"
            }
          },
          {
            "name": "ModifiedById",
            "in": "query",
            "description": "Gets or sets modified by id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ModifiedTime",
            "in": "query",
            "description": "Gets or sets last modified time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "CreatedById",
            "in": "query",
            "description": "Gets or sets created by id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "CreatedTime",
            "in": "query",
            "description": "Gets or sets created time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "Id",
            "in": "query",
            "description": "Gets or sets primary id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Attributes"
        ],
        "summary": "Updates attribute.",
        "parameters": [
          {
            "name": "Name",
            "in": "query",
            "description": "Gets or sets attribute name.",
            "required": true,
            "schema": {
              "maxLength": 45,
              "minLength": 0,
              "type": "string"
            }
          },
          {
            "name": "FriendlyName",
            "in": "query",
            "description": "Gets or sets friendly name.",
            "schema": {
              "maxLength": 45,
              "minLength": 0,
              "type": "string"
            }
          },
          {
            "name": "ModifiedById",
            "in": "query",
            "description": "Gets or sets modified by id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ModifiedTime",
            "in": "query",
            "description": "Gets or sets last modified time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "CreatedById",
            "in": "query",
            "description": "Gets or sets created by id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "CreatedTime",
            "in": "query",
            "description": "Gets or sets created time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "Id",
            "in": "query",
            "description": "Gets or sets primary id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/attributes/{attributeId}": {
      "delete": {
        "tags": [
          "Attributes"
        ],
        "summary": "Deletes attribute.",
        "parameters": [
          {
            "name": "attributeId",
            "in": "path",
            "description": "Attribute id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/export/app/image": {
      "get": {
        "tags": [
          "Export"
        ],
        "summary": "Export application images and produces a zip file.",
        "description": "Optional file name format used to name files inside output zip file. \r\nAllowed variables {AppId},{AppTitle} and {CreatedTime}.\r\nExample {AppId}-{AppTitle}.",
        "parameters": [
          {
            "name": "format",
            "in": "query",
            "description": "Optional image naming format.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/hostcomputers": {
      "get": {
        "tags": [
          "HostComputers"
        ],
        "summary": "Returns host computers.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HostComputer"
                  }
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HostComputer"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/hostcomputers/{hostname}": {
      "get": {
        "tags": [
          "HostComputers"
        ],
        "summary": "Returns host computers with specified host name.",
        "description": "<b>Multiple hosts may be returned since the host name is not unique.</b>",
        "parameters": [
          {
            "name": "hostname",
            "in": "path",
            "description": "Host name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HostComputer"
                  }
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HostComputer"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/hostcomputers/{hostId}/process": {
      "get": {
        "tags": [
          "HostComputers"
        ],
        "summary": "Returns all processes on specified host.",
        "parameters": [
          {
            "name": "hostId",
            "in": "path",
            "description": "Host id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ICoreProcess"
                  }
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ICoreProcess"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "HostComputers"
        ],
        "summary": "Creates a new process on specified host.",
        "description": "<b>The returned value will be null if no new process is created on target system.</b>",
        "parameters": [
          {
            "name": "hostId",
            "in": "path",
            "description": "Host id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "FileName",
            "in": "query",
            "description": "Process file name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Arguments",
            "in": "query",
            "description": "Process start arguments.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "WorkingDirectory",
            "in": "query",
            "description": "Process working directory.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "CreateNoWindow",
            "in": "query",
            "description": "Indicates whether no process window should be created.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "UseShellExecute",
            "in": "query",
            "description": "Indicates whether process should be shell executed.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Optional password.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Username",
            "in": "query",
            "description": "Optional user name.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "HostComputers"
        ],
        "summary": "Terminates process on specified host.",
        "parameters": [
          {
            "name": "hostId",
            "in": "path",
            "description": "Host id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ModulePath",
            "in": "query",
            "description": "Module path.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ProcessId",
            "in": "query",
            "description": "Process id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ProcessName",
            "in": "query",
            "description": "Process name.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Recurse",
            "in": "query",
            "description": "Indicates if recursive children termination should be done.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "RespectPath",
            "in": "query",
            "description": "Indicates if module path should be respected when terminating the process.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Tree",
            "in": "query",
            "description": "Indicates whether child process termination should be done.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/hostcomputers/{hostId}/process/{processId}": {
      "get": {
        "tags": [
          "HostComputers"
        ],
        "summary": "Returns a process on specified host by process id.",
        "parameters": [
          {
            "name": "hostId",
            "in": "path",
            "description": "Host id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "processId",
            "in": "path",
            "description": "Process id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ICoreProcess"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ICoreProcess"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "HostComputers"
        ],
        "summary": "Terminates process on specified host.",
        "parameters": [
          {
            "name": "hostId",
            "in": "path",
            "description": "Host id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "processId",
            "in": "path",
            "description": "Process id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/hostcomputers/{hostId}/process/{processName}": {
      "get": {
        "tags": [
          "HostComputers"
        ],
        "summary": "Returns a process on specified host with matching process name.",
        "parameters": [
          {
            "name": "hostId",
            "in": "path",
            "description": "Host id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "processName",
            "in": "path",
            "description": "Process name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ICoreProcess"
                  }
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ICoreProcess"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/hostcomputers/{hostId}/security/{enabled}": {
      "post": {
        "tags": [
          "HostComputers"
        ],
        "summary": "Sets host security state.",
        "parameters": [
          {
            "name": "hostId",
            "in": "path",
            "description": "Host id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "enabled",
            "in": "path",
            "description": "Enable value.",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/hostcomputers/{hostId}/maintenance": {
      "get": {
        "tags": [
          "HostComputers"
        ],
        "summary": "Returns host maintenance state.",
        "parameters": [
          {
            "name": "hostId",
            "in": "path",
            "description": "Host id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/hostcomputers/{hostId}/maintenance/{enabled}": {
      "post": {
        "tags": [
          "HostComputers"
        ],
        "summary": "Sets host maintenance state.",
        "parameters": [
          {
            "name": "hostId",
            "in": "path",
            "description": "Host id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "enabled",
            "in": "path",
            "description": "Maintenance enable value.",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/hostgroups": {
      "get": {
        "tags": [
          "HostGroups"
        ],
        "summary": "Gets host groups.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HostGroupInfo"
                  }
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HostGroupInfo"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/hostgroups/{hostGroupId}": {
      "get": {
        "tags": [
          "HostGroups"
        ],
        "summary": "Gets host group by id.",
        "parameters": [
          {
            "name": "hostGroupId",
            "in": "path",
            "description": "Host group id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HostGroupInfo"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/HostGroupInfo"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Invalid hostGroupId specified."
          }
        }
      }
    },
    "/api/hostgroups/{hostGroupId}/disallowedusergroups": {
      "get": {
        "tags": [
          "HostGroups"
        ],
        "summary": "Gets disallowed user groups.",
        "parameters": [
          {
            "name": "hostGroupId",
            "in": "path",
            "description": "Host group id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Invalid hostGroupId specified."
          }
        }
      }
    },
    "/api/hosts": {
      "get": {
        "tags": [
          "Hosts"
        ],
        "summary": "Returns all hosts list.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Host"
                  }
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Host"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/hosts/{hostId}": {
      "get": {
        "tags": [
          "Hosts"
        ],
        "summary": "Returns host by id.",
        "parameters": [
          {
            "name": "hostId",
            "in": "path",
            "description": "Host id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Host"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/Host"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Hosts"
        ],
        "summary": "Deletes specified host.",
        "description": "<b>The function will mark the host as deleted and will not remove host or associated records from database.</b>",
        "parameters": [
          {
            "name": "hostId",
            "in": "path",
            "description": "Host id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/hosts/number/{hostNumber}": {
      "get": {
        "tags": [
          "Hosts"
        ],
        "summary": "Returns host list by host number.",
        "description": "<b>Multiple hosts might be returned since the host number is not unique.</b>",
        "parameters": [
          {
            "name": "hostNumber",
            "in": "path",
            "description": "Host number.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Host"
                  }
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Host"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/hosts/host": {
      "put": {
        "tags": [
          "Hosts"
        ],
        "summary": "Adds a host.",
        "parameters": [
          {
            "name": "Number",
            "in": "query",
            "description": "Gets or sets host number.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Name",
            "in": "query",
            "description": "Gets or sets host name.",
            "required": true,
            "schema": {
              "maxLength": 45,
              "minLength": 0,
              "type": "string"
            }
          },
          {
            "name": "HostGroupId",
            "in": "query",
            "description": "Gets or sets host group.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "State",
            "in": "query",
            "description": "Gets or sets host state.",
            "schema": {
              "$ref": "#/components/schemas/HostState"
            }
          },
          {
            "name": "IconId",
            "in": "query",
            "description": "Gets or sets icon id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "IsDeleted",
            "in": "query",
            "description": "Gets or sets if host is deleted.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "ModifiedById",
            "in": "query",
            "description": "Gets or sets modified by id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ModifiedTime",
            "in": "query",
            "description": "Gets or sets last modified time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "CreatedById",
            "in": "query",
            "description": "Gets or sets created by id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "CreatedTime",
            "in": "query",
            "description": "Gets or sets created time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "Id",
            "in": "query",
            "description": "Gets or sets primary id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Hosts"
        ],
        "summary": "Updates existing host.",
        "parameters": [
          {
            "name": "Number",
            "in": "query",
            "description": "Gets or sets host number.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Name",
            "in": "query",
            "description": "Gets or sets host name.",
            "required": true,
            "schema": {
              "maxLength": 45,
              "minLength": 0,
              "type": "string"
            }
          },
          {
            "name": "HostGroupId",
            "in": "query",
            "description": "Gets or sets host group.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "State",
            "in": "query",
            "description": "Gets or sets host state.",
            "schema": {
              "$ref": "#/components/schemas/HostState"
            }
          },
          {
            "name": "IconId",
            "in": "query",
            "description": "Gets or sets icon id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "IsDeleted",
            "in": "query",
            "description": "Gets or sets if host is deleted.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "ModifiedById",
            "in": "query",
            "description": "Gets or sets modified by id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ModifiedTime",
            "in": "query",
            "description": "Gets or sets last modified time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "CreatedById",
            "in": "query",
            "description": "Gets or sets created by id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "CreatedTime",
            "in": "query",
            "description": "Gets or sets created time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "Id",
            "in": "query",
            "description": "Gets or sets primary id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/hosts/hostcomputer": {
      "put": {
        "tags": [
          "Hosts"
        ],
        "summary": "Adds a host computer.",
        "parameters": [
          {
            "name": "Hostname",
            "in": "query",
            "description": "Gets or sets hostname.",
            "required": true,
            "schema": {
              "maxLength": 255,
              "minLength": 0,
              "type": "string"
            }
          },
          {
            "name": "MACAddress",
            "in": "query",
            "description": "Gets or sets mac address.",
            "required": true,
            "schema": {
              "maxLength": 255,
              "minLength": 0,
              "type": "string"
            }
          },
          {
            "name": "Number",
            "in": "query",
            "description": "Gets or sets host number.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Name",
            "in": "query",
            "description": "Gets or sets host name.",
            "required": true,
            "schema": {
              "maxLength": 45,
              "minLength": 0,
              "type": "string"
            }
          },
          {
            "name": "HostGroupId",
            "in": "query",
            "description": "Gets or sets host group.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "State",
            "in": "query",
            "description": "Gets or sets host state.",
            "schema": {
              "$ref": "#/components/schemas/HostState"
            }
          },
          {
            "name": "IconId",
            "in": "query",
            "description": "Gets or sets icon id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "IsDeleted",
            "in": "query",
            "description": "Gets or sets if host is deleted.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "ModifiedById",
            "in": "query",
            "description": "Gets or sets modified by id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ModifiedTime",
            "in": "query",
            "description": "Gets or sets last modified time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "CreatedById",
            "in": "query",
            "description": "Gets or sets created by id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "CreatedTime",
            "in": "query",
            "description": "Gets or sets created time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "Id",
            "in": "query",
            "description": "Gets or sets primary id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Hosts"
        ],
        "summary": "Updates existing host computer.",
        "parameters": [
          {
            "name": "Hostname",
            "in": "query",
            "description": "Gets or sets hostname.",
            "required": true,
            "schema": {
              "maxLength": 255,
              "minLength": 0,
              "type": "string"
            }
          },
          {
            "name": "MACAddress",
            "in": "query",
            "description": "Gets or sets mac address.",
            "required": true,
            "schema": {
              "maxLength": 255,
              "minLength": 0,
              "type": "string"
            }
          },
          {
            "name": "Number",
            "in": "query",
            "description": "Gets or sets host number.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Name",
            "in": "query",
            "description": "Gets or sets host name.",
            "required": true,
            "schema": {
              "maxLength": 45,
              "minLength": 0,
              "type": "string"
            }
          },
          {
            "name": "HostGroupId",
            "in": "query",
            "description": "Gets or sets host group.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "State",
            "in": "query",
            "description": "Gets or sets host state.",
            "schema": {
              "$ref": "#/components/schemas/HostState"
            }
          },
          {
            "name": "IconId",
            "in": "query",
            "description": "Gets or sets icon id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "IsDeleted",
            "in": "query",
            "description": "Gets or sets if host is deleted.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "ModifiedById",
            "in": "query",
            "description": "Gets or sets modified by id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ModifiedTime",
            "in": "query",
            "description": "Gets or sets last modified time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "CreatedById",
            "in": "query",
            "description": "Gets or sets created by id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "CreatedTime",
            "in": "query",
            "description": "Gets or sets created time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "Id",
            "in": "query",
            "description": "Gets or sets primary id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/hosts/hostendpoint": {
      "put": {
        "tags": [
          "Hosts"
        ],
        "summary": "Adds a host endpoint.",
        "parameters": [
          {
            "name": "MaximumUsers",
            "in": "query",
            "description": "Gets or sets maximum users.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "Number",
            "in": "query",
            "description": "Gets or sets host number.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Name",
            "in": "query",
            "description": "Gets or sets host name.",
            "required": true,
            "schema": {
              "maxLength": 45,
              "minLength": 0,
              "type": "string"
            }
          },
          {
            "name": "HostGroupId",
            "in": "query",
            "description": "Gets or sets host group.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "State",
            "in": "query",
            "description": "Gets or sets host state.",
            "schema": {
              "$ref": "#/components/schemas/HostState"
            }
          },
          {
            "name": "IconId",
            "in": "query",
            "description": "Gets or sets icon id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "IsDeleted",
            "in": "query",
            "description": "Gets or sets if host is deleted.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "ModifiedById",
            "in": "query",
            "description": "Gets or sets modified by id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ModifiedTime",
            "in": "query",
            "description": "Gets or sets last modified time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "CreatedById",
            "in": "query",
            "description": "Gets or sets created by id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "CreatedTime",
            "in": "query",
            "description": "Gets or sets created time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "Id",
            "in": "query",
            "description": "Gets or sets primary id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Hosts"
        ],
        "summary": "Updates existing host.",
        "parameters": [
          {
            "name": "MaximumUsers",
            "in": "query",
            "description": "Gets or sets maximum users.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "Number",
            "in": "query",
            "description": "Gets or sets host number.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Name",
            "in": "query",
            "description": "Gets or sets host name.",
            "required": true,
            "schema": {
              "maxLength": 45,
              "minLength": 0,
              "type": "string"
            }
          },
          {
            "name": "HostGroupId",
            "in": "query",
            "description": "Gets or sets host group.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "State",
            "in": "query",
            "description": "Gets or sets host state.",
            "schema": {
              "$ref": "#/components/schemas/HostState"
            }
          },
          {
            "name": "IconId",
            "in": "query",
            "description": "Gets or sets icon id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "IsDeleted",
            "in": "query",
            "description": "Gets or sets if host is deleted.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "ModifiedById",
            "in": "query",
            "description": "Gets or sets modified by id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ModifiedTime",
            "in": "query",
            "description": "Gets or sets last modified time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "CreatedById",
            "in": "query",
            "description": "Gets or sets created by id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "CreatedTime",
            "in": "query",
            "description": "Gets or sets created time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "Id",
            "in": "query",
            "description": "Gets or sets primary id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/hosts/{hostId}/lastuserlogin": {
      "get": {
        "tags": [
          "Hosts"
        ],
        "summary": "Returns last user login date on specified host.",
        "parameters": [
          {
            "name": "hostId",
            "in": "path",
            "description": "Host id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/hosts/{hostId}/lastuserlogout": {
      "get": {
        "tags": [
          "Hosts"
        ],
        "summary": "Return last user logout on specified host.",
        "parameters": [
          {
            "name": "hostId",
            "in": "path",
            "description": "Host id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/hosts/{hostId}/lock/{locked}": {
      "post": {
        "tags": [
          "Hosts"
        ],
        "summary": "Puts host in specified lock state.",
        "parameters": [
          {
            "name": "hostId",
            "in": "path",
            "description": "Host id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "locked",
            "in": "path",
            "description": "Value specifying if host is locked.",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/hosts/{hostId}/orderstate/{inOrder}": {
      "post": {
        "tags": [
          "Hosts"
        ],
        "summary": "Puts host in specified order state.",
        "parameters": [
          {
            "name": "hostId",
            "in": "path",
            "description": "Host id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "inOrder",
            "in": "path",
            "description": "Value specifying if host is in order.",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/invoices": {
      "get": {
        "tags": [
          "Invoices"
        ],
        "summary": "Returns invoices.",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "Optional user id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Optional status.",
            "schema": {
              "$ref": "#/components/schemas/InvoiceStatus"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Optional start date.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end",
            "in": "query",
            "description": "Optional end date.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "isVoided",
            "in": "query",
            "description": "Optional voided paremter.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "max",
            "in": "query",
            "description": "Max entries to return.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Skip amount.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvoiceInfo"
                  }
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvoiceInfo"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/invoices/{invoiceId}": {
      "get": {
        "tags": [
          "Invoices"
        ],
        "summary": "Returns invoice by id.",
        "parameters": [
          {
            "name": "invoiceId",
            "in": "path",
            "description": "Invoice id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceInfo"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceInfo"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/invoices/void/{invoiceId}": {
      "delete": {
        "tags": [
          "Invoices"
        ],
        "summary": "Voids invoice by id without refund.",
        "parameters": [
          {
            "name": "invoiceId",
            "in": "path",
            "description": "Invoice id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceInfo"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceInfo"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/invoices/void/{invoiceId}/{refundMethod}": {
      "delete": {
        "tags": [
          "Invoices"
        ],
        "summary": "Voids invoice by id with specific refund method.",
        "parameters": [
          {
            "name": "invoiceId",
            "in": "path",
            "description": "Invoice id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "refundMethod",
            "in": "path",
            "description": "Refund Method.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceInfo"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceInfo"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/licenses/keys/reserved/info": {
      "get": {
        "tags": [
          "Licenses"
        ],
        "summary": "Returns reserved license keys information.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LicenseKeyReservationInfo"
                  }
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LicenseKeyReservationInfo"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/monetaryunit": {
      "get": {
        "tags": [
          "MonetaryUnit"
        ],
        "summary": "Returns monetary units.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MonetaryUnit"
                  }
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MonetaryUnit"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "MonetaryUnit"
        ],
        "summary": "Adds monetary unit.",
        "parameters": [
          {
            "name": "Name",
            "in": "query",
            "description": "Gets or sets name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Value",
            "in": "query",
            "description": "Gets or sets value.",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "DisplayOrder",
            "in": "query",
            "description": "Gets or sets display order.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "IsDeleted",
            "in": "query",
            "description": "Gets or sets if entity is deleted.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "ModifiedById",
            "in": "query",
            "description": "Gets or sets modified by id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ModifiedTime",
            "in": "query",
            "description": "Gets or sets last modified time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "CreatedById",
            "in": "query",
            "description": "Gets or sets created by id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "CreatedTime",
            "in": "query",
            "description": "Gets or sets created time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "Id",
            "in": "query",
            "description": "Gets or sets primary id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "MonetaryUnit"
        ],
        "summary": "Updates monetary unit.",
        "parameters": [
          {
            "name": "Name",
            "in": "query",
            "description": "Gets or sets name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Value",
            "in": "query",
            "description": "Gets or sets value.",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "DisplayOrder",
            "in": "query",
            "description": "Gets or sets display order.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "IsDeleted",
            "in": "query",
            "description": "Gets or sets if entity is deleted.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "ModifiedById",
            "in": "query",
            "description": "Gets or sets modified by id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ModifiedTime",
            "in": "query",
            "description": "Gets or sets last modified time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "CreatedById",
            "in": "query",
            "description": "Gets or sets created by id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "CreatedTime",
            "in": "query",
            "description": "Gets or sets created time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "Id",
            "in": "query",
            "description": "Gets or sets primary id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/monetaryunit/{monetaryUnitId}": {
      "delete": {
        "tags": [
          "MonetaryUnit"
        ],
        "summary": "Deletes monetary unit.",
        "parameters": [
          {
            "name": "monetaryUnitId",
            "in": "path",
            "description": "Monetary unit id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/points": {
      "get": {
        "tags": [
          "Points"
        ],
        "summary": "Returns points transactions.",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "Optional user id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Optional transaction type.",
            "schema": {
              "$ref": "#/components/schemas/LoyalityPointsTransactionType"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Optional start date.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end",
            "in": "query",
            "description": "Optional end date.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "max",
            "in": "query",
            "description": "Max entries to return.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Skip amount.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PointTransactionInfo"
                  }
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PointTransactionInfo"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/points/reset": {
      "post": {
        "tags": [
          "Points"
        ],
        "summary": "Reset points to zero for all users.",
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/points/{userId}/reset": {
      "post": {
        "tags": [
          "Points"
        ],
        "summary": "Resets points to zero for specified user.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/points/{amount}": {
      "post": {
        "tags": [
          "Points"
        ],
        "summary": "Sets points amount for all users.",
        "parameters": [
          {
            "name": "amount",
            "in": "path",
            "description": "Points amount.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PointTransactionInfo"
                  }
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PointTransactionInfo"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/points/{userId}/{amount}": {
      "post": {
        "tags": [
          "Points"
        ],
        "summary": "Sets points amount for specified user.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "amount",
            "in": "path",
            "description": "Points amount.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PointTransactionInfo"
                  }
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PointTransactionInfo"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/products": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Returns all products.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductBase"
                  }
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductBase"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/products/{productId}": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Returns product with specified id.",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "Product id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductBase"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ProductBase"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/products/time": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Returns time products.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductTime"
                  }
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductTime"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/products/time/{timeProductId}": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Return time product with specified id.",
        "parameters": [
          {
            "name": "timeProductId",
            "in": "path",
            "description": "Time product id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductTime"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ProductTime"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/products/time/{timeProductId}/disallowedhostgroups": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Returns disallowed host groups for specified time product.",
        "parameters": [
          {
            "name": "timeProductId",
            "in": "path",
            "description": "Time product id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/registration/mobilephone/{mobilePhone}": {
      "post": {
        "tags": [
          "Registration"
        ],
        "summary": "Starts registration procedure with mobile phone confirmation.",
        "parameters": [
          {
            "name": "mobilePhone",
            "in": "path",
            "description": "Mobile phone.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountCreationResultModelByMobilePhone"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/AccountCreationResultModelByMobilePhone"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/registration/email/{emailAddress}": {
      "post": {
        "tags": [
          "Registration"
        ],
        "summary": "Starts registration procedure with email address confirmation.",
        "parameters": [
          {
            "name": "emailAddress",
            "in": "path",
            "description": "Email address.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountCreationResultModelByEmail"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/AccountCreationResultModelByEmail"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/registration/complete": {
      "post": {
        "tags": [
          "Registration"
        ],
        "summary": "Completes the registration procedure.",
        "description": "<b>If no user group id specified the newly created user will be added to default user group.</b>\r\n<b>If no default user group can be obtianed the process will fail.</b>",
        "parameters": [
          {
            "name": "Token",
            "in": "query",
            "description": "Verification token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Username",
            "in": "query",
            "description": "Username.",
            "required": true,
            "schema": {
              "maxLength": 30,
              "minLength": 0,
              "type": "string"
            }
          },
          {
            "name": "UserGroupId",
            "in": "query",
            "description": "Optional user group id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "FirstName",
            "in": "query",
            "description": "Optional first name.",
            "schema": {
              "maxLength": 45,
              "minLength": 0,
              "type": "string"
            }
          },
          {
            "name": "LastName",
            "in": "query",
            "description": "Optional last name.",
            "schema": {
              "maxLength": 45,
              "minLength": 0,
              "type": "string"
            }
          },
          {
            "name": "BirthDate",
            "in": "query",
            "description": "Optional birth date.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "Address",
            "in": "query",
            "description": "Optional address.",
            "schema": {
              "maxLength": 255,
              "minLength": 0,
              "type": "string"
            }
          },
          {
            "name": "City",
            "in": "query",
            "description": "Optional city.",
            "schema": {
              "maxLength": 45,
              "minLength": 0,
              "type": "string"
            }
          },
          {
            "name": "Country",
            "in": "query",
            "description": "Optional country.",
            "schema": {
              "maxLength": 45,
              "minLength": 0,
              "type": "string"
            }
          },
          {
            "name": "PostCode",
            "in": "query",
            "description": "Optional post code.",
            "schema": {
              "maxLength": 20,
              "minLength": 0,
              "type": "string"
            }
          },
          {
            "name": "Phone",
            "in": "query",
            "description": "Optional phone number.",
            "schema": {
              "maxLength": 20,
              "minLength": 0,
              "type": "string",
              "format": "tel"
            }
          },
          {
            "name": "MobilePhone",
            "in": "query",
            "description": "Optional mobile phone number.",
            "schema": {
              "maxLength": 20,
              "minLength": 0,
              "type": "string",
              "format": "tel"
            }
          },
          {
            "name": "Email",
            "in": "query",
            "description": "Optional email.",
            "schema": {
              "maxLength": 254,
              "minLength": 0,
              "type": "string",
              "format": "email"
            }
          },
          {
            "name": "Sex",
            "in": "query",
            "description": "Optional sex.",
            "schema": {
              "$ref": "#/components/schemas/Sex"
            }
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Optional password.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountCreationCompleteResultModelByToken"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/AccountCreationCompleteResultModelByToken"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/reports/salesummary": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Returns summary report.",
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "description": "Optional start date.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end",
            "in": "query",
            "description": "Optional end date.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "employeeId",
            "in": "query",
            "description": "Optional employee id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "registerId",
            "in": "query",
            "description": "Optional register id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaleSummaryReport"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/SaleSummaryReport"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/reports/sale": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Returns sale reports.",
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "description": "Optional start date.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end",
            "in": "query",
            "description": "Optional end date.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "employeeId",
            "in": "query",
            "description": "Optional employee id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "registerId",
            "in": "query",
            "description": "Optional register id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaleReport"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/SaleReport"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/reports/users/spending": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Returns user spending report.",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "Optional user id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "max",
            "in": "query",
            "description": "Optional max entries to return.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Optional start date.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end",
            "in": "query",
            "description": "Optional end date.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "userGroupId",
            "in": "query",
            "description": "Optional user group.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserSpending"
                  }
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserSpending"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/reports/users/points/earning": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Return points earning report.",
        "description": "<b>This function will only return points earned from any fully paid invoice.</b>",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "Optional user id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "max",
            "in": "query",
            "description": "Optional max entries to return.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Optional start date.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end",
            "in": "query",
            "description": "Optional end date.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "userGroupId",
            "in": "query",
            "description": "Optional user group.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { }
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "array",
                  "items": { }
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/reports/users/{userId}/general": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Returns general user report.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGeneralReport"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/UserGeneralReport"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/reports/overview": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Returns overview report.",
        "parameters": [
          {
            "name": "DateFrom",
            "in": "query",
            "description": "Filter Date From.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "DateTo",
            "in": "query",
            "description": "Filter Date To.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OverviewReportDTO"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/OverviewReportDTO"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/reports/financial": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Returns financial report.",
        "parameters": [
          {
            "name": "OperatorId",
            "in": "query",
            "description": "Filter Operator Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "RegisterId",
            "in": "query",
            "description": "Filter Register Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "FinancialReportType",
            "in": "query",
            "description": "Filter Financial Report Type.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/FinancialReportTypes"
            }
          },
          {
            "name": "DateFrom",
            "in": "query",
            "description": "Filter Date From.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "DateTo",
            "in": "query",
            "description": "Filter Date To.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FinancialReportDTO"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/FinancialReportDTO"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/reports/financial/operator/{OperatorId}": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Returns financial report.",
        "parameters": [
          {
            "name": "OperatorId",
            "in": "query",
            "description": "Filter Operator Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "RegisterId",
            "in": "query",
            "description": "Filter Register Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "FinancialReportType",
            "in": "query",
            "description": "Filter Financial Report Type.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/FinancialReportTypes"
            }
          },
          {
            "name": "DateFrom",
            "in": "query",
            "description": "Filter Date From.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "DateTo",
            "in": "query",
            "description": "Filter Date To.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "OperatorId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FinancialReportDTO"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/FinancialReportDTO"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/reports/financial/operator/{OperatorId}/register/{RegisterId}": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Returns financial report.",
        "parameters": [
          {
            "name": "OperatorId",
            "in": "query",
            "description": "Filter Operator Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "RegisterId",
            "in": "query",
            "description": "Filter Register Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "FinancialReportType",
            "in": "query",
            "description": "Filter Financial Report Type.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/FinancialReportTypes"
            }
          },
          {
            "name": "DateFrom",
            "in": "query",
            "description": "Filter Date From.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "DateTo",
            "in": "query",
            "description": "Filter Date To.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "OperatorId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "RegisterId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FinancialReportDTO"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/FinancialReportDTO"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/reports/financial/register/{RegisterId}": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Returns financial report.",
        "parameters": [
          {
            "name": "OperatorId",
            "in": "query",
            "description": "Filter Operator Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "RegisterId",
            "in": "query",
            "description": "Filter Register Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "FinancialReportType",
            "in": "query",
            "description": "Filter Financial Report Type.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/FinancialReportTypes"
            }
          },
          {
            "name": "DateFrom",
            "in": "query",
            "description": "Filter Date From.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "DateTo",
            "in": "query",
            "description": "Filter Date To.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "RegisterId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FinancialReportDTO"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/FinancialReportDTO"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/reports/hostusage": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Returns HostUsage report.",
        "parameters": [
          {
            "name": "HostUsageReportType",
            "in": "query",
            "description": "Filter Host Usage Report Type.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/HostUsageReportTypes"
            }
          },
          {
            "name": "HostGroupId",
            "in": "query",
            "description": "Filter Host Group Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "DateFrom",
            "in": "query",
            "description": "Filter Date From.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "DateTo",
            "in": "query",
            "description": "Filter Date To.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HostUsageReportDTO"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/HostUsageReportDTO"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/reports/hostusage/hostgroup/{HostGroupId}": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Returns HostUsage report.",
        "parameters": [
          {
            "name": "HostUsageReportType",
            "in": "query",
            "description": "Filter Host Usage Report Type.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/HostUsageReportTypes"
            }
          },
          {
            "name": "HostGroupId",
            "in": "query",
            "description": "Filter Host Group Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "DateFrom",
            "in": "query",
            "description": "Filter Date From.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "DateTo",
            "in": "query",
            "description": "Filter Date To.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "HostGroupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HostUsageReportDTO"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/HostUsageReportDTO"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/reports/product/{ProductId}": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Returns Product report.",
        "parameters": [
          {
            "name": "ProductId",
            "in": "query",
            "description": "Filter Product Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "UserId",
            "in": "query",
            "description": "Filter User Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "DateFrom",
            "in": "query",
            "description": "Filter Date From.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "DateTo",
            "in": "query",
            "description": "Filter Date To.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "ProductId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductReportDTO"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ProductReportDTO"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/reports/products": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Returns Products report.",
        "parameters": [
          {
            "name": "UserId",
            "in": "query",
            "description": "Filter User Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "HideUnused",
            "in": "query",
            "description": "Hide unused products.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "DateFrom",
            "in": "query",
            "description": "Filter Date From.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "DateTo",
            "in": "query",
            "description": "Filter Date To.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductsReportDTO"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ProductsReportDTO"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/reports/products/user/{UserId}": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Returns Products report.",
        "parameters": [
          {
            "name": "UserId",
            "in": "query",
            "description": "Filter User Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "HideUnused",
            "in": "query",
            "description": "Hide unused products.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "DateFrom",
            "in": "query",
            "description": "Filter Date From.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "DateTo",
            "in": "query",
            "description": "Filter Date To.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "UserId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductsReportDTO"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ProductsReportDTO"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/reports/productslog": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Returns ProductsLog report.",
        "parameters": [
          {
            "name": "ProductId",
            "in": "query",
            "description": "Filter Product Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "OperatorId",
            "in": "query",
            "description": "Filter Operator Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ProductTransactionType",
            "in": "query",
            "description": "Filter Product Transaction Type.",
            "schema": {
              "$ref": "#/components/schemas/ProductTransactionTypes"
            }
          },
          {
            "name": "DateFrom",
            "in": "query",
            "description": "Filter Date From.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "DateTo",
            "in": "query",
            "description": "Filter Date To.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductsLogReportDTO"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ProductsLogReportDTO"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/reports/productslog/product/{ProductId}": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Returns ProductsLog report.",
        "parameters": [
          {
            "name": "ProductId",
            "in": "query",
            "description": "Filter Product Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "OperatorId",
            "in": "query",
            "description": "Filter Operator Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ProductTransactionType",
            "in": "query",
            "description": "Filter Product Transaction Type.",
            "schema": {
              "$ref": "#/components/schemas/ProductTransactionTypes"
            }
          },
          {
            "name": "DateFrom",
            "in": "query",
            "description": "Filter Date From.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "DateTo",
            "in": "query",
            "description": "Filter Date To.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "ProductId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductsLogReportDTO"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ProductsLogReportDTO"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/reports/productslog/product/{ProductId}/operator/{OperatorId}": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Returns ProductsLog report.",
        "parameters": [
          {
            "name": "ProductId",
            "in": "query",
            "description": "Filter Product Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "OperatorId",
            "in": "query",
            "description": "Filter Operator Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ProductTransactionType",
            "in": "query",
            "description": "Filter Product Transaction Type.",
            "schema": {
              "$ref": "#/components/schemas/ProductTransactionTypes"
            }
          },
          {
            "name": "DateFrom",
            "in": "query",
            "description": "Filter Date From.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "DateTo",
            "in": "query",
            "description": "Filter Date To.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "ProductId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OperatorId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductsLogReportDTO"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ProductsLogReportDTO"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/reports/productslog/operator/{OperatorId}": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Returns ProductsLog report.",
        "parameters": [
          {
            "name": "ProductId",
            "in": "query",
            "description": "Filter Product Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "OperatorId",
            "in": "query",
            "description": "Filter Operator Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ProductTransactionType",
            "in": "query",
            "description": "Filter Product Transaction Type.",
            "schema": {
              "$ref": "#/components/schemas/ProductTransactionTypes"
            }
          },
          {
            "name": "DateFrom",
            "in": "query",
            "description": "Filter Date From.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "DateTo",
            "in": "query",
            "description": "Filter Date To.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "OperatorId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductsLogReportDTO"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ProductsLogReportDTO"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/reports/stock": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Returns Stock report.",
        "parameters": [
          {
            "name": "DateFrom",
            "in": "query",
            "description": "Filter Date From.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "DateTo",
            "in": "query",
            "description": "Filter Date To.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StockReportDTO"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/StockReportDTO"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/reports/transactionslog": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Returns TransactionsLog report.",
        "parameters": [
          {
            "name": "OperatorId",
            "in": "query",
            "description": "Filter Operator Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "RegisterId",
            "in": "query",
            "description": "Filter Register Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "UserId",
            "in": "query",
            "description": "Filter User Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "UserName",
            "in": "query",
            "description": "Filter User Name.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "VoidOperatorId",
            "in": "query",
            "description": "Filter Void Operator Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "TransactionsLogActionType",
            "in": "query",
            "description": "Filter Transactions Log Action Type.",
            "schema": {
              "$ref": "#/components/schemas/TransactionsLogActionTypes"
            }
          },
          {
            "name": "DateFrom",
            "in": "query",
            "description": "Filter Date From.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "DateTo",
            "in": "query",
            "description": "Filter Date To.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionsLogReportDTO"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionsLogReportDTO"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/reports/transactionslog/operator/{OperatorId}": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Returns TransactionsLog report.",
        "parameters": [
          {
            "name": "OperatorId",
            "in": "query",
            "description": "Filter Operator Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "RegisterId",
            "in": "query",
            "description": "Filter Register Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "UserId",
            "in": "query",
            "description": "Filter User Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "UserName",
            "in": "query",
            "description": "Filter User Name.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "VoidOperatorId",
            "in": "query",
            "description": "Filter Void Operator Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "TransactionsLogActionType",
            "in": "query",
            "description": "Filter Transactions Log Action Type.",
            "schema": {
              "$ref": "#/components/schemas/TransactionsLogActionTypes"
            }
          },
          {
            "name": "DateFrom",
            "in": "query",
            "description": "Filter Date From.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "DateTo",
            "in": "query",
            "description": "Filter Date To.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "OperatorId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionsLogReportDTO"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionsLogReportDTO"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/reports/transactionslog/operator/{OperatorId}/register/{RegisterId}": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Returns TransactionsLog report.",
        "parameters": [
          {
            "name": "OperatorId",
            "in": "query",
            "description": "Filter Operator Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "RegisterId",
            "in": "query",
            "description": "Filter Register Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "UserId",
            "in": "query",
            "description": "Filter User Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "UserName",
            "in": "query",
            "description": "Filter User Name.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "VoidOperatorId",
            "in": "query",
            "description": "Filter Void Operator Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "TransactionsLogActionType",
            "in": "query",
            "description": "Filter Transactions Log Action Type.",
            "schema": {
              "$ref": "#/components/schemas/TransactionsLogActionTypes"
            }
          },
          {
            "name": "DateFrom",
            "in": "query",
            "description": "Filter Date From.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "DateTo",
            "in": "query",
            "description": "Filter Date To.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "OperatorId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "RegisterId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionsLogReportDTO"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionsLogReportDTO"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/reports/transactionslog/operator/{OperatorId}/register/{RegisterId}/user/{UserId}": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Returns TransactionsLog report.",
        "parameters": [
          {
            "name": "OperatorId",
            "in": "query",
            "description": "Filter Operator Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "RegisterId",
            "in": "query",
            "description": "Filter Register Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "UserId",
            "in": "query",
            "description": "Filter User Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "UserName",
            "in": "query",
            "description": "Filter User Name.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "VoidOperatorId",
            "in": "query",
            "description": "Filter Void Operator Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "TransactionsLogActionType",
            "in": "query",
            "description": "Filter Transactions Log Action Type.",
            "schema": {
              "$ref": "#/components/schemas/TransactionsLogActionTypes"
            }
          },
          {
            "name": "DateFrom",
            "in": "query",
            "description": "Filter Date From.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "DateTo",
            "in": "query",
            "description": "Filter Date To.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "OperatorId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "RegisterId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "UserId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionsLogReportDTO"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionsLogReportDTO"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/reports/shiftslog": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Returns ShiftsLog report.",
        "parameters": [
          {
            "name": "OperatorId",
            "in": "query",
            "description": "Filter Operator Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "RegisterId",
            "in": "query",
            "description": "Filter Register Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ShiftsLogReportType",
            "in": "query",
            "description": "Filter Shifts Log Report Type.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ShiftsLogReportTypes"
            }
          },
          {
            "name": "DateFrom",
            "in": "query",
            "description": "Filter Date From.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "DateTo",
            "in": "query",
            "description": "Filter Date To.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShiftsLogReportDTO"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ShiftsLogReportDTO"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/reports/shiftslog/operator/{OperatorId}": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Returns ShiftsLog report.",
        "parameters": [
          {
            "name": "OperatorId",
            "in": "query",
            "description": "Filter Operator Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "RegisterId",
            "in": "query",
            "description": "Filter Register Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ShiftsLogReportType",
            "in": "query",
            "description": "Filter Shifts Log Report Type.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ShiftsLogReportTypes"
            }
          },
          {
            "name": "DateFrom",
            "in": "query",
            "description": "Filter Date From.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "DateTo",
            "in": "query",
            "description": "Filter Date To.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "OperatorId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShiftsLogReportDTO"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ShiftsLogReportDTO"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/reports/shiftslog/operator/{OperatorId}/register/{RegisterId}": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Returns ShiftsLog report.",
        "parameters": [
          {
            "name": "OperatorId",
            "in": "query",
            "description": "Filter Operator Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "RegisterId",
            "in": "query",
            "description": "Filter Register Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ShiftsLogReportType",
            "in": "query",
            "description": "Filter Shifts Log Report Type.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ShiftsLogReportTypes"
            }
          },
          {
            "name": "DateFrom",
            "in": "query",
            "description": "Filter Date From.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "DateTo",
            "in": "query",
            "description": "Filter Date To.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "OperatorId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "RegisterId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShiftsLogReportDTO"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ShiftsLogReportDTO"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/reports/shiftslog/register/{RegisterId}": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Returns ShiftsLog report.",
        "parameters": [
          {
            "name": "OperatorId",
            "in": "query",
            "description": "Filter Operator Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "RegisterId",
            "in": "query",
            "description": "Filter Register Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ShiftsLogReportType",
            "in": "query",
            "description": "Filter Shifts Log Report Type.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ShiftsLogReportTypes"
            }
          },
          {
            "name": "DateFrom",
            "in": "query",
            "description": "Filter Date From.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "DateTo",
            "in": "query",
            "description": "Filter Date To.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "RegisterId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShiftsLogReportDTO"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ShiftsLogReportDTO"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/reports/invoiceslog": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Returns InvoicesLog report.",
        "parameters": [
          {
            "name": "OperatorId",
            "in": "query",
            "description": "Filter Operator Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "RegisterId",
            "in": "query",
            "description": "Filter Register Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PaymentStatusType",
            "in": "query",
            "description": "Filter Payment Status Type.",
            "schema": {
              "$ref": "#/components/schemas/InvoicesLogPaymentStatusTypes"
            }
          },
          {
            "name": "VoidedStatusType",
            "in": "query",
            "description": "Filter Voided Status Type.",
            "schema": {
              "$ref": "#/components/schemas/InvoicesLogVoidedStatusTypes"
            }
          },
          {
            "name": "DateFrom",
            "in": "query",
            "description": "Filter Date From.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "DateTo",
            "in": "query",
            "description": "Filter Date To.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoicesLogReportDTO"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/InvoicesLogReportDTO"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/reports/invoiceslog/operator/{OperatorId}": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Returns InvoicesLog report.",
        "parameters": [
          {
            "name": "OperatorId",
            "in": "query",
            "description": "Filter Operator Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "RegisterId",
            "in": "query",
            "description": "Filter Register Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PaymentStatusType",
            "in": "query",
            "description": "Filter Payment Status Type.",
            "schema": {
              "$ref": "#/components/schemas/InvoicesLogPaymentStatusTypes"
            }
          },
          {
            "name": "VoidedStatusType",
            "in": "query",
            "description": "Filter Voided Status Type.",
            "schema": {
              "$ref": "#/components/schemas/InvoicesLogVoidedStatusTypes"
            }
          },
          {
            "name": "DateFrom",
            "in": "query",
            "description": "Filter Date From.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "DateTo",
            "in": "query",
            "description": "Filter Date To.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "OperatorId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoicesLogReportDTO"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/InvoicesLogReportDTO"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/reports/invoiceslog/operator/{OperatorId}/register/{RegisterId}": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Returns InvoicesLog report.",
        "parameters": [
          {
            "name": "OperatorId",
            "in": "query",
            "description": "Filter Operator Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "RegisterId",
            "in": "query",
            "description": "Filter Register Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PaymentStatusType",
            "in": "query",
            "description": "Filter Payment Status Type.",
            "schema": {
              "$ref": "#/components/schemas/InvoicesLogPaymentStatusTypes"
            }
          },
          {
            "name": "VoidedStatusType",
            "in": "query",
            "description": "Filter Voided Status Type.",
            "schema": {
              "$ref": "#/components/schemas/InvoicesLogVoidedStatusTypes"
            }
          },
          {
            "name": "DateFrom",
            "in": "query",
            "description": "Filter Date From.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "DateTo",
            "in": "query",
            "description": "Filter Date To.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "OperatorId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "RegisterId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoicesLogReportDTO"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/InvoicesLogReportDTO"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/reports/invoiceslog/register/{RegisterId}": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Returns InvoicesLog report.",
        "parameters": [
          {
            "name": "OperatorId",
            "in": "query",
            "description": "Filter Operator Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "RegisterId",
            "in": "query",
            "description": "Filter Register Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PaymentStatusType",
            "in": "query",
            "description": "Filter Payment Status Type.",
            "schema": {
              "$ref": "#/components/schemas/InvoicesLogPaymentStatusTypes"
            }
          },
          {
            "name": "VoidedStatusType",
            "in": "query",
            "description": "Filter Voided Status Type.",
            "schema": {
              "$ref": "#/components/schemas/InvoicesLogVoidedStatusTypes"
            }
          },
          {
            "name": "DateFrom",
            "in": "query",
            "description": "Filter Date From.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "DateTo",
            "in": "query",
            "description": "Filter Date To.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "RegisterId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoicesLogReportDTO"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/InvoicesLogReportDTO"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/reports/invoice/{InvoiceId}": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Returns Invoice report.",
        "parameters": [
          {
            "name": "InvoiceId",
            "in": "query",
            "description": "Filter Invoice Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "DateFrom",
            "in": "query",
            "description": "Filter Date From.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "DateTo",
            "in": "query",
            "description": "Filter Date To.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "InvoiceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceReportDTO"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceReportDTO"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/reports/applications": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Returns Applications report.",
        "parameters": [
          {
            "name": "UserId",
            "in": "query",
            "description": "Filter User Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "HideUnused",
            "in": "query",
            "description": "Hide unused applications.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "DateFrom",
            "in": "query",
            "description": "Filter Date From.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "DateTo",
            "in": "query",
            "description": "Filter Date To.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationsReportDTO"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationsReportDTO"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/reports/application/{ApplicationId}": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Returns Application report.",
        "parameters": [
          {
            "name": "ApplicationId",
            "in": "query",
            "description": "Filter Application Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "UserId",
            "in": "query",
            "description": "Filter User Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "DateFrom",
            "in": "query",
            "description": "Filter Date From.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "DateTo",
            "in": "query",
            "description": "Filter Date To.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "ApplicationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationReportDTO"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationReportDTO"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/reports/application/{ApplicationId}/user/{UserId}": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Returns Application report.",
        "parameters": [
          {
            "name": "ApplicationId",
            "in": "query",
            "description": "Filter Application Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "UserId",
            "in": "query",
            "description": "Filter User Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "DateFrom",
            "in": "query",
            "description": "Filter Date From.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "DateTo",
            "in": "query",
            "description": "Filter Date To.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "ApplicationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "UserId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationReportDTO"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationReportDTO"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/reports/orderslog": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Returns OrdersLog report.",
        "parameters": [
          {
            "name": "OrderSource",
            "in": "query",
            "description": "Filter Order Source.",
            "schema": {
              "$ref": "#/components/schemas/OrderSource"
            }
          },
          {
            "name": "OrderStatus",
            "in": "query",
            "description": "Filter Order Status.",
            "schema": {
              "$ref": "#/components/schemas/OrderStatus"
            }
          },
          {
            "name": "OperatorId",
            "in": "query",
            "description": "Filter Operator Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "UserId",
            "in": "query",
            "description": "Filter User Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "UserName",
            "in": "query",
            "description": "Filter User Name.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DateFrom",
            "in": "query",
            "description": "Filter Date From.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "DateTo",
            "in": "query",
            "description": "Filter Date To.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrdersLogReportDTO"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/OrdersLogReportDTO"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/reports/orderslog/operator/{OperatorId}": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Returns OrdersLog report.",
        "parameters": [
          {
            "name": "OrderSource",
            "in": "query",
            "description": "Filter Order Source.",
            "schema": {
              "$ref": "#/components/schemas/OrderSource"
            }
          },
          {
            "name": "OrderStatus",
            "in": "query",
            "description": "Filter Order Status.",
            "schema": {
              "$ref": "#/components/schemas/OrderStatus"
            }
          },
          {
            "name": "OperatorId",
            "in": "query",
            "description": "Filter Operator Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "UserId",
            "in": "query",
            "description": "Filter User Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "UserName",
            "in": "query",
            "description": "Filter User Name.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DateFrom",
            "in": "query",
            "description": "Filter Date From.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "DateTo",
            "in": "query",
            "description": "Filter Date To.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "OperatorId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrdersLogReportDTO"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/OrdersLogReportDTO"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/reports/orderslog/operator/{OperatorId}/user/{UserId}": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Returns OrdersLog report.",
        "parameters": [
          {
            "name": "OrderSource",
            "in": "query",
            "description": "Filter Order Source.",
            "schema": {
              "$ref": "#/components/schemas/OrderSource"
            }
          },
          {
            "name": "OrderStatus",
            "in": "query",
            "description": "Filter Order Status.",
            "schema": {
              "$ref": "#/components/schemas/OrderStatus"
            }
          },
          {
            "name": "OperatorId",
            "in": "query",
            "description": "Filter Operator Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "UserId",
            "in": "query",
            "description": "Filter User Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "UserName",
            "in": "query",
            "description": "Filter User Name.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DateFrom",
            "in": "query",
            "description": "Filter Date From.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "DateTo",
            "in": "query",
            "description": "Filter Date To.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "OperatorId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "UserId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrdersLogReportDTO"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/OrdersLogReportDTO"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/reports/orderslog/user/{UserId}": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Returns OrdersLog report.",
        "parameters": [
          {
            "name": "OrderSource",
            "in": "query",
            "description": "Filter Order Source.",
            "schema": {
              "$ref": "#/components/schemas/OrderSource"
            }
          },
          {
            "name": "OrderStatus",
            "in": "query",
            "description": "Filter Order Status.",
            "schema": {
              "$ref": "#/components/schemas/OrderStatus"
            }
          },
          {
            "name": "OperatorId",
            "in": "query",
            "description": "Filter Operator Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "UserId",
            "in": "query",
            "description": "Filter User Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "UserName",
            "in": "query",
            "description": "Filter User Name.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DateFrom",
            "in": "query",
            "description": "Filter Date From.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "DateTo",
            "in": "query",
            "description": "Filter Date To.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "UserId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrdersLogReportDTO"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/OrdersLogReportDTO"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/reports/sessionslog": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Returns SessionsLog report.",
        "parameters": [
          {
            "name": "UserId",
            "in": "query",
            "description": "Filter User Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "UserName",
            "in": "query",
            "description": "Filter User Name.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "HostId",
            "in": "query",
            "description": "Filter Host Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "OperatorId",
            "in": "query",
            "description": "Filter Operator Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "DateFrom",
            "in": "query",
            "description": "Filter Date From.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "DateTo",
            "in": "query",
            "description": "Filter Date To.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionsLogReportDTO"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/SessionsLogReportDTO"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/reports/sessionslog/operator/{OperatorId}": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Returns SessionsLog report.",
        "parameters": [
          {
            "name": "UserId",
            "in": "query",
            "description": "Filter User Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "UserName",
            "in": "query",
            "description": "Filter User Name.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "HostId",
            "in": "query",
            "description": "Filter Host Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "OperatorId",
            "in": "query",
            "description": "Filter Operator Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "DateFrom",
            "in": "query",
            "description": "Filter Date From.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "DateTo",
            "in": "query",
            "description": "Filter Date To.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "OperatorId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionsLogReportDTO"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/SessionsLogReportDTO"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/reports/sessionslog/operator/{OperatorId}/user/{UserId}": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Returns SessionsLog report.",
        "parameters": [
          {
            "name": "UserId",
            "in": "query",
            "description": "Filter User Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "UserName",
            "in": "query",
            "description": "Filter User Name.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "HostId",
            "in": "query",
            "description": "Filter Host Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "OperatorId",
            "in": "query",
            "description": "Filter Operator Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "DateFrom",
            "in": "query",
            "description": "Filter Date From.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "DateTo",
            "in": "query",
            "description": "Filter Date To.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "OperatorId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "UserId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionsLogReportDTO"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/SessionsLogReportDTO"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/reports/sessionslog/operator/{OperatorId}/user/{UserId}/host/{HostId}": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Returns SessionsLog report.",
        "parameters": [
          {
            "name": "UserId",
            "in": "query",
            "description": "Filter User Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "UserName",
            "in": "query",
            "description": "Filter User Name.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "HostId",
            "in": "query",
            "description": "Filter Host Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "OperatorId",
            "in": "query",
            "description": "Filter Operator Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "DateFrom",
            "in": "query",
            "description": "Filter Date From.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "DateTo",
            "in": "query",
            "description": "Filter Date To.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "OperatorId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "UserId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "HostId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionsLogReportDTO"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/SessionsLogReportDTO"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/reports/user/{UserId}": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Returns User report.",
        "parameters": [
          {
            "name": "UserId",
            "in": "query",
            "description": "Filter User Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "DateFrom",
            "in": "query",
            "description": "Filter Date From.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "DateTo",
            "in": "query",
            "description": "Filter Date To.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "UserId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserReportDTO"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/UserReportDTO"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/reports/topusers/{TopUsersNumber}": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Returns Top Users Report report.",
        "parameters": [
          {
            "name": "TopUsersNumber",
            "in": "query",
            "description": "Filter number of top users to display.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "DateFrom",
            "in": "query",
            "description": "Filter Date From.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "DateTo",
            "in": "query",
            "description": "Filter Date To.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "TopUsersNumber",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TopUsersReportDTO"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/TopUsersReportDTO"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/reports/licenses": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Returns Licenses report.",
        "parameters": [
          {
            "name": "ApplicationId",
            "in": "query",
            "description": "Filter Application Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "HideUnused",
            "in": "query",
            "description": "Hide unused licenses.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "DateFrom",
            "in": "query",
            "description": "Filter Date From.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "DateTo",
            "in": "query",
            "description": "Filter Date To.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicensesReportDTO"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/LicensesReportDTO"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/reports/licenses/application/{ApplicationId}": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Returns Licenses report.",
        "parameters": [
          {
            "name": "ApplicationId",
            "in": "query",
            "description": "Filter Application Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "HideUnused",
            "in": "query",
            "description": "Hide unused licenses.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "DateFrom",
            "in": "query",
            "description": "Filter Date From.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "DateTo",
            "in": "query",
            "description": "Filter Date To.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "ApplicationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicensesReportDTO"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/LicensesReportDTO"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/reports/license/{LicenseId}": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Returns License report.",
        "parameters": [
          {
            "name": "LicenseId",
            "in": "query",
            "description": "Filter License Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "DateFrom",
            "in": "query",
            "description": "Filter Date From.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "DateTo",
            "in": "query",
            "description": "Filter Date To.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "LicenseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseReportDTO"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseReportDTO"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/reports/zlog": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Returns Z Log report.",
        "parameters": [
          {
            "name": "DateFrom",
            "in": "query",
            "description": "Filter Date From.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "DateTo",
            "in": "query",
            "description": "Filter Date To.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ZLogReportDTO"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ZLogReportDTO"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/reports/z": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Returns Z report.",
        "parameters": [
          {
            "name": "Date",
            "in": "query",
            "description": "Filter Date.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ZReportDTO"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ZReportDTO"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/reports/assetslog": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Returns Assets Log report.",
        "parameters": [
          {
            "name": "AssetTypeId",
            "in": "query",
            "description": "Filter Asset Type Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "AssetId",
            "in": "query",
            "description": "Filter Asset Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "CheckOutOperatorId",
            "in": "query",
            "description": "Filter Check Out Operator Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "CheckInOperatorId",
            "in": "query",
            "description": "Filter Check In Operator Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "UserId",
            "in": "query",
            "description": "Filter User Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "DateFrom",
            "in": "query",
            "description": "Filter Date From.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "DateTo",
            "in": "query",
            "description": "Filter Date To.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetsLogReportDTO"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/AssetsLogReportDTO"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/reports/assetslog/assettype/{AssetTypeId}": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Returns Assets Log report.",
        "parameters": [
          {
            "name": "AssetTypeId",
            "in": "query",
            "description": "Filter Asset Type Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "AssetId",
            "in": "query",
            "description": "Filter Asset Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "CheckOutOperatorId",
            "in": "query",
            "description": "Filter Check Out Operator Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "CheckInOperatorId",
            "in": "query",
            "description": "Filter Check In Operator Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "UserId",
            "in": "query",
            "description": "Filter User Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "DateFrom",
            "in": "query",
            "description": "Filter Date From.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "DateTo",
            "in": "query",
            "description": "Filter Date To.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "AssetTypeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetsLogReportDTO"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/AssetsLogReportDTO"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/reports/assetslog/assettype/{AssetTypeId}/asset/{AssetId}": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Returns Assets Log report.",
        "parameters": [
          {
            "name": "AssetTypeId",
            "in": "query",
            "description": "Filter Asset Type Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "AssetId",
            "in": "query",
            "description": "Filter Asset Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "CheckOutOperatorId",
            "in": "query",
            "description": "Filter Check Out Operator Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "CheckInOperatorId",
            "in": "query",
            "description": "Filter Check In Operator Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "UserId",
            "in": "query",
            "description": "Filter User Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "DateFrom",
            "in": "query",
            "description": "Filter Date From.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "DateTo",
            "in": "query",
            "description": "Filter Date To.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "AssetTypeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "AssetId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetsLogReportDTO"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/AssetsLogReportDTO"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/reports/assetslog/asset/{AssetId}": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Returns Assets Log report.",
        "parameters": [
          {
            "name": "AssetTypeId",
            "in": "query",
            "description": "Filter Asset Type Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "AssetId",
            "in": "query",
            "description": "Filter Asset Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "CheckOutOperatorId",
            "in": "query",
            "description": "Filter Check Out Operator Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "CheckInOperatorId",
            "in": "query",
            "description": "Filter Check In Operator Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "UserId",
            "in": "query",
            "description": "Filter User Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "DateFrom",
            "in": "query",
            "description": "Filter Date From.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "DateTo",
            "in": "query",
            "description": "Filter Date To.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "AssetId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetsLogReportDTO"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/AssetsLogReportDTO"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/reservations/{reservationId}/status": {
      "get": {
        "tags": [
          "Reservations"
        ],
        "summary": "Gets reservation status.",
        "parameters": [
          {
            "name": "reservationId",
            "in": "path",
            "description": "Reservation id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationStatus"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationStatus"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Invalid reservationId specified."
          }
        }
      }
    },
    "/api/reservations/{reservationId}/status/{status}": {
      "post": {
        "tags": [
          "Reservations"
        ],
        "summary": "Sets reservation status.",
        "parameters": [
          {
            "name": "reservationId",
            "in": "path",
            "description": "Reservation id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "status",
            "in": "path",
            "description": "Reservation status.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ReservationStatus"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Invalid reservationId specified."
          }
        }
      }
    },
    "/api/reservations/{reservationId}/users/{userId}": {
      "put": {
        "tags": [
          "Reservations"
        ],
        "summary": "Adds a user to existing reservation.",
        "parameters": [
          {
            "name": "reservationId",
            "in": "path",
            "description": "Reservation id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Invalid userId specified."
          }
        }
      },
      "delete": {
        "tags": [
          "Reservations"
        ],
        "summary": "Removes a user from existing reservation.",
        "parameters": [
          {
            "name": "reservationId",
            "in": "path",
            "description": "Reservation id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Invalid userId specified."
          }
        }
      }
    },
    "/api/reservations/{reservationId}/hosts/{hostId}": {
      "put": {
        "tags": [
          "Reservations"
        ],
        "summary": "Adds a host to existing reservation.",
        "parameters": [
          {
            "name": "reservationId",
            "in": "path",
            "description": "Reservation id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "hostId",
            "in": "path",
            "description": "Host id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Invalid hostId specified."
          }
        }
      },
      "delete": {
        "tags": [
          "Reservations"
        ],
        "summary": "Removes a host from existing reservation.",
        "parameters": [
          {
            "name": "reservationId",
            "in": "path",
            "description": "Reservation id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "hostId",
            "in": "path",
            "description": "Host id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Invalid hostId specified."
          }
        }
      }
    },
    "/api/reservations": {
      "put": {
        "tags": [
          "Reservations"
        ],
        "summary": "Adds new reservation.",
        "parameters": [
          {
            "name": "UserId",
            "in": "query",
            "description": "Reserving user id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Note",
            "in": "query",
            "description": "Reservation note.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ContactPhone",
            "in": "query",
            "description": "Contact phone.",
            "schema": {
              "maxLength": 20,
              "type": "string"
            }
          },
          {
            "name": "ContactEmail",
            "in": "query",
            "description": "Contact email.",
            "schema": {
              "maxLength": 254,
              "type": "string"
            }
          },
          {
            "name": "Date",
            "in": "query",
            "description": "Reservation date.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "Duration",
            "in": "query",
            "description": "Reservation duration.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Users",
            "in": "query",
            "description": "Reservation users.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ReservationUserParameter"
              }
            }
          },
          {
            "name": "Hosts",
            "in": "query",
            "description": "Reservation hosts.",
            "required": true,
            "schema": {
              "minItems": 1,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ReservationHostParameter"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Reservations"
        ],
        "summary": "Updates existing reservation.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "Reservation id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "UserId",
            "in": "query",
            "description": "Reserving user id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Note",
            "in": "query",
            "description": "Reservation note.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ContactPhone",
            "in": "query",
            "description": "Contact phone.",
            "schema": {
              "maxLength": 20,
              "type": "string"
            }
          },
          {
            "name": "ContactEmail",
            "in": "query",
            "description": "Contact email.",
            "schema": {
              "maxLength": 254,
              "type": "string"
            }
          },
          {
            "name": "Date",
            "in": "query",
            "description": "Reservation date.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "Duration",
            "in": "query",
            "description": "Reservation duration.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Users",
            "in": "query",
            "description": "Reservation users.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ReservationUserParameter"
              }
            }
          },
          {
            "name": "Hosts",
            "in": "query",
            "description": "Reservation hosts.",
            "required": true,
            "schema": {
              "minItems": 1,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ReservationHostParameter"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Reservations"
        ],
        "summary": "Gets reservations.",
        "description": "Use the filter to drill down to desired results.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "Gets or sets deisred reservation id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Status",
            "in": "query",
            "description": "Gets or sets desired reservation status.",
            "schema": {
              "$ref": "#/components/schemas/ReservationStatus"
            }
          },
          {
            "name": "UserId",
            "in": "query",
            "description": "Gets or sets desired user id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Start",
            "in": "query",
            "description": "Gets filtered start date.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "End",
            "in": "query",
            "description": "Gets filtered end date.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "Take",
            "in": "query",
            "description": "Take amount.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Skip",
            "in": "query",
            "description": "Skip amount.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReservationInfo"
                  }
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReservationInfo"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/reservations/{reservationId}": {
      "get": {
        "tags": [
          "Reservations"
        ],
        "summary": "Gets reservation by id.",
        "parameters": [
          {
            "name": "reservationId",
            "in": "path",
            "description": "Reservation id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationInfo"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationInfo"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Invalid reservationId specified."
          }
        }
      }
    },
    "/api/service": {
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "Gets current syste time in UTC format.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/service/stop": {
      "post": {
        "tags": [
          "Service"
        ],
        "summary": "Stops service.",
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/service/restart": {
      "post": {
        "tags": [
          "Service"
        ],
        "summary": "Restarts service.",
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/service/status": {
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "Returns service resource usage status.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ISystemStatus"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ISystemStatus"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/service/version": {
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "Returns service version.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/service/module": {
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "Returns service executable module information.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IApplicationModule"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/IApplicationModule"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/service/hardwareid": {
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "Returns service hardware id string.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/service/settings": {
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "Returns service settings.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationRoot"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationRoot"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/service/network/stats": {
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "Returns service network stats.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceNetworkStats"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceNetworkStats"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/stats/session": {
      "get": {
        "tags": [
          "Stats"
        ],
        "summary": "Returns user session time.",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "User id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "max",
            "in": "query",
            "description": "Max entries to return.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Start date.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end",
            "in": "query",
            "description": "End date.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserSessionStat"
                  }
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserSessionStat"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/stats/user/logins/unique": {
      "get": {
        "tags": [
          "Stats"
        ],
        "summary": "Gets total amount of unique user logins.",
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "description": "Optional start date.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end",
            "in": "query",
            "description": "Optional end date.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/stats/user/logins": {
      "get": {
        "tags": [
          "Stats"
        ],
        "summary": "Returns total amount of logins.",
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "description": "Optional start date.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end",
            "in": "query",
            "description": "Optional end date.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/stats/host/use": {
      "get": {
        "tags": [
          "Stats"
        ],
        "summary": "Gets total host use time.",
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "description": "Optional start date.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end",
            "in": "query",
            "description": "Optional end date.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/stats/host/{hostGroupName}/use": {
      "get": {
        "tags": [
          "Stats"
        ],
        "summary": "Gets total host use time.",
        "parameters": [
          {
            "name": "hostGroupName",
            "in": "path",
            "description": "Host group name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Optional start date.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end",
            "in": "query",
            "description": "Optional end date.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/stats/host/{hostGroupName}/{userGroupName}/use": {
      "get": {
        "tags": [
          "Stats"
        ],
        "summary": "Gets total host use time.",
        "parameters": [
          {
            "name": "hostGroupName",
            "in": "path",
            "description": "Host group name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userGroupName",
            "in": "path",
            "description": "User group name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Optional start date.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end",
            "in": "query",
            "description": "Optional end date.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/stats/host/{hostGroupId}/{userGroupId}/use": {
      "get": {
        "tags": [
          "Stats"
        ],
        "summary": "Gets total host use time.",
        "parameters": [
          {
            "name": "hostGroupId",
            "in": "path",
            "description": "Optional host group id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userGroupId",
            "in": "path",
            "description": "Optional user group id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Optional start date.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end",
            "in": "query",
            "description": "Optional end date.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/stock": {
      "get": {
        "tags": [
          "Stock"
        ],
        "summary": "Returns all stock transactions.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StockTransaction"
                  }
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StockTransaction"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/stock/{productId}": {
      "get": {
        "tags": [
          "Stock"
        ],
        "summary": "Returns stock level for specified product.",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "Product id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number",
                  "format": "double"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "number",
                  "format": "double"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/stock/{productId}/{amount}": {
      "put": {
        "tags": [
          "Stock"
        ],
        "summary": "Adds specified amount to product stock level",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "Product id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "amount",
            "in": "path",
            "description": "Product amount.",
            "required": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StockTransaction"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/StockTransaction"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Stock"
        ],
        "summary": "Removes specified amount from product stock level.",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "Product id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "amount",
            "in": "path",
            "description": "Product amount.",
            "required": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StockTransaction"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/StockTransaction"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Stock"
        ],
        "summary": "Set specified amount as product stock level.",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "Product id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "amount",
            "in": "path",
            "description": "Product amount.",
            "required": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StockTransaction"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/StockTransaction"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/usergroups": {
      "get": {
        "tags": [
          "UserGroups"
        ],
        "summary": "Returns all user groups.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserGroup"
                  }
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserGroup"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "UserGroups"
        ],
        "summary": "Adds user group.",
        "parameters": [
          {
            "name": "Name",
            "in": "query",
            "description": "Gets or sets name.",
            "required": true,
            "schema": {
              "maxLength": 45,
              "minLength": 0,
              "type": "string"
            }
          },
          {
            "name": "Description",
            "in": "query",
            "description": "Gets or sets description.",
            "schema": {
              "maxLength": 255,
              "minLength": 0,
              "type": "string"
            }
          },
          {
            "name": "AppGroupId",
            "in": "query",
            "description": "Gets or sets app profile id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "SecurityProfileId",
            "in": "query",
            "description": "Gets or sets security profile id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "BillProfileId",
            "in": "query",
            "description": "Gets or sets bill profile id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "RequiredUserInfo",
            "in": "query",
            "description": "Gets or sets required user info.",
            "schema": {
              "$ref": "#/components/schemas/UserInfoTypes"
            }
          },
          {
            "name": "Overrides",
            "in": "query",
            "description": "Gets or sets ovverides.",
            "schema": {
              "$ref": "#/components/schemas/GroupOverrides"
            }
          },
          {
            "name": "Options",
            "in": "query",
            "description": "Gets or sets options.",
            "schema": {
              "$ref": "#/components/schemas/UserGroupOptionType"
            }
          },
          {
            "name": "CreditLimitOptions",
            "in": "query",
            "description": "Gets or sets credit limit options.",
            "schema": {
              "$ref": "#/components/schemas/CreditLimitOptionType"
            }
          },
          {
            "name": "IsNegativeBalanceAllowed",
            "in": "query",
            "description": "Gets or sets if user group allows negative balance.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "CreditLimit",
            "in": "query",
            "description": "Gets or sets credit limit.",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "PointsAwardOptions",
            "in": "query",
            "description": "Gets or sets time point award options.",
            "schema": {
              "$ref": "#/components/schemas/TimePointAwardOptionType"
            }
          },
          {
            "name": "PointsMoneyRatio",
            "in": "query",
            "description": "Gets or sets points money ratio.",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "PointsTimeRatio",
            "in": "query",
            "description": "Gets or sets points time multiplier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Points",
            "in": "query",
            "description": "Gets or sets amount of points to award.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "IsDefault",
            "in": "query",
            "description": "Gets or sets if user group is default for new users.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "IsAgeRatingEnabled",
            "in": "query",
            "description": "Gets or sets if age rating is enabled for the group.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "BillingOptions",
            "in": "query",
            "description": "Gets or sets user billing option.",
            "schema": {
              "$ref": "#/components/schemas/BillingOption"
            }
          },
          {
            "name": "WaitingLinePriority",
            "in": "query",
            "description": "Gets or sets user group priority.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "IsWaitingLinePriorityEnabled",
            "in": "query",
            "description": "Gets or sets if waiting line priority enabled.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "ModifiedById",
            "in": "query",
            "description": "Gets or sets modified by id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ModifiedTime",
            "in": "query",
            "description": "Gets or sets last modified time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "CreatedById",
            "in": "query",
            "description": "Gets or sets created by id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "CreatedTime",
            "in": "query",
            "description": "Gets or sets created time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "Id",
            "in": "query",
            "description": "Gets or sets primary id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "UserGroups"
        ],
        "summary": "Updates user group.",
        "parameters": [
          {
            "name": "Name",
            "in": "query",
            "description": "Gets or sets name.",
            "required": true,
            "schema": {
              "maxLength": 45,
              "minLength": 0,
              "type": "string"
            }
          },
          {
            "name": "Description",
            "in": "query",
            "description": "Gets or sets description.",
            "schema": {
              "maxLength": 255,
              "minLength": 0,
              "type": "string"
            }
          },
          {
            "name": "AppGroupId",
            "in": "query",
            "description": "Gets or sets app profile id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "SecurityProfileId",
            "in": "query",
            "description": "Gets or sets security profile id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "BillProfileId",
            "in": "query",
            "description": "Gets or sets bill profile id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "RequiredUserInfo",
            "in": "query",
            "description": "Gets or sets required user info.",
            "schema": {
              "$ref": "#/components/schemas/UserInfoTypes"
            }
          },
          {
            "name": "Overrides",
            "in": "query",
            "description": "Gets or sets ovverides.",
            "schema": {
              "$ref": "#/components/schemas/GroupOverrides"
            }
          },
          {
            "name": "Options",
            "in": "query",
            "description": "Gets or sets options.",
            "schema": {
              "$ref": "#/components/schemas/UserGroupOptionType"
            }
          },
          {
            "name": "CreditLimitOptions",
            "in": "query",
            "description": "Gets or sets credit limit options.",
            "schema": {
              "$ref": "#/components/schemas/CreditLimitOptionType"
            }
          },
          {
            "name": "IsNegativeBalanceAllowed",
            "in": "query",
            "description": "Gets or sets if user group allows negative balance.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "CreditLimit",
            "in": "query",
            "description": "Gets or sets credit limit.",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "PointsAwardOptions",
            "in": "query",
            "description": "Gets or sets time point award options.",
            "schema": {
              "$ref": "#/components/schemas/TimePointAwardOptionType"
            }
          },
          {
            "name": "PointsMoneyRatio",
            "in": "query",
            "description": "Gets or sets points money ratio.",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "PointsTimeRatio",
            "in": "query",
            "description": "Gets or sets points time multiplier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Points",
            "in": "query",
            "description": "Gets or sets amount of points to award.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "IsDefault",
            "in": "query",
            "description": "Gets or sets if user group is default for new users.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "IsAgeRatingEnabled",
            "in": "query",
            "description": "Gets or sets if age rating is enabled for the group.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "BillingOptions",
            "in": "query",
            "description": "Gets or sets user billing option.",
            "schema": {
              "$ref": "#/components/schemas/BillingOption"
            }
          },
          {
            "name": "WaitingLinePriority",
            "in": "query",
            "description": "Gets or sets user group priority.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "IsWaitingLinePriorityEnabled",
            "in": "query",
            "description": "Gets or sets if waiting line priority enabled.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "ModifiedById",
            "in": "query",
            "description": "Gets or sets modified by id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ModifiedTime",
            "in": "query",
            "description": "Gets or sets last modified time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "CreatedById",
            "in": "query",
            "description": "Gets or sets created by id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "CreatedTime",
            "in": "query",
            "description": "Gets or sets created time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "Id",
            "in": "query",
            "description": "Gets or sets primary id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/usergroups/{userGroupId}": {
      "delete": {
        "tags": [
          "UserGroups"
        ],
        "summary": "Deletes user group.",
        "parameters": [
          {
            "name": "userGroupId",
            "in": "path",
            "description": "User group id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/usergroups/{userGroupId}/disallowedhost": {
      "get": {
        "tags": [
          "UserGroups"
        ],
        "summary": "Returns disallowed host groups for specified user group.",
        "parameters": [
          {
            "name": "userGroupId",
            "in": "path",
            "description": "User group id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HostGroup"
                  }
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HostGroup"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/usergroups/{userGroupId}/disallowedhost/{hostGroupId}": {
      "get": {
        "tags": [
          "UserGroups"
        ],
        "summary": "Returns value indicating if host group is disallowed for specifed user group.",
        "parameters": [
          {
            "name": "userGroupId",
            "in": "path",
            "description": "User group id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "hostGroupId",
            "in": "path",
            "description": "Host group id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/usergroups/{userGroupId}/disallowedhost/{hostGroupId}/{disallow}": {
      "put": {
        "tags": [
          "UserGroups"
        ],
        "summary": "Allows or disallows a host group for specified user group.",
        "parameters": [
          {
            "name": "userGroupId",
            "in": "path",
            "description": "User group id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "hostGroupId",
            "in": "path",
            "description": "Host group id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "disallow",
            "in": "path",
            "description": "Disallow value.",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Returns all users.",
        "description": "<b>This function returns all users including guests.</b>",
        "parameters": [
          {
            "name": "UserGroupId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "IsDeleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "IsDisabled",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserMember"
                  }
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserMember"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Adds new user.",
        "parameters": [
          {
            "name": "Username",
            "in": "query",
            "description": "Username.\r\nThe username must be unique otherwise non unique api error will occur.",
            "required": true,
            "schema": {
              "maxLength": 254,
              "minLength": 0,
              "type": "string"
            }
          },
          {
            "name": "UserGroupId",
            "in": "query",
            "description": "User group id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Email",
            "in": "query",
            "description": "Email address.",
            "schema": {
              "maxLength": 254,
              "minLength": 0,
              "type": "string"
            }
          },
          {
            "name": "FirstName",
            "in": "query",
            "description": "First name.",
            "schema": {
              "maxLength": 45,
              "minLength": 0,
              "type": "string"
            }
          },
          {
            "name": "LastName",
            "in": "query",
            "description": "Last name.",
            "schema": {
              "maxLength": 45,
              "minLength": 0,
              "type": "string"
            }
          },
          {
            "name": "BirthDate",
            "in": "query",
            "description": "Birth date.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "Address",
            "in": "query",
            "description": "Address.",
            "schema": {
              "maxLength": 255,
              "minLength": 0,
              "type": "string"
            }
          },
          {
            "name": "City",
            "in": "query",
            "description": "City.",
            "schema": {
              "maxLength": 45,
              "minLength": 0,
              "type": "string"
            }
          },
          {
            "name": "Country",
            "in": "query",
            "description": "Country.",
            "schema": {
              "maxLength": 45,
              "minLength": 0,
              "type": "string"
            }
          },
          {
            "name": "PostCode",
            "in": "query",
            "description": "Post code.",
            "schema": {
              "maxLength": 20,
              "minLength": 0,
              "type": "string"
            }
          },
          {
            "name": "Phone",
            "in": "query",
            "description": "Phone number.",
            "schema": {
              "maxLength": 20,
              "minLength": 0,
              "type": "string"
            }
          },
          {
            "name": "MobilePhone",
            "in": "query",
            "description": "Mobile phone number.",
            "schema": {
              "maxLength": 20,
              "minLength": 0,
              "type": "string"
            }
          },
          {
            "name": "Sex",
            "in": "query",
            "description": "Sex.",
            "schema": {
              "$ref": "#/components/schemas/Sex"
            }
          },
          {
            "name": "Identification",
            "in": "query",
            "description": "Identification number.",
            "schema": {
              "maxLength": 255,
              "minLength": 0,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Updates existing user.",
        "parameters": [
          {
            "name": "UserId",
            "in": "query",
            "description": "User member id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Username",
            "in": "query",
            "description": "Username. <b>If left to null or empty value no username update will occur.</b>\r\nThe username must be unique otherwise non unique api error will occur.",
            "schema": {
              "maxLength": 254,
              "minLength": 0,
              "type": "string"
            }
          },
          {
            "name": "UserGroupId",
            "in": "query",
            "description": "User group id. <b>If left to null value no usergroup update will occur.</b>",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Email",
            "in": "query",
            "description": "Email address.",
            "schema": {
              "maxLength": 254,
              "minLength": 0,
              "type": "string"
            }
          },
          {
            "name": "FirstName",
            "in": "query",
            "description": "First name.",
            "schema": {
              "maxLength": 45,
              "minLength": 0,
              "type": "string"
            }
          },
          {
            "name": "LastName",
            "in": "query",
            "description": "Last name.",
            "schema": {
              "maxLength": 45,
              "minLength": 0,
              "type": "string"
            }
          },
          {
            "name": "BirthDate",
            "in": "query",
            "description": "Birth date.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "Address",
            "in": "query",
            "description": "Address.",
            "schema": {
              "maxLength": 255,
              "minLength": 0,
              "type": "string"
            }
          },
          {
            "name": "City",
            "in": "query",
            "description": "City.",
            "schema": {
              "maxLength": 45,
              "minLength": 0,
              "type": "string"
            }
          },
          {
            "name": "Country",
            "in": "query",
            "description": "Country.",
            "schema": {
              "maxLength": 45,
              "minLength": 0,
              "type": "string"
            }
          },
          {
            "name": "PostCode",
            "in": "query",
            "description": "Post code.",
            "schema": {
              "maxLength": 20,
              "minLength": 0,
              "type": "string"
            }
          },
          {
            "name": "Phone",
            "in": "query",
            "description": "Phone number.",
            "schema": {
              "maxLength": 20,
              "minLength": 0,
              "type": "string"
            }
          },
          {
            "name": "MobilePhone",
            "in": "query",
            "description": "Mobile phone number.",
            "schema": {
              "maxLength": 20,
              "minLength": 0,
              "type": "string"
            }
          },
          {
            "name": "Sex",
            "in": "query",
            "description": "Sex.",
            "schema": {
              "$ref": "#/components/schemas/Sex"
            }
          },
          {
            "name": "Identification",
            "in": "query",
            "description": "Identification number.",
            "schema": {
              "maxLength": 255,
              "minLength": 0,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{username}/username": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Returns user by username.",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "Username.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserMember"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/UserMember"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{userId}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Returns user by id.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserMember"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/UserMember"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Deletes existing user.",
        "description": "<b>The function will mark the user as deleted and will not remove user or associated records from database.</b>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{username}/userid": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Returns user id for specified username.",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "Username.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{userId}/username/{newUsername}": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Renames existing user.",
        "description": "",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "newUsername",
            "in": "path",
            "description": "New username.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{userId}/undelete": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Undelete existing user.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{userId}/exist": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Returns if a user exist with specified user id.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/exist/{userId}": {
      "get": {
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/username/{userName}/exist": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Returns if a user exist with specified username.",
        "parameters": [
          {
            "name": "userName",
            "in": "path",
            "description": "User name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/username/exist": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Returns if a user exist with specified username.",
        "parameters": [
          {
            "name": "userName",
            "in": "query",
            "description": "User name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/email/{userEmail}/exist": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Returns if a user exist with specified email address.",
        "parameters": [
          {
            "name": "userEmail",
            "in": "path",
            "description": "User email address.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/email/exist/{userEmail}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Returns if a user exist with specified email address.",
        "parameters": [
          {
            "name": "userEmail",
            "in": "path",
            "description": "User email address.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/loginname/{loginName}/exist": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Returns if a user exist with specified username or email address.",
        "parameters": [
          {
            "name": "loginName",
            "in": "path",
            "description": "Login name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/loginname/exist": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Returns if a user exist with specified username or email address.",
        "parameters": [
          {
            "name": "loginName",
            "in": "query",
            "description": "Login name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{userId}/password/{newPassword}": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Sets user password.",
        "description": "<b>Specifying null as newPassword will cause a password reset.</b>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "newPassword",
            "in": "path",
            "description": "New user password.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{userId}/password/reset": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Resets user password.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{userId}/email/{newEmail}": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Sets user email address.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "newEmail",
            "in": "path",
            "description": "Email address.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{userId}/usergroup/{newUserGroupId}": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Sets user group for specified user.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "newUserGroupId",
            "in": "path",
            "description": "New user gropup id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{userId}/logout": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Logouts sepcified user.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{userId}/login/{hostId}": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Logs in user.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "hostId",
            "in": "path",
            "description": "Host id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResult"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResult"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{userId}/lastlogin": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Returns users last login time.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{userId}/lastlogout": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Returns user las logout time.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{userId}/loginstate": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Returns current login state for the user.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginState"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/LoginState"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{userId}/currenthost": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Returns current logged in host for the user.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Host"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/Host"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{userId}/currenthostid": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Returns current logged in host id for specified user.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{userId}/deposit/{amount}/{paymentMethodId}": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Adds sepcified amount to user deposits.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "amount",
            "in": "path",
            "description": "Amount.",
            "required": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "paymentMethodId",
            "in": "path",
            "description": "Payment method id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DepositPayment"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/DepositPayment"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{userId}/deposit/{amount}": {
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Withdraws specified amount from user deposits.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "amount",
            "in": "path",
            "description": "Amount.",
            "required": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DepositTransaction"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/DepositTransaction"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{userId}/points": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Returns user point balance.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{userId}/points/{amount}": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Awards specified points amount to the user.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "amount",
            "in": "path",
            "description": "Amount.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PointTransaction"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/PointTransaction"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Redeems specified amount of points for user.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "amount",
            "in": "path",
            "description": "Points amount.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PointTransaction"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/PointTransaction"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{userName}/points/{amount}/award": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Awards specified amount of points to user.",
        "parameters": [
          {
            "name": "userName",
            "in": "path",
            "description": "User name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "amount",
            "in": "path",
            "description": "Points amount.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{userName}/points/{amount}/redeem": {
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Redeems specified amount of points for user.",
        "parameters": [
          {
            "name": "userName",
            "in": "path",
            "description": "User name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "amount",
            "in": "path",
            "description": "Points amount.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{userId}/attribute": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Returns all attributes set for user.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserAttribute"
                  }
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserAttribute"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{userId}/attribute/{attributeId}/{attributeValue}": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Sets specified attribute value to specified user.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeId",
            "in": "path",
            "description": "Attribute id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeValue",
            "in": "path",
            "description": "Attribute value.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{userId}/attribute/{attributeName}/{attributeValue}": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Sets specified attribute value to specified user.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeName",
            "in": "path",
            "description": "Attribute name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attributeValue",
            "in": "path",
            "description": "Attribute value.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{userId}/attribute/{attributeName}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Gets specified attribute value for specified user.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeName",
            "in": "path",
            "description": "Attribute name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Deletes specified attribute from specified user.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeName",
            "in": "path",
            "description": "Attribute name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{userId}/attribute/{attributeId}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Gets specified attribute value for specified user.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Deletes specified attribute from specified user.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeId",
            "in": "path",
            "description": "Attribute id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/balance": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Returns all user balance info.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserBalance"
                  }
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserBalance"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{userId}/balance": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Returns user balance info.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserBalance"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/UserBalance"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{userId}/time/{minutes}/money": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Returns time cost for specified user for specified amount of minutes.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "minutes",
            "in": "path",
            "description": "Minutes amount.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number",
                  "format": "double"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "number",
                  "format": "double"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{userId}/money/{money}/time": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Returns amount of minutes user receives based on specified amount of money.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "money",
            "in": "path",
            "description": "Money amount.",
            "required": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number",
                  "format": "double"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "number",
                  "format": "double"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{userId}/order/time/{amount}/invoice": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Adds fixed time to user.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "amount",
            "in": "path",
            "description": "Time amount.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{userId}/order/time/{amount}/invoice/payment/{paymentMethodId}": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Adds fixed time to user.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "amount",
            "in": "path",
            "description": "Time amount.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "paymentMethodId",
            "in": "path",
            "description": "Prefered payment method id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{userId}/order/time/{amount}/price/{price}/invoice": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Adds fixed time to user for specified amount of money.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "amount",
            "in": "path",
            "description": "Time amount.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "price",
            "in": "path",
            "description": "Fixed price.",
            "required": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{userId}/order/time/{amount}/price/{price}/invoice/payment/{paymentMethodId}": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Adds fixed time to user for specified amount of money.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "amount",
            "in": "path",
            "description": "Time amount.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "price",
            "in": "path",
            "description": "Fixed price.",
            "required": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "paymentMethodId",
            "in": "path",
            "description": "Prefered payment method id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{userId}/order/time/money/{amount}/invoice": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Adds fixed time to user for specifed amount of money.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "amount",
            "in": "path",
            "description": "Amount of money.",
            "required": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{userId}/order/time/money/{amount}/invoice/payment/{paymentMethodId}": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Adds fixed time to user for specifed amount of money.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "amount",
            "in": "path",
            "description": "Amount of money.",
            "required": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "paymentMethodId",
            "in": "path",
            "description": "Prefered payment method id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{userId}/note/{text}/{sevirity}": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Adds a user note to specified user.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "text",
            "in": "path",
            "description": "Note text.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sevirity",
            "in": "path",
            "description": "Note sevirity.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NoteSeverity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{userId}/note": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Returns user notes for specified user.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserNote"
                  }
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserNote"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{userId}/picture": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Returns user picture.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Adds or updates user picture.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "User picture data.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string",
                "format": "byte"
              }
            },
            "text/json": {
              "schema": {
                "type": "string",
                "format": "byte"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string",
                "format": "byte"
              }
            },
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "byte"
              }
            },
            "application/x-msgpack": {
              "schema": {
                "type": "string",
                "format": "byte"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{userId}/app/{appId}/rating/{value}": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Adds or updates user app rating.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "appId",
            "in": "path",
            "description": "App id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "value",
            "in": "path",
            "description": "Rating value.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{userId}/app/{appId}/rating": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Returns user app rating.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "appId",
            "in": "path",
            "description": "App id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{username}/{password}/valid": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Returns if user credentials are valid.",
        "description": "This function should be only used for user credentials validation checks.\r\n<b>For user operations tokens and user facing apis should be used instead.</b>",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "User name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "path",
            "description": "User password.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{userId}/app/infos/top/rating": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Returns user top rated app infos.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "max",
            "in": "query",
            "description": "Max entries to return.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AppInfo"
                  }
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AppInfo"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{userId}/app/infos/top/use": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Gets user top used app infos.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "max",
            "in": "query",
            "description": "Max entries to return.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AppInfo"
                  }
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AppInfo"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{userId}/order/{productId}/{quantity}/invoice/payment/{paymentMethodId}": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Creates a user product order and invoice it.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "productId",
            "in": "path",
            "description": "Product id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "quantity",
            "in": "path",
            "description": "Product quantity.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "paymentMethodId",
            "in": "path",
            "description": "Prefered payment method id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{userId}/order/{productId}/invoice": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Creates a user product order and invoice it.",
        "description": "This will create an order with specified product quantity set to one and will use default payment method.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "productId",
            "in": "path",
            "description": "Product id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{userId}/order/{productId}/invoice/payment/{paymentMethodId}": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Creates a user product order and invoice it.",
        "description": "This will create an order with specified product quantity set to one.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "productId",
            "in": "path",
            "description": "Product id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "paymentMethodId",
            "in": "path",
            "description": "Prefered payment method id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{userId}/logins": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Returns user logins sessions info.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "hostId",
            "in": "query",
            "description": "Optional host id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Optional start date.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end",
            "in": "query",
            "description": "Optional end date.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserLoginSessionInfo"
                  }
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserLoginSessionInfo"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{userId}/producttime": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Returns user time products.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserProductTime"
                  }
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserProductTime"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{userId}/producttimeextended": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Returns user extended product time info.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserProductTime"
                  }
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserProductTime"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/usersessions": {
      "get": {
        "tags": [
          "UserSessions"
        ],
        "summary": "Returns user sessions.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserSession"
                  }
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserSession"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/usersessions/active": {
      "get": {
        "tags": [
          "UserSessions"
        ],
        "summary": "Returns active user sessions.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserSession"
                  }
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserSession"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/usersessions/activeinfo": {
      "get": {
        "tags": [
          "UserSessions"
        ],
        "summary": "Returns active user sessions info.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserSessionInfoExtended"
                  }
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserSessionInfoExtended"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1.0/verifications/email/{userId}/{emailAddress}": {
      "post": {
        "tags": [
          "Verifications"
        ],
        "summary": "Starts email verification.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "emailAddress",
            "in": "path",
            "description": "Email address.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerificationStartResultModelEmail"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/VerificationStartResultModelEmail"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Invalid userId specified."
          }
        }
      }
    },
    "/api/v1.0/verifications/email/{emailAddress}": {
      "post": {
        "tags": [
          "Verifications"
        ],
        "summary": "Starts email verification for calling user.",
        "parameters": [
          {
            "name": "emailAddress",
            "in": "path",
            "description": "Email address.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerificationStartResultModelEmail"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/VerificationStartResultModelEmail"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1.0/verifications/email/{token}/{confirmationCode}/complete": {
      "post": {
        "tags": [
          "Verifications"
        ],
        "summary": "Completes email verification.",
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "description": "Token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "confirmationCode",
            "in": "path",
            "description": "Confirmation code.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerificationCompleteResultCode"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/VerificationCompleteResultCode"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1.0/verifications/mobilephone/{userId}/{mobilePhoneNumber}": {
      "post": {
        "tags": [
          "Verifications"
        ],
        "summary": "Starts mobile phone verification.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "mobilePhoneNumber",
            "in": "path",
            "description": "Mobile phone.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerificationStartResultModelMobilePhone"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/VerificationStartResultModelMobilePhone"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Invalid userId specified."
          }
        }
      }
    },
    "/api/v1.0/verifications/mobilephone/{mobilePhoneNumber}": {
      "post": {
        "tags": [
          "Verifications"
        ],
        "summary": "Starts mobile phone verification for calling user.",
        "parameters": [
          {
            "name": "mobilePhoneNumber",
            "in": "path",
            "description": "Mobile phone.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerificationStartResultModelMobilePhone"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/VerificationStartResultModelMobilePhone"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1.0/verifications/mobilephone/{token}/{confirmationCode}/complete": {
      "post": {
        "tags": [
          "Verifications"
        ],
        "summary": "Completes mobile phone verification.",
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "description": "Token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "confirmationCode",
            "in": "path",
            "description": "Confirmation code.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerificationCompleteResultCode"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/VerificationCompleteResultCode"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              },
              "application/x-msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AccountCreationByTokenCompleteResultCode": {
        "enum": [
          0,
          1,
          101,
          102,
          103,
          104,
          105,
          201,
          202,
          402,
          404
        ],
        "type": "integer",
        "format": "int32"
      },
      "AccountCreationCompleteResultModelByToken": {
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/AccountCreationByTokenCompleteResultCode"
          },
          "createdUserId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AccountCreationResultModelByEmail": {
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/VerificationStartResultCode"
          },
          "token": {
            "type": "string",
            "nullable": true
          },
          "codeLength": {
            "type": "integer",
            "format": "int32"
          },
          "email": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AccountCreationResultModelByMobilePhone": {
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/VerificationStartResultCode"
          },
          "token": {
            "type": "string",
            "nullable": true
          },
          "codeLength": {
            "type": "integer",
            "format": "int32"
          },
          "mobilePhone": {
            "type": "string",
            "nullable": true
          },
          "deliveryMethod": {
            "$ref": "#/components/schemas/ConfirmationCodeDeliveryMethod"
          }
        },
        "additionalProperties": false
      },
      "AccountTransactionDTO": {
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "description": "The creation time of the account transaction.",
            "format": "date-time"
          },
          "transactionType": {
            "$ref": "#/components/schemas/DepositTransactionType"
          },
          "paymentMethodId": {
            "type": "integer",
            "description": "The payment type Id of the transaction.",
            "format": "int32"
          },
          "paymentMethodName": {
            "type": "string",
            "description": "The payment type name of the transaction.",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "The amount of the transaction.",
            "format": "double"
          },
          "quantity": {
            "type": "integer",
            "description": "The quantity of the transactions with the specific amount, in case of grouped transactions.",
            "format": "int32"
          },
          "total": {
            "type": "number",
            "description": "The total amount of the transactions with the specific amount, in case of grouped transactions.",
            "format": "double"
          },
          "operatorId": {
            "type": "integer",
            "description": "The Id of the operator performed the account transaction.",
            "format": "int32",
            "nullable": true
          },
          "userGroupId": {
            "type": "integer",
            "description": "The Id of the group to which the user belongs.",
            "format": "int32"
          },
          "isGuest": {
            "type": "boolean",
            "description": "The user is guest."
          },
          "isVoid": {
            "type": "boolean",
            "description": "Is Void."
          }
        },
        "additionalProperties": false,
        "description": "Account Transaction."
      },
      "AgeHourRestriction": {
        "type": "object",
        "properties": {
          "maximumAge": {
            "type": "integer",
            "description": "Maximum age.",
            "format": "int32"
          },
          "timeFrom": {
            "$ref": "#/components/schemas/TimeSpan"
          },
          "timeTo": {
            "$ref": "#/components/schemas/TimeSpan"
          }
        },
        "additionalProperties": false,
        "description": "Age-Hour restriction."
      },
      "AgeHourRestrictionConfig": {
        "type": "object",
        "properties": {
          "isEnabled": {
            "type": "boolean",
            "description": "Gets or sets if age-hour restrictions are enabled.",
            "default": false
          },
          "restrictions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AgeHourRestriction"
            },
            "description": "Gets restrictions.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Age-Hour restriction configuration class."
      },
      "AgeRatingType": {
        "enum": [
          0,
          1,
          2,
          3
        ],
        "type": "integer",
        "description": "Age rating types.",
        "format": "int32"
      },
      "App": {
        "required": [
          "guid",
          "title"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Gets or sets primary id.",
            "format": "int32"
          },
          "createdById": {
            "type": "integer",
            "description": "Gets or sets created by id.",
            "format": "int32",
            "nullable": true
          },
          "createdTime": {
            "type": "string",
            "description": "Gets or sets created time.",
            "format": "date-time"
          },
          "modifiedById": {
            "type": "integer",
            "description": "Gets or sets modified by id.",
            "format": "int32",
            "nullable": true
          },
          "modifiedTime": {
            "type": "string",
            "description": "Gets or sets last modified time.",
            "format": "date-time",
            "nullable": true
          },
          "title": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Gets or Sets application title."
          },
          "description": {
            "type": "string",
            "description": "Gets or Sets application description.",
            "nullable": true
          },
          "version": {
            "maxLength": 45,
            "minLength": 0,
            "type": "string",
            "description": "Gets or Sets application version.",
            "nullable": true
          },
          "appCategoryId": {
            "type": "integer",
            "description": "Gets or Sets applications genre.",
            "format": "int32"
          },
          "developerId": {
            "type": "integer",
            "description": "Gets or Sets applications developer.",
            "format": "int32",
            "nullable": true
          },
          "publisherId": {
            "type": "integer",
            "description": "Gets or Sets applications publisher.",
            "format": "int32",
            "nullable": true
          },
          "ageRating": {
            "type": "integer",
            "description": "Gets or sets applications age rating.",
            "format": "int32"
          },
          "releaseDate": {
            "type": "string",
            "description": "Gets or Sets applications release date.",
            "format": "date-time",
            "nullable": true
          },
          "options": {
            "$ref": "#/components/schemas/AppOptionType"
          },
          "ageRatingType": {
            "$ref": "#/components/schemas/AgeRatingType"
          },
          "guid": {
            "type": "string",
            "description": "Gets or sets items guid.\r\n<remarks>This property is required to globaly identify the object. In case of exporting or importing applications it gives us ability to have unique objects.</remarks>",
            "format": "uuid"
          },
          "defaultExecutableId": {
            "type": "integer",
            "description": "Gets or sets default executable id.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "App entity."
      },
      "AppInfo": {
        "type": "object",
        "properties": {
          "appId": {
            "type": "integer",
            "description": "Application id.",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "description": "Application title.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Application description.",
            "nullable": true
          },
          "rating": {
            "type": "integer",
            "description": "Application rating.",
            "format": "int32"
          },
          "ratingsCount": {
            "type": "integer",
            "description": "Ratings count.",
            "format": "int32"
          },
          "totalExecutions": {
            "type": "integer",
            "description": "Total executions.",
            "format": "int32"
          },
          "totalExecutionSeconds": {
            "type": "number",
            "description": "Total execution seconds.",
            "format": "double"
          },
          "totalExecutionMinutes": {
            "type": "number",
            "description": "Total execution minutes.",
            "format": "double",
            "readOnly": true
          },
          "totalExecutionHours": {
            "type": "number",
            "description": "Total execution hours.",
            "format": "double",
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "Application info."
      },
      "AppOptionType": {
        "enum": [
          0,
          1
        ],
        "type": "integer",
        "description": "Application options.",
        "format": "int32"
      },
      "AppRating": {
        "type": "object",
        "properties": {
          "value": {
            "type": "integer",
            "description": "Gets or sets value.",
            "format": "int32"
          },
          "date": {
            "type": "string",
            "description": "Gets or sets last vote time.",
            "format": "date-time"
          },
          "userId": {
            "type": "integer",
            "description": "Gets or sets user id.",
            "format": "int32"
          },
          "username": {
            "type": "string",
            "description": "Gets or sets user name.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "App rating entity."
      },
      "AppTitle": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Gets or Sets application Id.",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "description": "Gets or Sets application title.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "App title."
      },
      "ApplicationInfoDTO": {
        "type": "object",
        "properties": {
          "applicationId": {
            "type": "integer",
            "description": "Application Id.",
            "format": "int32"
          },
          "applicationName": {
            "type": "string",
            "description": "Application name.",
            "nullable": true
          },
          "uniqueUsers": {
            "type": "integer",
            "description": "The number of unique users who ran the application.",
            "format": "int32"
          },
          "uniqueSessions": {
            "type": "integer",
            "description": "The number of unique sessions in which the application ran.",
            "format": "int32"
          },
          "totalExecutions": {
            "type": "integer",
            "description": "Number of total runs.",
            "format": "int32"
          },
          "totalSeconds": {
            "type": "number",
            "description": "Total seconds the application was running.",
            "format": "double"
          },
          "totalTime": {
            "type": "string",
            "description": "Total time the application was running as text.",
            "nullable": true
          },
          "totalExecutionsPercentage": {
            "type": "number",
            "description": "Run time percentage in comparison with other applications within the same period.",
            "format": "double"
          },
          "averageDailyExecutionTime": {
            "type": "string",
            "description": "Average daily run time as text.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Application Information."
      },
      "ApplicationReportDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Report Name.",
            "nullable": true
          },
          "dateFrom": {
            "type": "string",
            "description": "Filtered Date From.",
            "format": "date-time"
          },
          "dateTo": {
            "type": "string",
            "description": "Filtered Date To.",
            "format": "date-time"
          },
          "companyName": {
            "type": "string",
            "description": "Company Name.",
            "nullable": true
          },
          "reportType": {
            "$ref": "#/components/schemas/ReportTypes"
          },
          "userId": {
            "type": "integer",
            "description": "Filtered User Id.",
            "format": "int32",
            "nullable": true
          },
          "userName": {
            "type": "string",
            "description": "Filtered User Name.",
            "nullable": true
          },
          "applicationId": {
            "type": "integer",
            "description": "Filtered Application Id.",
            "format": "int32"
          },
          "applicationName": {
            "type": "string",
            "description": "Filtered Application Name.",
            "nullable": true
          },
          "application": {
            "$ref": "#/components/schemas/ApplicationInfoDTO"
          },
          "executables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExecutableExecutionSummaryDTO"
            },
            "description": "List of executables that belongs to the application and ran within the reporting period.",
            "nullable": true
          },
          "hoursPerUserGroupChart": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChartGroupDTO"
            },
            "description": "List of records for the runtime per user group chart.",
            "nullable": true
          },
          "hoursPerHostGroupChart": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChartGroupDTO"
            },
            "description": "List of records for the runtime per host group chart.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Application Report."
      },
      "ApplicationsReportDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Report Name.",
            "nullable": true
          },
          "dateFrom": {
            "type": "string",
            "description": "Filtered Date From.",
            "format": "date-time"
          },
          "dateTo": {
            "type": "string",
            "description": "Filtered Date To.",
            "format": "date-time"
          },
          "companyName": {
            "type": "string",
            "description": "Company Name.",
            "nullable": true
          },
          "reportType": {
            "$ref": "#/components/schemas/ReportTypes"
          },
          "userId": {
            "type": "integer",
            "description": "Filtered User Id.",
            "format": "int32",
            "nullable": true
          },
          "userName": {
            "type": "string",
            "description": "Filtered User Name.",
            "nullable": true
          },
          "applications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationInfoDTO"
            },
            "description": "List of applications that ran within the reporting period.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Applications Report."
      },
      "AssetTransactionDTO": {
        "type": "object",
        "properties": {
          "assetType": {
            "type": "string",
            "description": "Asset type.",
            "nullable": true
          },
          "assetNumber": {
            "type": "integer",
            "description": "Asset number.",
            "format": "int32"
          },
          "assetName": {
            "type": "string",
            "description": "Asset name.",
            "nullable": true
          },
          "customer": {
            "type": "string",
            "description": "Customer name.",
            "nullable": true
          },
          "checkOutTime": {
            "type": "string",
            "description": "The time the asset was checked out.",
            "format": "date-time"
          },
          "checkOutOperator": {
            "type": "string",
            "description": "Name of the operator that checked out the asset.",
            "nullable": true
          },
          "checkInTime": {
            "type": "string",
            "description": "The time the asset was checked in or null if is still checked out.",
            "format": "date-time",
            "nullable": true
          },
          "checkInOperator": {
            "type": "string",
            "description": "Name of the operator that checked in the asset.",
            "nullable": true
          },
          "leaseDuration": {
            "type": "string",
            "description": "Duration of the lease as text.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Asset transaction information."
      },
      "AssetsLogReportDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Report Name.",
            "nullable": true
          },
          "dateFrom": {
            "type": "string",
            "description": "Filtered Date From.",
            "format": "date-time"
          },
          "dateTo": {
            "type": "string",
            "description": "Filtered Date To.",
            "format": "date-time"
          },
          "companyName": {
            "type": "string",
            "description": "Company Name.",
            "nullable": true
          },
          "reportType": {
            "$ref": "#/components/schemas/ReportTypes"
          },
          "assetTypeId": {
            "type": "integer",
            "description": "Filtered Asset Type Id.",
            "format": "int32",
            "nullable": true
          },
          "assetTypeName": {
            "type": "string",
            "description": "Filtered Asset Type Name.",
            "nullable": true
          },
          "assetId": {
            "type": "integer",
            "description": "Filtered Asset Id.",
            "format": "int32",
            "nullable": true
          },
          "assetName": {
            "type": "string",
            "description": "Filtered Asset Name.",
            "nullable": true
          },
          "checkOutOperatorId": {
            "type": "integer",
            "description": "Filtered Check Out Operator Id.",
            "format": "int32",
            "nullable": true
          },
          "checkOutOperatorName": {
            "type": "string",
            "description": "Filtered Check Out Operator Name.",
            "nullable": true
          },
          "checkInOperatorId": {
            "type": "integer",
            "description": "Filtered Check In Operator Id.",
            "format": "int32",
            "nullable": true
          },
          "checkInOperatorName": {
            "type": "string",
            "description": "Filtered Check In Operator Name.",
            "nullable": true
          },
          "userId": {
            "type": "integer",
            "description": "Filtered User Id.",
            "format": "int32",
            "nullable": true
          },
          "userName": {
            "type": "string",
            "description": "Filtered User Name.",
            "nullable": true
          },
          "assetTransactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetTransactionDTO"
            },
            "description": "List of asset transactions within the reporting period.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Assets Log Report."
      },
      "Attribute": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Gets or sets primary id.",
            "format": "int32"
          },
          "createdById": {
            "type": "integer",
            "description": "Gets or sets created by id.",
            "format": "int32",
            "nullable": true
          },
          "createdTime": {
            "type": "string",
            "description": "Gets or sets created time.",
            "format": "date-time"
          },
          "modifiedById": {
            "type": "integer",
            "description": "Gets or sets modified by id.",
            "format": "int32",
            "nullable": true
          },
          "modifiedTime": {
            "type": "string",
            "description": "Gets or sets last modified time.",
            "format": "date-time",
            "nullable": true
          },
          "name": {
            "maxLength": 45,
            "minLength": 0,
            "type": "string",
            "description": "Gets or sets attribute name."
          },
          "friendlyName": {
            "maxLength": 45,
            "minLength": 0,
            "type": "string",
            "description": "Gets or sets friendly name.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Attribute entity."
      },
      "AutoInvoiceConfig": {
        "type": "object",
        "properties": {
          "autoInvoice": {
            "type": "boolean",
            "description": "Auto invoice.",
            "default": true
          },
          "afterMinutes": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "description": "After minutes.",
            "format": "int32",
            "default": 0
          },
          "autoPay": {
            "type": "boolean",
            "description": "Auto pay.",
            "default": true
          }
        },
        "additionalProperties": false,
        "description": "Auto invoice configuration class."
      },
      "BillingOption": {
        "enum": [
          0,
          1,
          2,
          4
        ],
        "type": "integer",
        "description": "Billing options.",
        "format": "int32"
      },
      "ChartGroupDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Chart group name.",
            "nullable": true
          },
          "groupRecords": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChartRecordDTO"
            },
            "description": "List of records for the group.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Chart Group."
      },
      "ChartRecordDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the chart record.",
            "nullable": true
          },
          "value": {
            "type": "number",
            "description": "The value of the chart record.",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Chart Record."
      },
      "ClientConfig": {
        "type": "object",
        "properties": {
          "mounterPath": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Gets or sets file path to the virtual image mounting executable.",
            "default": "C:\\Program Files\\DAEMON Tools Lite\\daemon.exe",
            "nullable": true
          },
          "mounterOptions": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Gets or sets virtual image mounter options.",
            "default": "-mount",
            "nullable": true
          },
          "isPersonalStorageEnabled": {
            "type": "boolean",
            "description": "Enables or disables personal personal storage.",
            "default": false
          },
          "personalStorageDriveLetter": {
            "type": "string",
            "description": "Gets or sets personal user storage drive letter.",
            "default": "U:",
            "nullable": true
          },
          "personalStorageSize": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets personal drive quouta.",
            "format": "int32",
            "default": 2000
          },
          "redirectedFolders": {
            "$ref": "#/components/schemas/KnownFolderTypes"
          },
          "turnOffIdleComputers": {
            "type": "boolean",
            "description": "Gets or sets if idle computers should be turned off.",
            "default": false
          },
          "turnOffTimeOut": {
            "type": "integer",
            "description": "Gets or sets time before unused system shutdown.",
            "format": "int32",
            "default": 10
          },
          "turnOffIdleSleepEnable": {
            "type": "boolean",
            "description": "Gets or sets if computers should sleep on idle turn off.",
            "default": false
          },
          "allocateDiskSpace": {
            "type": "boolean",
            "description": "Gets or sets if free disk space should be allocated.",
            "default": false
          },
          "diskAllocation": {
            "$ref": "#/components/schemas/FreeSpaceAllocations"
          },
          "confirmLogout": {
            "type": "boolean",
            "description": "Gets or sets if logout should be confirmed by the user.",
            "default": true
          },
          "general": {
            "$ref": "#/components/schemas/ClientGeneralConfig"
          },
          "shell": {
            "$ref": "#/components/schemas/ClientShellConfig"
          }
        },
        "additionalProperties": false,
        "description": "Client configuration class."
      },
      "ClientGeneralConfig": {
        "required": [
          "dataPath",
          "managerPassword"
        ],
        "type": "object",
        "properties": {
          "dataPath": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Gets or sets clients data path.",
            "default": "%ALLUSERSPROFILE%\\Application Data\\NETProjects\\Gizmo Client\\"
          },
          "managerPassword": {
            "type": "string",
            "description": "Gets or sets client manager password.",
            "default": "password"
          },
          "isAgeRatingsEnabled": {
            "type": "boolean",
            "description": "Gets or sets if age ratings are enabled.",
            "default": true
          },
          "isOrderingEnabled": {
            "type": "boolean",
            "description": "Gets or sets if client ordering is enabled.",
            "default": true
          },
          "isClientRegistrationEnabled": {
            "type": "boolean",
            "description": "Gets or sets if client registrations are enabled.",
            "default": false
          },
          "verificationMethod": {
            "$ref": "#/components/schemas/RegistrationVerificationMethod"
          },
          "isConcurrentExecutionLimitEnabled": {
            "type": "boolean",
            "description": "Gets or set if concurrent execution limit is enabled.",
            "default": false
          },
          "isWebRegistrationEnabled": {
            "type": "boolean",
            "description": "Gets or sets if web registrations are enabled.",
            "default": false
          },
          "recoveryMethod": {
            "$ref": "#/components/schemas/UserRecoveryMethod"
          },
          "confirmationCodeLength": {
            "maximum": 8,
            "minimum": 4,
            "type": "integer",
            "description": "Gets or set confirmation code length.",
            "format": "int32",
            "default": 6
          },
          "confirmationCodeCharacters": {
            "$ref": "#/components/schemas/KeyGenerationCharacters"
          }
        },
        "additionalProperties": false,
        "description": "Client general configuration class."
      },
      "ClientShellConfig": {
        "type": "object",
        "properties": {
          "skinName": {
            "type": "string",
            "description": "Gets or sets name of the current GUI Skin.",
            "default": "Material",
            "nullable": true
          },
          "isDesktopEnabled": {
            "type": "boolean",
            "description": "Gets or sets if shell desktop is enabled.",
            "default": true
          },
          "language": {
            "type": "string",
            "description": "Gets or sets client language.",
            "default": "English",
            "nullable": true
          },
          "logoutAction": {
            "$ref": "#/components/schemas/LogoutAction"
          },
          "timeNotificationMessage": {
            "type": "string",
            "description": "Gets or sets user time notification message.",
            "default": null,
            "nullable": true
          },
          "timeLeftWarning": {
            "type": "integer",
            "description": "Get or sets time left warning minutes.",
            "format": "int32",
            "default": 0
          },
          "timeLeftWarningType": {
            "$ref": "#/components/schemas/TimeLeftWarningType"
          },
          "virtualDesktopItems": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Gets or sets virtual desktop items.",
            "default": null,
            "nullable": true
          },
          "disableStarMenu": {
            "type": "boolean",
            "description": "Gets or sets if star menu is disabled.",
            "default": false
          },
          "stickyShell": {
            "type": "boolean",
            "description": "Gets or sets if sticky shell is enabled.",
            "default": false
          },
          "disableDesktopSwitching": {
            "type": "boolean",
            "description": "Gets or sets if desktop switching is disabled.",
            "default": true
          },
          "timeNotifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimeNotification"
            },
            "description": "Gets or sets user time notifications.",
            "nullable": true
          },
          "isGracePeriodEnabled": {
            "type": "boolean",
            "description": "Gets or sets if grace period is enabled."
          },
          "gracePeriodTime": {
            "type": "integer",
            "description": "Gets or sets the grace period time.",
            "format": "int32",
            "default": 1
          }
        },
        "additionalProperties": false,
        "description": "Client shell configuration class."
      },
      "ConfigurationRoot": {
        "type": "object",
        "properties": {
          "global": {
            "$ref": "#/components/schemas/GlobalConfiguration"
          },
          "service": {
            "$ref": "#/components/schemas/ServiceConfig"
          },
          "client": {
            "$ref": "#/components/schemas/ClientConfig"
          }
        },
        "additionalProperties": false,
        "description": "Service configuration root class."
      },
      "ConfirmationCodeDeliveryMethod": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "CreditLimitOptionType": {
        "enum": [
          0,
          2,
          4,
          8,
          16,
          32
        ],
        "type": "integer",
        "description": "Credit limit options.",
        "format": "int32"
      },
      "DatabaseType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5
        ],
        "type": "integer",
        "description": "Database types.",
        "format": "int32"
      },
      "DepositPayment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Gets or sets primary id.",
            "format": "int32"
          },
          "createdById": {
            "type": "integer",
            "description": "Gets or sets created by id.",
            "format": "int32",
            "nullable": true
          },
          "createdTime": {
            "type": "string",
            "description": "Gets or sets created time.",
            "format": "date-time"
          },
          "modifiedById": {
            "type": "integer",
            "description": "Gets or sets modified by id.",
            "format": "int32",
            "nullable": true
          },
          "modifiedTime": {
            "type": "string",
            "description": "Gets or sets last modified time.",
            "format": "date-time",
            "nullable": true
          },
          "userId": {
            "type": "integer",
            "description": "Gets or sets user id.",
            "format": "int32"
          },
          "depositTransactionId": {
            "type": "integer",
            "description": "Gets or sets deposit transaction id.",
            "format": "int32"
          },
          "paymentId": {
            "type": "integer",
            "description": "Gets or sets payment id.",
            "format": "int32"
          },
          "shiftId": {
            "type": "integer",
            "description": "Gets or sets shift id.",
            "format": "int32",
            "nullable": true
          },
          "registerId": {
            "type": "integer",
            "description": "Gets or sets register id.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Deposit payment entity."
      },
      "DepositTransaction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Gets or sets primary id.",
            "format": "int32"
          },
          "createdById": {
            "type": "integer",
            "description": "Gets or sets created by id.",
            "format": "int32",
            "nullable": true
          },
          "createdTime": {
            "type": "string",
            "description": "Gets or sets created time.",
            "format": "date-time"
          },
          "modifiedById": {
            "type": "integer",
            "description": "Gets or sets modified by id.",
            "format": "int32",
            "nullable": true
          },
          "modifiedTime": {
            "type": "string",
            "description": "Gets or sets last modified time.",
            "format": "date-time",
            "nullable": true
          },
          "userId": {
            "type": "integer",
            "description": "Gets or sets user id.",
            "format": "int32"
          },
          "type": {
            "$ref": "#/components/schemas/DepositTransactionType"
          },
          "amount": {
            "type": "number",
            "description": "Gets or sets transaction amount.",
            "format": "double"
          },
          "balance": {
            "type": "number",
            "description": "Gets or sets balance.",
            "format": "double"
          },
          "isVoided": {
            "type": "boolean",
            "description": "Gets or sets if voided."
          },
          "shiftId": {
            "type": "integer",
            "description": "Gets or sets shift id.",
            "format": "int32",
            "nullable": true
          },
          "registerId": {
            "type": "integer",
            "description": "Gets or sets register id.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Deposit transaction entity."
      },
      "DepositTransactionType": {
        "enum": [
          0,
          1,
          2,
          3
        ],
        "type": "integer",
        "description": "Deposit transaction types.",
        "format": "int32"
      },
      "ExecutableExecutionInfoDTO": {
        "type": "object",
        "properties": {
          "applicationId": {
            "type": "integer",
            "description": "The Id of the application on which the executable belongs.",
            "format": "int32"
          },
          "applicationName": {
            "type": "string",
            "description": "The name of the application on which the executable belongs.",
            "nullable": true
          },
          "executableId": {
            "type": "integer",
            "description": "Executable Id.",
            "format": "int32"
          },
          "executableName": {
            "type": "string",
            "description": "Executable name.",
            "nullable": true
          },
          "totalSeconds": {
            "type": "number",
            "description": "Total seconds the executable was running.",
            "format": "double"
          },
          "totalTime": {
            "type": "string",
            "description": "Total time the executable was running as text.",
            "nullable": true
          },
          "executions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExecutableExecutionInfoDTO"
            },
            "description": "List of executable runs.",
            "nullable": true
          },
          "uniqueUsers": {
            "type": "integer",
            "description": "The number of unique users who ran the executable.",
            "format": "int32"
          },
          "uniqueSessions": {
            "type": "integer",
            "description": "The number of unique session in which the executable ran.",
            "format": "int32"
          },
          "totalExecutions": {
            "type": "integer",
            "description": "Total number of runs.",
            "format": "int32"
          },
          "averageDailyExecutionTime": {
            "type": "string",
            "description": "Average daily run time.",
            "nullable": true
          },
          "userId": {
            "type": "integer",
            "description": "The Id of the user that ran the executable.",
            "format": "int32"
          },
          "userGroupId": {
            "type": "integer",
            "description": "The Id of the user group to which the user belongs.",
            "format": "int32"
          },
          "hostId": {
            "type": "integer",
            "description": "The Id of the host on which the executable ran.",
            "format": "int32"
          },
          "hostGroupId": {
            "type": "integer",
            "description": "The Id of the host group to which the host belongs.",
            "format": "int32",
            "nullable": true
          },
          "startTime": {
            "type": "string",
            "description": "The time the executable started.",
            "format": "date-time"
          },
          "endTime": {
            "type": "string",
            "description": "The time the executable ended.",
            "format": "date-time"
          },
          "span": {
            "type": "number",
            "description": "The duration of the executable run in seconds.",
            "format": "double"
          },
          "isGuest": {
            "type": "boolean",
            "description": "The user that ran the application is guest."
          },
          "userSession": {
            "$ref": "#/components/schemas/UserSessionDTO"
          }
        },
        "additionalProperties": false,
        "description": "Executable Execution Information."
      },
      "ExecutableExecutionSummaryDTO": {
        "type": "object",
        "properties": {
          "executableId": {
            "type": "integer",
            "description": "Executable Id.",
            "format": "int32"
          },
          "executableName": {
            "type": "string",
            "description": "Executable name.",
            "nullable": true
          },
          "uniqueUsers": {
            "type": "integer",
            "description": "The number of unique users who ran the executable.",
            "format": "int32"
          },
          "totalExecutions": {
            "type": "integer",
            "description": "Total number of runs.",
            "format": "int32"
          },
          "totalSeconds": {
            "type": "number",
            "description": "Total seconds the executable was running.",
            "format": "double"
          },
          "totalTime": {
            "type": "string",
            "description": "Total time the executable was running as text.",
            "nullable": true
          },
          "averageDailyExecutionTime": {
            "type": "string",
            "description": "Average daily run time.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Executable Execution Summary."
      },
      "ExecutableInfoDTO": {
        "type": "object",
        "properties": {
          "applicationId": {
            "type": "integer",
            "description": "The Id of the application on which the executable belongs.",
            "format": "int32"
          },
          "applicationName": {
            "type": "string",
            "description": "The name of the application on which the executable belongs.",
            "nullable": true
          },
          "executableId": {
            "type": "integer",
            "description": "Executable Id.",
            "format": "int32"
          },
          "executableName": {
            "type": "string",
            "description": "Executable name.",
            "nullable": true
          },
          "totalSeconds": {
            "type": "number",
            "description": "Total seconds the executable was running.",
            "format": "double"
          },
          "totalTime": {
            "type": "string",
            "description": "Total time the executable was running as text.",
            "nullable": true
          },
          "executions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExecutableExecutionInfoDTO"
            },
            "description": "List of executable runs.",
            "nullable": true
          },
          "uniqueUsers": {
            "type": "integer",
            "description": "The number of unique users who ran the executable.",
            "format": "int32"
          },
          "uniqueSessions": {
            "type": "integer",
            "description": "The number of unique session in which the executable ran.",
            "format": "int32"
          },
          "totalExecutions": {
            "type": "integer",
            "description": "Total number of runs.",
            "format": "int32"
          },
          "averageDailyExecutionTime": {
            "type": "string",
            "description": "Average daily run time.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Executable Information."
      },
      "ExpireAfterType": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "description": "Expire after types.",
        "format": "int32"
      },
      "ExpireFromOptionType": {
        "enum": [
          0,
          1
        ],
        "type": "integer",
        "description": "Expire from options.",
        "format": "int32"
      },
      "FinancialConfig": {
        "type": "object",
        "properties": {
          "businessVatId": {
            "type": "string",
            "description": "Gets or sets business vat id.",
            "nullable": true
          },
          "timeSaleVAT": {
            "maximum": 100,
            "minimum": 0,
            "type": "number",
            "description": "Gets or sets time sale vat.",
            "format": "double"
          },
          "globalTaxSystem": {
            "$ref": "#/components/schemas/GlobalTaxSystems"
          },
          "productsTaxSystemType": {
            "type": "integer",
            "description": "Gets or sets products tax system type.",
            "format": "int32",
            "default": 0
          },
          "servicesTaxSystemType": {
            "type": "integer",
            "description": "Gets or sets services tax system type.",
            "format": "int32",
            "default": 0
          },
          "treatDepositsAsService": {
            "type": "boolean",
            "description": "Gets or sets if deposits should be treated as service sale.",
            "default": false
          },
          "depositServiceName": {
            "type": "string",
            "description": "Gets or sets deposit service name.",
            "nullable": true
          },
          "enableFiscalPrinter": {
            "type": "boolean",
            "description": "Gets or sets if fiscal printing is enabled.",
            "default": false
          }
        },
        "additionalProperties": false,
        "description": "Global financial configuration."
      },
      "FinancialReportDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Report Name.",
            "nullable": true
          },
          "dateFrom": {
            "type": "string",
            "description": "Filtered Date From.",
            "format": "date-time"
          },
          "dateTo": {
            "type": "string",
            "description": "Filtered Date To.",
            "format": "date-time"
          },
          "companyName": {
            "type": "string",
            "description": "Company Name.",
            "nullable": true
          },
          "reportType": {
            "$ref": "#/components/schemas/ReportTypes"
          },
          "operatorId": {
            "type": "integer",
            "description": "Filtered Operator Id.",
            "format": "int32",
            "nullable": true
          },
          "operatorName": {
            "type": "string",
            "description": "Filtered Operator Name.",
            "nullable": true
          },
          "registerId": {
            "type": "integer",
            "description": "Filtered Register Id.",
            "format": "int32",
            "nullable": true
          },
          "registerName": {
            "type": "string",
            "description": "Filtered Register Name.",
            "nullable": true
          },
          "financialReportType": {
            "$ref": "#/components/schemas/FinancialReportTypes"
          },
          "deposits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountTransactionDTO"
            },
            "description": "List of deposit operations performed during the reporting period.",
            "nullable": true
          },
          "withdrawals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountTransactionDTO"
            },
            "description": "List of withdrawal operations performed during the reporting period.",
            "nullable": true
          },
          "depositVoids": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountTransactionDTO"
            },
            "description": "List of deposit void operations performed during the reporting period.",
            "nullable": true
          },
          "groupInvoices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FinancialReportUserGroupInvoicesDTO"
            },
            "description": "List of invoices grouped based on financial report type.",
            "nullable": true
          },
          "groupVoidInvoices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FinancialReportUserGroupInvoicesDTO"
            },
            "description": "List of voided invoices grouped based on financial report type.",
            "nullable": true
          },
          "depositsSummary": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FinancialSummaryRecordDTO"
            },
            "description": "Summary of deposits grouped by payment method.",
            "nullable": true
          },
          "salesSummary": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FinancialSummaryRecordDTO"
            },
            "description": "Summary of sales grouped by payment method.",
            "nullable": true
          },
          "voidInvoicesPaidCash": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FinancialSummaryRecordDTO"
            },
            "description": "Summary of voids grouped by refund method.",
            "nullable": true
          },
          "voidInvoicesNoRefundOrUnpaid": {
            "$ref": "#/components/schemas/FinancialSummaryRecordDTO"
          },
          "pastSalesPaymentsSummary": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FinancialSummaryRecordDTO"
            },
            "description": "Summary of past sales paid within the reporting period grouped by payment method.",
            "nullable": true
          },
          "paymentMethods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ListItemDTO"
            },
            "description": "List of available payment methods.",
            "nullable": true
          },
          "registerTransactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RegisterTransactionDTO"
            },
            "description": "List of register transactions performed during the reporting period.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Financial Report."
      },
      "FinancialReportTypes": {
        "enum": [
          1,
          2,
          3
        ],
        "type": "integer",
        "description": "Specifies the type of the financial report.",
        "format": "int32"
      },
      "FinancialReportUserGroupInvoicesDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Group name.",
            "nullable": true
          },
          "fixedTimeProductsSold": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SoldProductDTO"
            },
            "description": "List of fixed time sold.",
            "nullable": true
          },
          "sessionTimeProductsSold": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SoldProductDTO"
            },
            "description": "List of session time sold.",
            "nullable": true
          },
          "timeOffersSold": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SoldProductDTO"
            },
            "description": "List of time offers sold.",
            "nullable": true
          },
          "productsSold": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SoldProductDTO"
            },
            "description": "List of products sold.",
            "nullable": true
          },
          "bundlesSold": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SoldProductDTO"
            },
            "description": "List of bundles sold.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Financial report information about sales or voids for a single group."
      },
      "FinancialSummaryRecordDTO": {
        "type": "object",
        "properties": {
          "paymentMethodId": {
            "type": "integer",
            "description": "Payment method Id.",
            "format": "int32"
          },
          "paymentMethodName": {
            "type": "string",
            "description": "Payment method name.",
            "nullable": true
          },
          "quantity": {
            "type": "integer",
            "description": "Number of items within the record.",
            "format": "int32"
          },
          "value": {
            "type": "number",
            "description": "Value of items within the record.",
            "format": "double"
          },
          "invoiceIsVoided": {
            "type": "boolean",
            "description": "Record refers to a voided invoice."
          }
        },
        "additionalProperties": false,
        "description": "Financial Summary Record."
      },
      "FreeSpaceAllocations": {
        "enum": [
          0,
          5,
          10,
          15,
          20,
          25,
          30
        ],
        "type": "integer",
        "description": "Free space allocations.",
        "format": "int32"
      },
      "GlobalConfiguration": {
        "type": "object",
        "properties": {
          "network": {
            "$ref": "#/components/schemas/GlobalNetworkCfg"
          },
          "subscription": {
            "$ref": "#/components/schemas/GlobalSubscriptionConfig"
          },
          "financial": {
            "$ref": "#/components/schemas/FinancialConfig"
          },
          "waitingLine": {
            "$ref": "#/components/schemas/WaitingLineConfig"
          },
          "reservation": {
            "$ref": "#/components/schemas/ReservationConfig"
          },
          "paymentProviders": {
            "$ref": "#/components/schemas/PaymentProvidersConfig"
          }
        },
        "additionalProperties": false,
        "description": "Global configuration class."
      },
      "GlobalNetworkCfg": {
        "type": "object",
        "properties": {
          "enableKeepAlive": {
            "type": "boolean",
            "description": "Enables or Disables keep alive.",
            "default": true
          },
          "keepAliveTimeout": {
            "type": "integer",
            "description": "Gets or sets kepp alive timeout value.",
            "format": "int64",
            "default": 1000
          },
          "keepAlivePeriod": {
            "type": "integer",
            "description": "Gets or Sets keep alive period time.",
            "format": "int64",
            "default": 1000
          }
        },
        "additionalProperties": false,
        "description": "Global network configuration class."
      },
      "GlobalSubscriptionConfig": {
        "type": "object",
        "properties": {
          "subscriptionUsername": {
            "type": "string",
            "description": "Gets or sets license username.",
            "default": null,
            "nullable": true
          },
          "subscriptionPassword": {
            "type": "string",
            "description": "Gets or sets license password.",
            "default": null,
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Global subcscription configuration class."
      },
      "GlobalTaxSystems": {
        "enum": [
          0,
          1
        ],
        "type": "integer",
        "description": "Global tax system codes.",
        "format": "int32"
      },
      "GroupOverrides": {
        "enum": [
          0,
          1,
          2,
          4
        ],
        "type": "integer",
        "description": "Computer group configuration overrides.",
        "format": "int32"
      },
      "GroupProductSoldDTO": {
        "type": "object",
        "properties": {
          "sold": {
            "type": "number",
            "description": "The number of items sold of the product.",
            "format": "double"
          },
          "returned": {
            "type": "number",
            "description": "The number of items returned of the product.",
            "format": "double"
          },
          "value": {
            "type": "number",
            "description": "The cost of the product.",
            "format": "double"
          },
          "pointsValue": {
            "type": "integer",
            "description": "The cost in points of the product.",
            "format": "int32"
          },
          "pointsAward": {
            "type": "integer",
            "description": "The points award of the product.",
            "format": "int32"
          },
          "tax": {
            "type": "number",
            "description": "The tax amount of the product.",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Sold Product Information."
      },
      "GroupSessionsEstimationDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Group name.",
            "nullable": true
          },
          "duration": {
            "type": "string",
            "description": "The time the session was running as text.",
            "nullable": true
          },
          "totalMinutes": {
            "type": "number",
            "description": "Duration of the user session in minutes.",
            "format": "double"
          },
          "hoursPercentage": {
            "type": "number",
            "description": "Hours used percentage in comparison with other groups within the same period.",
            "format": "double"
          },
          "quantity": {
            "type": "number",
            "description": "Packet minutes.",
            "format": "double"
          },
          "value": {
            "type": "number",
            "description": "Packet cost.",
            "format": "double"
          },
          "estimatedRevenuePercentage": {
            "type": "number",
            "description": "Estimated revenue percentage in comparison with other groups within the same period.",
            "format": "double"
          },
          "subGroupSessionsEstimations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupSessionsEstimationDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Group Sessions Estimation."
      },
      "GroupedProductSalesDTO": {
        "type": "object",
        "properties": {
          "sold": {
            "type": "number",
            "description": "The number of items sold of the product.",
            "format": "double"
          },
          "returned": {
            "type": "number",
            "description": "The number of items returned of the product.",
            "format": "double"
          },
          "value": {
            "type": "number",
            "description": "The cost of the product.",
            "format": "double"
          },
          "pointsValue": {
            "type": "integer",
            "description": "The cost in points of the product.",
            "format": "int32"
          },
          "pointsAward": {
            "type": "integer",
            "description": "The points award of the product.",
            "format": "int32"
          },
          "tax": {
            "type": "number",
            "description": "The tax amount of the product.",
            "format": "double"
          },
          "id": {
            "type": "integer",
            "description": "Product Id.",
            "format": "int32"
          },
          "productName": {
            "type": "string",
            "description": "Product name.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Sold Product Information."
      },
      "Host": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Gets or sets primary id.",
            "format": "int32"
          },
          "createdById": {
            "type": "integer",
            "description": "Gets or sets created by id.",
            "format": "int32",
            "nullable": true
          },
          "createdTime": {
            "type": "string",
            "description": "Gets or sets created time.",
            "format": "date-time"
          },
          "modifiedById": {
            "type": "integer",
            "description": "Gets or sets modified by id.",
            "format": "int32",
            "nullable": true
          },
          "modifiedTime": {
            "type": "string",
            "description": "Gets or sets last modified time.",
            "format": "date-time",
            "nullable": true
          },
          "number": {
            "type": "integer",
            "description": "Gets or sets host number.",
            "format": "int32"
          },
          "name": {
            "maxLength": 45,
            "minLength": 0,
            "type": "string",
            "description": "Gets or sets host name."
          },
          "hostGroupId": {
            "type": "integer",
            "description": "Gets or sets host group.",
            "format": "int32",
            "nullable": true
          },
          "state": {
            "$ref": "#/components/schemas/HostState"
          },
          "iconId": {
            "type": "integer",
            "description": "Gets or sets icon id.",
            "format": "int32",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Gets or sets if host is deleted."
          }
        },
        "additionalProperties": false,
        "description": "Host entity."
      },
      "HostComputer": {
        "required": [
          "hostname",
          "macAddress",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Gets or sets primary id.",
            "format": "int32"
          },
          "createdById": {
            "type": "integer",
            "description": "Gets or sets created by id.",
            "format": "int32",
            "nullable": true
          },
          "createdTime": {
            "type": "string",
            "description": "Gets or sets created time.",
            "format": "date-time"
          },
          "modifiedById": {
            "type": "integer",
            "description": "Gets or sets modified by id.",
            "format": "int32",
            "nullable": true
          },
          "modifiedTime": {
            "type": "string",
            "description": "Gets or sets last modified time.",
            "format": "date-time",
            "nullable": true
          },
          "number": {
            "type": "integer",
            "description": "Gets or sets host number.",
            "format": "int32"
          },
          "name": {
            "maxLength": 45,
            "minLength": 0,
            "type": "string",
            "description": "Gets or sets host name."
          },
          "hostGroupId": {
            "type": "integer",
            "description": "Gets or sets host group.",
            "format": "int32",
            "nullable": true
          },
          "state": {
            "$ref": "#/components/schemas/HostState"
          },
          "iconId": {
            "type": "integer",
            "description": "Gets or sets icon id.",
            "format": "int32",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Gets or sets if host is deleted."
          },
          "hostname": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Gets or sets hostname."
          },
          "macAddress": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Gets or sets mac address."
          }
        },
        "additionalProperties": false,
        "description": "Host computer entity."
      },
      "HostGroup": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Gets or sets primary id.",
            "format": "int32"
          },
          "createdById": {
            "type": "integer",
            "description": "Gets or sets created by id.",
            "format": "int32",
            "nullable": true
          },
          "createdTime": {
            "type": "string",
            "description": "Gets or sets created time.",
            "format": "date-time"
          },
          "modifiedById": {
            "type": "integer",
            "description": "Gets or sets modified by id.",
            "format": "int32",
            "nullable": true
          },
          "modifiedTime": {
            "type": "string",
            "description": "Gets or sets last modified time.",
            "format": "date-time",
            "nullable": true
          },
          "name": {
            "maxLength": 45,
            "minLength": 0,
            "type": "string",
            "description": "Gets or sets name."
          },
          "skinName": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Gets or sets skin name.",
            "nullable": true
          },
          "options": {
            "$ref": "#/components/schemas/HostGroupOptionType"
          },
          "appGroupId": {
            "type": "integer",
            "description": "Gets or sets app profile id.",
            "format": "int32",
            "nullable": true
          },
          "securityProfileId": {
            "type": "integer",
            "description": "Gets or sets security profile id.",
            "format": "int32",
            "nullable": true
          },
          "defaultGuestGroupId": {
            "type": "integer",
            "description": "Gets or sets default guest group id.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Host group entity."
      },
      "HostGroupInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Host group id.",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Host group name.",
            "nullable": true
          },
          "skinName": {
            "type": "string",
            "description": "Skin name.",
            "default": null,
            "nullable": true
          },
          "options": {
            "$ref": "#/components/schemas/HostGroupOptionType"
          },
          "appGroupId": {
            "type": "integer",
            "description": "App group id.",
            "format": "int32",
            "default": null,
            "nullable": true
          },
          "securityProfileId": {
            "type": "integer",
            "description": "Security profile id.",
            "format": "int32",
            "default": null,
            "nullable": true
          },
          "defaultGuestGroupId": {
            "type": "integer",
            "description": "Default guest group id.",
            "format": "int32",
            "default": null,
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Host group info."
      },
      "HostGroupOptionType": {
        "enum": [
          0
        ],
        "type": "integer",
        "description": "Host group options.",
        "format": "int32"
      },
      "HostGroupUsageInfoDTO": {
        "type": "object",
        "properties": {
          "hostGroupId": {
            "type": "integer",
            "description": "Host group Id.",
            "format": "int32"
          },
          "hostGroupName": {
            "type": "string",
            "description": "Host group name.",
            "nullable": true
          },
          "totalMinutesUsed": {
            "type": "integer",
            "description": "Total minutes the hosts of the group were used within the reporting period.",
            "format": "int64"
          },
          "totalHoursUsed": {
            "type": "string",
            "description": "Total hours the hosts of the group were used within the reporting period.",
            "nullable": true
          },
          "totalMinutes": {
            "type": "integer",
            "description": "Period total minutes multiplied by the number of available hosts.",
            "format": "int64"
          },
          "totalEstimatedRevenue": {
            "type": "number",
            "description": "Total estimated revenue within the reporting period.",
            "format": "double"
          },
          "utilizationPercentage": {
            "type": "number",
            "description": "Utilization percentage.",
            "format": "double"
          },
          "groupSessionsEstimations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupSessionsEstimationDTO"
            },
            "description": "List of records for the estimated value per host group.",
            "nullable": true
          },
          "utilizationChart": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PeriodUtilizationChartRecordDTO"
            },
            "description": "List of records for the utilization charts.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Host Group Usage Information."
      },
      "HostState": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "description": "Host state.",
        "format": "int32"
      },
      "HostUsageReportDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Report Name.",
            "nullable": true
          },
          "dateFrom": {
            "type": "string",
            "description": "Filtered Date From.",
            "format": "date-time"
          },
          "dateTo": {
            "type": "string",
            "description": "Filtered Date To.",
            "format": "date-time"
          },
          "companyName": {
            "type": "string",
            "description": "Company Name.",
            "nullable": true
          },
          "reportType": {
            "$ref": "#/components/schemas/ReportTypes"
          },
          "hostGroupId": {
            "type": "integer",
            "description": "Filtered Host Group Id.",
            "format": "int32",
            "nullable": true
          },
          "hostGroupName": {
            "type": "string",
            "description": "Filtered Host Group Name.",
            "nullable": true
          },
          "hostUsageReportType": {
            "$ref": "#/components/schemas/HostUsageReportTypes"
          },
          "hostGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HostGroupUsageInfoDTO"
            },
            "description": "Usage information grouped by host group.",
            "nullable": true
          },
          "totalHoursUsed": {
            "type": "string",
            "description": "Total hours the hosts were used within the reporting period.",
            "nullable": true
          },
          "totalEstimatedRevenue": {
            "type": "number",
            "description": "Total estimated revenue within the reporting period.",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Host Usage Report."
      },
      "HostUsageReportTypes": {
        "enum": [
          1,
          2,
          3
        ],
        "type": "integer",
        "description": "Specifies the type of the host usage report.",
        "format": "int32"
      },
      "IApplicationModule": {
        "type": "object",
        "properties": {
          "fileName": {
            "type": "string",
            "description": "Gets file name.",
            "nullable": true
          },
          "moduleType": {
            "$ref": "#/components/schemas/ModuleEnum"
          },
          "moduleVersion": {
            "type": "string",
            "description": "Gets module version.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Application module implementation interface."
      },
      "ICoreProcess": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Gets the unique process id.",
            "format": "int32",
            "readOnly": true
          },
          "processName": {
            "type": "string",
            "description": "Gets the process name.",
            "nullable": true,
            "readOnly": true
          },
          "processExeName": {
            "type": "string",
            "description": "Gets proccess executable name.",
            "nullable": true,
            "readOnly": true
          },
          "parentId": {
            "type": "integer",
            "description": "Gets the parent id of the process.",
            "format": "int32",
            "readOnly": true
          },
          "basePriority": {
            "type": "integer",
            "description": "Gets the base priority of the process.",
            "format": "int32",
            "readOnly": true
          },
          "sessionId": {
            "type": "integer",
            "description": "Gets the session id of the process.",
            "format": "int32",
            "readOnly": true
          },
          "exitCode": {
            "type": "integer",
            "description": "Gets the exit code of the process.",
            "format": "int32",
            "readOnly": true
          },
          "mainModule": {
            "$ref": "#/components/schemas/ICoreProcessModule"
          },
          "startInfo": {
            "$ref": "#/components/schemas/ICoreProcessStartInfo"
          },
          "startTime": {
            "type": "string",
            "description": "Gets the start time of the process.\r\n<remarks>If information cant be obtained or uanavailable MinDate returned.</remarks>",
            "format": "date-time",
            "readOnly": true
          },
          "exitTime": {
            "type": "string",
            "description": "Gets the exit time of the process.\r\n<remarks>If information cant be obtained or uanavailable MinDate returned.</remarks>",
            "format": "date-time",
            "readOnly": true
          },
          "cpuUsage": {
            "type": "integer",
            "description": "Gets the cpu usage of process.",
            "format": "int32",
            "readOnly": true
          },
          "totalProcessorTime": {
            "$ref": "#/components/schemas/TimeSpan"
          },
          "userProcessorTime": {
            "$ref": "#/components/schemas/TimeSpan"
          },
          "currentDirectory": {
            "type": "string",
            "description": "Gets the current directory of process.",
            "nullable": true,
            "readOnly": true
          },
          "commandLine": {
            "type": "string",
            "description": "Gets the process command line.",
            "nullable": true,
            "readOnly": true
          },
          "isAccessible": {
            "type": "boolean",
            "description": "Checks if Process handle can be obtained in current thread context.",
            "readOnly": true
          },
          "hookExited": {
            "type": "boolean",
            "description": "Gets or sets if process exit event should be hooked."
          },
          "hasExited": {
            "type": "boolean",
            "description": "Gets if the process has exited.",
            "readOnly": true
          },
          "processorCount": {
            "type": "integer",
            "description": "Gets processor count.",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "Core process interface."
      },
      "ICoreProcessModule": {
        "type": "object",
        "properties": {
          "companyName": {
            "type": "string",
            "description": "Gets company name.",
            "nullable": true,
            "readOnly": true
          },
          "description": {
            "type": "string",
            "description": "Gets description.",
            "nullable": true,
            "readOnly": true
          },
          "moduleName": {
            "type": "string",
            "description": "Gets module name.",
            "nullable": true,
            "readOnly": true
          },
          "fileName": {
            "type": "string",
            "description": "Gets file name.",
            "nullable": true,
            "readOnly": true
          },
          "fileVersion": {
            "type": "string",
            "description": "Gets file version.",
            "nullable": true,
            "readOnly": true
          },
          "iconData": {
            "type": "string",
            "description": "Gets icon data.",
            "format": "byte",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "Core process module interface."
      },
      "ICoreProcessStartInfo": {
        "type": "object",
        "properties": {
          "arguments": {
            "type": "string",
            "description": "Gets or sets process creation arguments.",
            "nullable": true
          },
          "createNoWindow": {
            "type": "boolean",
            "description": "Gets or sets if no process window should be created."
          },
          "fileName": {
            "type": "string",
            "description": "Gets or sets file name.",
            "nullable": true
          },
          "password": {
            "type": "string",
            "description": "Gets or sets password.",
            "nullable": true
          },
          "username": {
            "type": "string",
            "description": "Gets or sets username.",
            "nullable": true
          },
          "waitForTermination": {
            "type": "boolean",
            "description": "Gets or sets if we should wait for process termination."
          },
          "waitTimeout": {
            "type": "integer",
            "description": "Gets or sets process termination wait timeout.",
            "format": "int32"
          },
          "workingDirectory": {
            "type": "string",
            "description": "Gets or sets working directory of created process.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Core process start info interface."
      },
      "ISystemStatus": {
        "type": "object",
        "properties": {
          "cpuLevel": {
            "type": "integer",
            "description": "Gets CPU level.",
            "format": "int32"
          },
          "processUpTime": {
            "$ref": "#/components/schemas/TimeSpan"
          },
          "systemUpTime": {
            "$ref": "#/components/schemas/TimeSpan"
          },
          "totalThreads": {
            "type": "integer",
            "description": "Gets total process threads.",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "System status implementation interface."
      },
      "Invoice": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Gets or sets primary id.",
            "format": "int32"
          },
          "createdById": {
            "type": "integer",
            "description": "Gets or sets created by id.",
            "format": "int32",
            "nullable": true
          },
          "createdTime": {
            "type": "string",
            "description": "Gets or sets created time.",
            "format": "date-time"
          },
          "modifiedById": {
            "type": "integer",
            "description": "Gets or sets modified by id.",
            "format": "int32",
            "nullable": true
          },
          "modifiedTime": {
            "type": "string",
            "description": "Gets or sets last modified time.",
            "format": "date-time",
            "nullable": true
          },
          "userId": {
            "type": "integer",
            "description": "Gets or sets user id.",
            "format": "int32"
          },
          "productOrderId": {
            "type": "integer",
            "description": "Gets or sets product order id.",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/InvoiceStatus"
          },
          "subTotal": {
            "type": "number",
            "description": "Gets or sets invoice sub total amount.",
            "format": "double"
          },
          "pointsTotal": {
            "type": "integer",
            "description": "Gets or sets total amount of points.",
            "format": "int32"
          },
          "taxTotal": {
            "type": "number",
            "description": "Gets or sets invoice total amount of tax.",
            "format": "double"
          },
          "total": {
            "type": "number",
            "description": "Gets or sets total amount.",
            "format": "double"
          },
          "outstanding": {
            "type": "number",
            "description": "Gets or sets outstanding amount.",
            "format": "double"
          },
          "outstandngPoints": {
            "type": "integer",
            "description": "Gets or sets outstanding points.",
            "format": "int32"
          },
          "shiftId": {
            "type": "integer",
            "description": "Gets or sets shift id.",
            "format": "int32",
            "nullable": true
          },
          "registerId": {
            "type": "integer",
            "description": "Gets or sets register id.",
            "format": "int32",
            "nullable": true
          },
          "isVoided": {
            "type": "boolean",
            "description": "Gets or sets if invoice is voided."
          },
          "invoicePayments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvoicePayment"
            },
            "description": "Gets payments maid against this invoice.",
            "nullable": true
          },
          "invoiceLines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvoiceLine"
            },
            "description": "Gets invoice lines.",
            "nullable": true
          },
          "voids": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VoidInvoice"
            },
            "description": "Gets voids.",
            "nullable": true
          },
          "productOrder": {
            "$ref": "#/components/schemas/ProductOrder"
          }
        },
        "additionalProperties": false,
        "description": "Invoice entity."
      },
      "InvoiceDTO": {
        "type": "object",
        "properties": {
          "invoiceId": {
            "type": "integer",
            "description": "Invoice Id.",
            "format": "int32"
          },
          "createdTime": {
            "type": "string",
            "description": "The creation time of the invoice.",
            "format": "date-time"
          },
          "operatorId": {
            "type": "integer",
            "description": "The Id of the operator that created the invoice.",
            "format": "int32",
            "nullable": true
          },
          "operatorName": {
            "type": "string",
            "description": "The name of the operator that created the invoice.",
            "nullable": true
          },
          "registerId": {
            "type": "integer",
            "description": "The Id of the register on which the invoice was created.",
            "format": "int32",
            "nullable": true
          },
          "registerName": {
            "type": "string",
            "description": "The name of the register on which the invoice was created.",
            "nullable": true
          },
          "userId": {
            "type": "integer",
            "description": "The Id of the customer for whom the invoice was created.",
            "format": "int32",
            "nullable": true
          },
          "userName": {
            "type": "string",
            "description": "The name of the customer for whom the invoice was created.",
            "nullable": true
          },
          "userGroupId": {
            "type": "integer",
            "description": "The Id of the user group the customer belongs to.",
            "format": "int32",
            "nullable": true
          },
          "orderSource": {
            "type": "string",
            "description": "Order source name.",
            "nullable": true
          },
          "quantity": {
            "type": "integer",
            "description": "The number of items in the invoice.",
            "format": "int32"
          },
          "tax": {
            "type": "number",
            "description": "The tax amount of the invoice.",
            "format": "double"
          },
          "value": {
            "type": "number",
            "description": "The value of the invoice.",
            "format": "double"
          },
          "pointsValue": {
            "type": "number",
            "description": "The value in points of the invoice.",
            "format": "double"
          },
          "pointsAward": {
            "type": "integer",
            "description": "The points award of the invoice.",
            "format": "int32"
          },
          "outstanding": {
            "type": "number",
            "description": "Outstanding amount of the invoice.",
            "format": "double"
          },
          "isVoided": {
            "type": "boolean",
            "description": "The invoice is voided."
          },
          "refundedAmount": {
            "type": "number",
            "description": "Refunded amount of the invoice.",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Invoice Information."
      },
      "InvoiceInfo": {
        "type": "object",
        "properties": {
          "createdById": {
            "type": "integer",
            "description": "Created by user id.",
            "format": "int32",
            "nullable": true
          },
          "createdByUsername": {
            "type": "string",
            "description": "Created by username. This value is optionally included.",
            "nullable": true
          },
          "createdTime": {
            "type": "string",
            "description": "Resource creation time.",
            "format": "date-time"
          },
          "modifiedById": {
            "type": "integer",
            "description": "Modified by user id.",
            "format": "int32",
            "nullable": true
          },
          "modifiedByUsername": {
            "type": "string",
            "description": "Modified by username. This value is optionally included.",
            "nullable": true
          },
          "modifiedTime": {
            "type": "string",
            "description": "Resource last modification time.",
            "format": "date-time",
            "nullable": true
          },
          "productOrderId": {
            "type": "integer",
            "description": "Product order id.",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/InvoiceStatus"
          },
          "subTotal": {
            "type": "number",
            "description": "Sub total amount.",
            "format": "double"
          },
          "pointsTotal": {
            "type": "integer",
            "description": "Total amount of points.",
            "format": "int32"
          },
          "taxTotal": {
            "type": "number",
            "description": "Total amount of tax.",
            "format": "double"
          },
          "total": {
            "type": "number",
            "description": "Total amount.",
            "format": "double"
          },
          "outstanding": {
            "type": "number",
            "description": "Outstanding amount.",
            "format": "double"
          },
          "outstandngPoints": {
            "type": "integer",
            "description": "Outstanding points.",
            "format": "int32"
          },
          "shiftId": {
            "type": "integer",
            "description": "Shift id.",
            "format": "int32",
            "nullable": true
          },
          "registerId": {
            "type": "integer",
            "description": "Register id.",
            "format": "int32",
            "nullable": true
          },
          "isVoided": {
            "type": "boolean",
            "description": "Indicates if invoice is voided."
          }
        },
        "additionalProperties": false,
        "description": "Invoice info model."
      },
      "InvoiceLine": {
        "required": [
          "productName"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Gets or sets primary id.",
            "format": "int32"
          },
          "createdById": {
            "type": "integer",
            "description": "Gets or sets created by id.",
            "format": "int32",
            "nullable": true
          },
          "createdTime": {
            "type": "string",
            "description": "Gets or sets created time.",
            "format": "date-time"
          },
          "modifiedById": {
            "type": "integer",
            "description": "Gets or sets modified by id.",
            "format": "int32",
            "nullable": true
          },
          "modifiedTime": {
            "type": "string",
            "description": "Gets or sets last modified time.",
            "format": "date-time",
            "nullable": true
          },
          "userId": {
            "type": "integer",
            "description": "Gets or sets user id.",
            "format": "int32"
          },
          "invoiceId": {
            "type": "integer",
            "description": "Gets or sets invoice id.",
            "format": "int32"
          },
          "productName": {
            "maxLength": 45,
            "minLength": 0,
            "type": "string",
            "description": "Gets or sets product name."
          },
          "quantity": {
            "type": "number",
            "description": "Gets or sets quantity.",
            "format": "double"
          },
          "unitPrice": {
            "type": "number",
            "description": "Gets or sets unit price.",
            "format": "double"
          },
          "unitListPrice": {
            "type": "number",
            "description": "Gets or sets unit list price.",
            "format": "double"
          },
          "total": {
            "type": "number",
            "description": "Gets or set total price.",
            "format": "double"
          },
          "pointsTotal": {
            "type": "integer",
            "description": "Gets or sets total points price.",
            "format": "int32"
          },
          "points": {
            "type": "integer",
            "description": "Gets or sets product points.",
            "format": "int32",
            "nullable": true
          },
          "pointsAward": {
            "type": "integer",
            "description": "Gets or sets points award for the invoice line.",
            "format": "int32"
          },
          "taxRate": {
            "type": "number",
            "description": "Gets or sets tax rate.",
            "format": "double"
          },
          "taxTotal": {
            "type": "number",
            "description": "Gets or sets total amount of tax.",
            "format": "double"
          },
          "preTaxTotal": {
            "type": "number",
            "description": "Gets or sets total pre taxed price.",
            "format": "double"
          },
          "pointsTransactionId": {
            "type": "integer",
            "description": "Gets or sets points transaction id.",
            "format": "int32",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Gets or sets if line is deleted."
          },
          "isVoided": {
            "type": "boolean",
            "description": "Gets or sets if line is voided."
          },
          "shiftId": {
            "type": "integer",
            "description": "Gets or sets shift id.",
            "format": "int32",
            "nullable": true
          },
          "registerId": {
            "type": "integer",
            "description": "Gets or sets register id.",
            "format": "int32",
            "nullable": true
          },
          "unitPointsPrice": {
            "type": "integer",
            "description": "Gets or sets points unit price.",
            "format": "int32"
          },
          "unitPointsListPrice": {
            "type": "integer",
            "description": "Gets or sets unit list price.",
            "format": "int32",
            "nullable": true
          },
          "payType": {
            "$ref": "#/components/schemas/OrderLinePayType"
          },
          "unitCost": {
            "type": "number",
            "description": "Gets or sets unit cost.",
            "format": "double",
            "nullable": true
          },
          "cost": {
            "type": "number",
            "description": "Gets or sets cost.",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Invoice line entity."
      },
      "InvoicePayment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Gets or sets primary id.",
            "format": "int32"
          },
          "createdById": {
            "type": "integer",
            "description": "Gets or sets created by id.",
            "format": "int32",
            "nullable": true
          },
          "createdTime": {
            "type": "string",
            "description": "Gets or sets created time.",
            "format": "date-time"
          },
          "modifiedById": {
            "type": "integer",
            "description": "Gets or sets modified by id.",
            "format": "int32",
            "nullable": true
          },
          "modifiedTime": {
            "type": "string",
            "description": "Gets or sets last modified time.",
            "format": "date-time",
            "nullable": true
          },
          "userId": {
            "type": "integer",
            "description": "Gets or sets user id.",
            "format": "int32"
          },
          "paymentId": {
            "type": "integer",
            "description": "Gets or sets payment id.",
            "format": "int32"
          },
          "invoiceId": {
            "type": "integer",
            "description": "Gets or sets invoice id.",
            "format": "int32"
          },
          "amount": {
            "type": "number",
            "description": "Gets or sets amount taken from the referenced payment.",
            "format": "double"
          },
          "shiftId": {
            "type": "integer",
            "description": "Gets or sets shift id.",
            "format": "int32",
            "nullable": true
          },
          "registerId": {
            "type": "integer",
            "description": "Gets or sets register id.",
            "format": "int32",
            "nullable": true
          },
          "refundedAmount": {
            "type": "number",
            "description": "Gets or sets refunded amount.",
            "format": "double"
          },
          "refundStatus": {
            "$ref": "#/components/schemas/RefundStatus"
          }
        },
        "additionalProperties": false,
        "description": "Invoice payment entity."
      },
      "InvoicePaymentDTO": {
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "description": "The time that invoice payment was created.",
            "format": "date-time"
          },
          "invoiceId": {
            "type": "integer",
            "description": "Invoice Id.",
            "format": "int32"
          },
          "paymentMethodId": {
            "type": "integer",
            "description": "Payment method Id.",
            "format": "int32"
          },
          "paymentMethodName": {
            "type": "string",
            "description": "Payment method name.",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "Amount of the invoice payment.",
            "format": "double"
          },
          "refundedAmount": {
            "type": "number",
            "description": "Refunded amount of the invoice payment.",
            "format": "double"
          },
          "refundStatus": {
            "$ref": "#/components/schemas/RefundStatus"
          },
          "refundMethodId": {
            "type": "integer",
            "description": "Refund method Id of the invoice payment.",
            "format": "int32"
          },
          "operatorId": {
            "type": "integer",
            "description": "The Id of the operator that performed the invoice payment.",
            "format": "int32",
            "nullable": true
          },
          "operatorName": {
            "type": "string",
            "description": "The name of the operator that performed the invoice payment.",
            "nullable": true
          },
          "registerId": {
            "type": "integer",
            "description": "The Id of the register on which the invoice payment was performed.",
            "format": "int32",
            "nullable": true
          },
          "registerName": {
            "type": "string",
            "description": "The name of the register on which the invoice payment was performed.",
            "nullable": true
          },
          "shiftId": {
            "type": "integer",
            "description": "The Id of the shift that the invoice payment belongs.",
            "format": "int32",
            "nullable": true
          },
          "userGroupId": {
            "type": "integer",
            "description": "The Id of the user group that the user belongs.",
            "format": "int32"
          },
          "isGuest": {
            "type": "boolean",
            "description": "The user is guest."
          },
          "invoiceTotal": {
            "type": "number",
            "description": "Invoice total amount.",
            "format": "double"
          },
          "invoiceOutstanding": {
            "type": "number",
            "description": "Invoice amount outstanding.",
            "format": "double"
          },
          "invoiceIsVoided": {
            "type": "boolean",
            "description": "The invoice is voided."
          },
          "voidCreatedTime": {
            "type": "string",
            "description": "The time the invoice related to the order was voided, null if not voided.",
            "format": "date-time",
            "nullable": true
          },
          "voidOperatorId": {
            "type": "integer",
            "description": "The Id of the operator that performed the void.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Invoice payment information."
      },
      "InvoicePaymentSummary": {
        "type": "object",
        "properties": {
          "invoicePaymentTotal": {
            "type": "number",
            "description": "Total amount on invoices.",
            "format": "double"
          },
          "invoicePaymentCount": {
            "type": "integer",
            "description": "Total payments on invoices.",
            "format": "int32"
          },
          "depositPaymentTotal": {
            "type": "number",
            "description": "Total amount on desposits.",
            "format": "double"
          },
          "depositPaymentCount": {
            "type": "integer",
            "description": "Total payments on deposits.",
            "format": "int32"
          },
          "paymentTotal": {
            "type": "number",
            "description": "Total payments amount.",
            "format": "double",
            "readOnly": true
          },
          "totalPaymentCount": {
            "type": "integer",
            "description": "Total payments count.",
            "format": "int32",
            "readOnly": true
          },
          "paymentMethodId": {
            "type": "integer",
            "description": "Payment method id.",
            "format": "int32"
          },
          "paymentMethodName": {
            "type": "string",
            "description": "Payment method name.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Invoice payment summary model."
      },
      "InvoiceReportDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Report Name.",
            "nullable": true
          },
          "dateFrom": {
            "type": "string",
            "description": "Filtered Date From.",
            "format": "date-time"
          },
          "dateTo": {
            "type": "string",
            "description": "Filtered Date To.",
            "format": "date-time"
          },
          "companyName": {
            "type": "string",
            "description": "Company Name.",
            "nullable": true
          },
          "reportType": {
            "$ref": "#/components/schemas/ReportTypes"
          },
          "invoiceId": {
            "type": "integer",
            "description": "Filtered Invoice Id.",
            "format": "int32"
          },
          "invoice": {
            "$ref": "#/components/schemas/InvoiceDTO"
          },
          "soldProducts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SoldProductDTO"
            },
            "description": "List of products sold with this invoice.",
            "nullable": true
          },
          "payments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvoicePaymentDTO"
            },
            "description": "List of payments performed for this invoice.",
            "nullable": true
          },
          "refunds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RefundDTO"
            },
            "description": "List of refunds performed for this invoice.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Invoice Report."
      },
      "InvoiceStatus": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "description": "Invoice status.",
        "format": "int32"
      },
      "InvoicesLogPaymentStatusTypes": {
        "enum": [
          1,
          2
        ],
        "type": "integer",
        "description": "Specifies the payment status of the invoices to display.",
        "format": "int32"
      },
      "InvoicesLogReportDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Report Name.",
            "nullable": true
          },
          "dateFrom": {
            "type": "string",
            "description": "Filtered Date From.",
            "format": "date-time"
          },
          "dateTo": {
            "type": "string",
            "description": "Filtered Date To.",
            "format": "date-time"
          },
          "companyName": {
            "type": "string",
            "description": "Company Name.",
            "nullable": true
          },
          "reportType": {
            "$ref": "#/components/schemas/ReportTypes"
          },
          "paymentStatusType": {
            "$ref": "#/components/schemas/InvoicesLogPaymentStatusTypes"
          },
          "voidedStatusType": {
            "$ref": "#/components/schemas/InvoicesLogVoidedStatusTypes"
          },
          "operatorId": {
            "type": "integer",
            "description": "Filtered Operator Id.",
            "format": "int32",
            "nullable": true
          },
          "operatorName": {
            "type": "string",
            "description": "Filtered Operator Name.",
            "nullable": true
          },
          "registerId": {
            "type": "integer",
            "description": "Filtered Register Id.",
            "format": "int32",
            "nullable": true
          },
          "registerName": {
            "type": "string",
            "description": "Filtered Register Name.",
            "nullable": true
          },
          "invoices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvoiceDTO"
            },
            "description": "List of invoices.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Invoices Log Report."
      },
      "InvoicesLogVoidedStatusTypes": {
        "enum": [
          1,
          2
        ],
        "type": "integer",
        "description": "Specifies the void status of the invoices displayed.",
        "format": "int32"
      },
      "KeyGenerationCharacters": {
        "enum": [
          1,
          2,
          3
        ],
        "type": "integer",
        "format": "int32"
      },
      "KnownFolderTypes": {
        "enum": [
          0,
          1,
          2,
          4,
          8,
          16,
          32,
          64,
          128,
          255
        ],
        "type": "integer",
        "description": "This enumerato is used to combine multiple special folders to unique value.",
        "format": "int32"
      },
      "LicenseInfoDTO": {
        "type": "object",
        "properties": {
          "licenseId": {
            "type": "integer",
            "description": "License Id.",
            "format": "int32"
          },
          "licenseName": {
            "type": "string",
            "description": "License name.",
            "nullable": true
          },
          "numberOfActiveKeys": {
            "type": "integer",
            "description": "Number of active keys.",
            "format": "int32"
          },
          "numberOfDisabledKeys": {
            "type": "integer",
            "description": "Number of disabled keys.",
            "format": "int32"
          },
          "numberOfExecutables": {
            "type": "integer",
            "description": "Number of executables using this license.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "License Info."
      },
      "LicenseKeyReservationInfo": {
        "type": "object",
        "properties": {
          "application": {
            "type": "string",
            "description": "Application name.",
            "nullable": true
          },
          "executable": {
            "type": "string",
            "description": "Executable name.",
            "nullable": true
          },
          "licenseKeyId": {
            "type": "integer",
            "description": "License key id.",
            "format": "int32"
          },
          "licenseKey": {
            "type": "string",
            "description": "License key value.",
            "nullable": true
          },
          "hostId": {
            "type": "integer",
            "description": "Host id.",
            "format": "int32"
          },
          "hostname": {
            "type": "string",
            "description": "Host name.",
            "nullable": true
          },
          "userId": {
            "type": "integer",
            "description": "User id.",
            "format": "int32",
            "nullable": true
          },
          "username": {
            "type": "string",
            "description": "User name.",
            "nullable": true
          },
          "reservationId": {
            "type": "integer",
            "description": "Reservation id.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "License key reservation info class."
      },
      "LicenseReportDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Report Name.",
            "nullable": true
          },
          "dateFrom": {
            "type": "string",
            "description": "Filtered Date From.",
            "format": "date-time"
          },
          "dateTo": {
            "type": "string",
            "description": "Filtered Date To.",
            "format": "date-time"
          },
          "companyName": {
            "type": "string",
            "description": "Company Name.",
            "nullable": true
          },
          "reportType": {
            "$ref": "#/components/schemas/ReportTypes"
          },
          "licenseId": {
            "type": "integer",
            "description": "Filtered License Id.",
            "format": "int32",
            "nullable": true
          },
          "licenseName": {
            "type": "string",
            "description": "Filtered License Name.",
            "nullable": true
          },
          "licenseUsage": {
            "$ref": "#/components/schemas/LicenseUsageInfoDTO"
          },
          "licenseTimeChart": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChartRecordDTO"
            },
            "description": "List of records for the concurrent keys chart.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "License Report."
      },
      "LicenseUsageInfoDTO": {
        "type": "object",
        "properties": {
          "licenseInfo": {
            "$ref": "#/components/schemas/LicenseInfoDTO"
          },
          "totalRunTimeSeconds": {
            "type": "integer",
            "description": "Total seconds the license was in use.",
            "format": "int64"
          },
          "totalRunTime": {
            "type": "string",
            "description": "Total time the license was in use as text.",
            "nullable": true
          },
          "lastUse": {
            "type": "string",
            "description": "Time of license last usage.",
            "format": "date-time",
            "nullable": true
          },
          "executables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExecutableInfoDTO"
            },
            "description": "List of executables that use the license and ran within the reporting period.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "License Usage Info."
      },
      "LicensesReportDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Report Name.",
            "nullable": true
          },
          "dateFrom": {
            "type": "string",
            "description": "Filtered Date From.",
            "format": "date-time"
          },
          "dateTo": {
            "type": "string",
            "description": "Filtered Date To.",
            "format": "date-time"
          },
          "companyName": {
            "type": "string",
            "description": "Company Name.",
            "nullable": true
          },
          "reportType": {
            "$ref": "#/components/schemas/ReportTypes"
          },
          "licenseId": {
            "type": "integer",
            "description": "Filtered License Id.",
            "format": "int32",
            "nullable": true
          },
          "licenseName": {
            "type": "integer",
            "description": "Filtered License Name.",
            "format": "int32",
            "nullable": true
          },
          "applicationId": {
            "type": "integer",
            "description": "Filtered Application Id.",
            "format": "int32",
            "nullable": true
          },
          "applicationName": {
            "type": "integer",
            "description": "Filtered Application Name.",
            "format": "int32",
            "nullable": true
          },
          "licenses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LicenseUsageInfoDTO"
            },
            "description": "List of license usages.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Licenses Report."
      },
      "ListItemDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Item Id.",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Item name.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "List Item."
      },
      "LoginResult": {
        "enum": [
          0,
          1,
          2,
          4,
          8,
          12,
          16,
          32,
          64,
          128,
          256,
          512,
          1024,
          2048,
          4096,
          8192,
          16384,
          32768,
          65536,
          131072,
          262144,
          524288,
          1048576
        ],
        "type": "integer",
        "description": "User login result.",
        "format": "int32"
      },
      "LoginState": {
        "enum": [
          0,
          1,
          2,
          4,
          8,
          17
        ],
        "type": "integer",
        "description": "Login state enumeration.",
        "format": "int32"
      },
      "LogoutAction": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          -1
        ],
        "type": "integer",
        "description": "Client logout action types.",
        "format": "int32"
      },
      "LoyalityPointsTransactionType": {
        "enum": [
          0,
          1,
          2,
          3,
          4
        ],
        "type": "integer",
        "description": "Loyality points transaction type.",
        "format": "int32"
      },
      "MemberCountersDTO": {
        "type": "object",
        "properties": {
          "newMembers": {
            "type": "integer",
            "description": "Number of new members.",
            "format": "int32"
          },
          "totalMembers": {
            "type": "integer",
            "description": "Total number of members.",
            "format": "int32"
          },
          "bannedMembers": {
            "type": "integer",
            "description": "Number of banned members.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Member Counters."
      },
      "ModuleEnum": {
        "enum": [
          0,
          1,
          2,
          4,
          7
        ],
        "type": "integer",
        "description": "Module type enumeration.",
        "format": "int32"
      },
      "MonetaryUnit": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Gets or sets primary id.",
            "format": "int32"
          },
          "createdById": {
            "type": "integer",
            "description": "Gets or sets created by id.",
            "format": "int32",
            "nullable": true
          },
          "createdTime": {
            "type": "string",
            "description": "Gets or sets created time.",
            "format": "date-time"
          },
          "modifiedById": {
            "type": "integer",
            "description": "Gets or sets modified by id.",
            "format": "int32",
            "nullable": true
          },
          "modifiedTime": {
            "type": "string",
            "description": "Gets or sets last modified time.",
            "format": "date-time",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Gets or sets name."
          },
          "value": {
            "type": "number",
            "description": "Gets or sets value.",
            "format": "double"
          },
          "displayOrder": {
            "type": "integer",
            "description": "Gets or sets display order.",
            "format": "int32"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Gets or sets if entity is deleted."
          }
        },
        "additionalProperties": false,
        "description": "Monetary unit entity."
      },
      "NamedDecimalContainerDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the object.",
            "nullable": true
          },
          "value": {
            "type": "number",
            "description": "Value of the object.",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "An object containing a name and a decimal value."
      },
      "NoteOptions": {
        "enum": [
          0
        ],
        "type": "integer",
        "description": "Note options.",
        "format": "int32"
      },
      "NoteSeverity": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "description": "Note severity.",
        "format": "int32"
      },
      "OperatorBasicSummary": {
        "type": "object",
        "properties": {
          "operatorId": {
            "type": "integer",
            "description": "Operator id.",
            "format": "int32"
          },
          "operatorName": {
            "type": "string",
            "description": "Operator user name.",
            "nullable": true
          },
          "total": {
            "type": "number",
            "description": "Total withdrawals.",
            "format": "double"
          },
          "count": {
            "type": "integer",
            "description": "Total withdrawals count.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Basic operator summary report model."
      },
      "OperatorInvoicePaymentSummary": {
        "type": "object",
        "properties": {
          "invoicePaymentTotal": {
            "type": "number",
            "description": "Total amount on invoices.",
            "format": "double"
          },
          "invoicePaymentCount": {
            "type": "integer",
            "description": "Total payments on invoices.",
            "format": "int32"
          },
          "depositPaymentTotal": {
            "type": "number",
            "description": "Total amount on desposits.",
            "format": "double"
          },
          "depositPaymentCount": {
            "type": "integer",
            "description": "Total payments on deposits.",
            "format": "int32"
          },
          "paymentTotal": {
            "type": "number",
            "description": "Total payments amount.",
            "format": "double",
            "readOnly": true
          },
          "totalPaymentCount": {
            "type": "integer",
            "description": "Total payments count.",
            "format": "int32",
            "readOnly": true
          },
          "operatorId": {
            "type": "integer",
            "description": "Operator id.",
            "format": "int32"
          },
          "operatorName": {
            "type": "string",
            "description": "Operator user name.",
            "nullable": true
          },
          "invoiceCount": {
            "type": "integer",
            "description": "Total invoices count.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Operator invoice payment summary model."
      },
      "OperatorTransactionDTO": {
        "type": "object",
        "properties": {
          "operatorName": {
            "type": "string",
            "description": "Operator name.",
            "nullable": true
          },
          "transactionDate": {
            "type": "string",
            "description": "The creation time of the transaction.",
            "format": "date-time"
          },
          "invoiceDate": {
            "type": "string",
            "description": "The creation time of the invoice related to the transaction.",
            "format": "date-time",
            "nullable": true
          },
          "title": {
            "type": "string",
            "description": "The transaction title.",
            "nullable": true
          },
          "customerName": {
            "type": "string",
            "description": "The username of the customer for whom the transaction was created.",
            "nullable": true
          },
          "invoiceId": {
            "type": "integer",
            "description": "The Id of the invoice related to the transaction.",
            "format": "int32",
            "nullable": true
          },
          "value": {
            "type": "number",
            "description": "The value of the transaction.",
            "format": "double",
            "nullable": true
          },
          "total": {
            "type": "number",
            "description": "The amount of money or points moved by the transaction.",
            "format": "double",
            "nullable": true
          },
          "paymentMethodId": {
            "type": "integer",
            "description": "Payment Method Id.",
            "format": "int32"
          },
          "paymentMethodName": {
            "type": "string",
            "description": "Payment Method Name.",
            "nullable": true
          },
          "registerName": {
            "type": "string",
            "description": "Register Name.",
            "nullable": true
          },
          "note": {
            "type": "string",
            "description": "Note.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Operator Transaction."
      },
      "OrderDTO": {
        "type": "object",
        "properties": {
          "orderId": {
            "type": "integer",
            "description": "Order Id.",
            "format": "int32"
          },
          "createdTime": {
            "type": "string",
            "description": "Creation time of the order.",
            "format": "date-time"
          },
          "orderSource": {
            "$ref": "#/components/schemas/OrderSource"
          },
          "orderStatus": {
            "$ref": "#/components/schemas/OrderStatus"
          },
          "orderSourceLiteral": {
            "type": "string",
            "description": "Order source name.",
            "nullable": true
          },
          "orderStatusName": {
            "type": "string",
            "description": "Order status name.",
            "nullable": true
          },
          "operatorId": {
            "type": "integer",
            "description": "The Id of the operator that handled the order.",
            "format": "int32",
            "nullable": true
          },
          "operatorName": {
            "type": "string",
            "description": "The name of the operator that handled the order.",
            "nullable": true
          },
          "hostId": {
            "type": "integer",
            "description": "The Id of the host on which the order was created.",
            "format": "int32",
            "nullable": true
          },
          "hostName": {
            "type": "string",
            "description": "The name of the host on which the order was created.",
            "nullable": true
          },
          "registerId": {
            "type": "integer",
            "description": "The Id of the register on which the order was processed.",
            "format": "int32",
            "nullable": true
          },
          "registerName": {
            "type": "string",
            "description": "The name of the register on which the order was processed.",
            "nullable": true
          },
          "userId": {
            "type": "integer",
            "description": "The Id of the user that created the order.",
            "format": "int32",
            "nullable": true
          },
          "userName": {
            "type": "string",
            "description": "The name of the user that created the order.",
            "nullable": true
          },
          "deliveredTime": {
            "type": "string",
            "description": "The time the order was delivered or null if is not delivered yet.",
            "format": "date-time",
            "nullable": true
          },
          "deliverySeconds": {
            "type": "number",
            "description": "Total seconds between the time the order was created and the time the order was delivered, null if is not delivered yet.",
            "format": "double",
            "nullable": true
          },
          "deliveryTime": {
            "type": "string",
            "description": "Total time as text between the time the order was created and the time the order was delivered, null if is not delivered yet.",
            "nullable": true
          },
          "itemNumber": {
            "type": "integer",
            "description": "Number of items within the order.",
            "format": "int32"
          },
          "invoiceId": {
            "type": "integer",
            "description": "The Id of the invoice that was created for the order, null if there is no related invoice.",
            "format": "int32",
            "nullable": true
          },
          "userNote": {
            "type": "string",
            "description": "User note for the order.",
            "nullable": true
          },
          "invoice": {
            "$ref": "#/components/schemas/InvoiceDTO"
          }
        },
        "additionalProperties": false,
        "description": "Order Information."
      },
      "OrderLinePayType": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "description": "Order line payment type.",
        "format": "int32"
      },
      "OrderOptionType": {
        "enum": [
          0,
          1,
          2,
          4,
          8,
          16,
          64
        ],
        "type": "integer",
        "description": "Order options.",
        "format": "int32"
      },
      "OrderSource": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "description": "Client order source.",
        "format": "int32"
      },
      "OrderStatus": {
        "enum": [
          0,
          1,
          2,
          3
        ],
        "type": "integer",
        "description": "Order status.",
        "format": "int32"
      },
      "OrdersLogReportDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Report Name.",
            "nullable": true
          },
          "dateFrom": {
            "type": "string",
            "description": "Filtered Date From.",
            "format": "date-time"
          },
          "dateTo": {
            "type": "string",
            "description": "Filtered Date To.",
            "format": "date-time"
          },
          "companyName": {
            "type": "string",
            "description": "Company Name.",
            "nullable": true
          },
          "reportType": {
            "$ref": "#/components/schemas/ReportTypes"
          },
          "orderSource": {
            "$ref": "#/components/schemas/OrderSource"
          },
          "orderStatus": {
            "$ref": "#/components/schemas/OrderStatus"
          },
          "operatorId": {
            "type": "integer",
            "description": "Filtered Operator Id.",
            "format": "int32",
            "nullable": true
          },
          "operatorName": {
            "type": "string",
            "description": "Filtered Operator Name.",
            "nullable": true
          },
          "userId": {
            "type": "integer",
            "description": "Filtered User Id.",
            "format": "int32",
            "nullable": true
          },
          "userName": {
            "type": "string",
            "description": "Filtered User Name.",
            "nullable": true
          },
          "orders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderDTO"
            },
            "description": "List of orders.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Orders Log Report."
      },
      "OverviewReportDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Report Name.",
            "nullable": true
          },
          "dateFrom": {
            "type": "string",
            "description": "Filtered Date From.",
            "format": "date-time"
          },
          "dateTo": {
            "type": "string",
            "description": "Filtered Date To.",
            "format": "date-time"
          },
          "companyName": {
            "type": "string",
            "description": "Company Name.",
            "nullable": true
          },
          "reportType": {
            "$ref": "#/components/schemas/ReportTypes"
          },
          "operatorsStatistics": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OverviewReportOperatorStatisticsDTO"
            },
            "description": "List of operator statistics.",
            "nullable": true
          },
          "averageMemberUsagePeriodMinutes": {
            "type": "string",
            "description": "Average daily member visits duration.",
            "nullable": true
          },
          "averageGuestUsagePeriodMinutes": {
            "type": "string",
            "description": "Average daily guest visits duration.",
            "nullable": true
          },
          "averageUtilizationPercentage": {
            "type": "number",
            "description": "Average utilization percentage.",
            "format": "double"
          },
          "uniqueMembersLogins": {
            "type": "integer",
            "description": "Unique members logins.",
            "format": "int32"
          },
          "uniqueGuestsLogins": {
            "type": "integer",
            "description": "Unique guests logins.",
            "format": "int32"
          },
          "memberCounters": {
            "$ref": "#/components/schemas/MemberCountersDTO"
          },
          "utilizationChart": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PeriodUtilizationChartRecordDTO"
            },
            "description": "List of records for the utilization chart.",
            "nullable": true
          },
          "financialChart": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChartRecordDTO"
            },
            "description": "List of records for the financial chart.",
            "nullable": true
          },
          "totalPayInOut": {
            "type": "number",
            "description": "Total pay in-out.",
            "format": "double"
          },
          "totalRevenue": {
            "type": "number",
            "description": "Total revenue.",
            "format": "double"
          },
          "averageRevenuePerMember": {
            "type": "number",
            "description": "Average revenue per member.",
            "format": "double"
          },
          "averageRevenuePerGuest": {
            "type": "number",
            "description": "Average revenue per guest.",
            "format": "double"
          },
          "revenuePerGroup": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NamedDecimalContainerDTO"
            },
            "description": "List of user group revenue.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Overview Report."
      },
      "OverviewReportOperatorStatisticsDTO": {
        "type": "object",
        "properties": {
          "operatorId": {
            "type": "integer",
            "description": "Operator Id.",
            "format": "int32"
          },
          "operatorName": {
            "type": "string",
            "description": "Operator name.",
            "nullable": true
          },
          "minutesWorked": {
            "type": "integer",
            "description": "Total minutes the operator worked.",
            "format": "int32"
          },
          "hoursWorked": {
            "type": "string",
            "description": "Total hours the operator worked as text.",
            "nullable": true
          },
          "minutesSold": {
            "type": "number",
            "description": "Total minutes the operator sold.",
            "format": "double"
          },
          "hoursSold": {
            "type": "string",
            "description": "Total hours the operator sold as text.",
            "nullable": true
          },
          "productsSold": {
            "type": "number",
            "description": "Number of products the operator sold.",
            "format": "double"
          },
          "timeOffersSold": {
            "type": "number",
            "description": "Number of time offers the operator sold.",
            "format": "double"
          },
          "bundlesSold": {
            "type": "number",
            "description": "Number of bundles the operator sold.",
            "format": "double"
          },
          "voids": {
            "type": "integer",
            "description": "Number of voids the operator performed.",
            "format": "int32"
          },
          "registerTransactionsTotal": {
            "type": "number",
            "description": "Total amount of register transactions performed by the operator.",
            "format": "double"
          },
          "revenue": {
            "type": "number",
            "description": "Operator revenue.",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Overview Report Operator Statistics."
      },
      "PaymentProvidersConfig": {
        "type": "object",
        "properties": {
          "allowCustomValue": {
            "type": "boolean",
            "description": "Gets or sets if custom value is allowed."
          },
          "minimumAmount": {
            "type": "number",
            "description": "Gets or sets minimum amount.",
            "format": "double"
          },
          "presets": {
            "type": "array",
            "items": {
              "type": "number",
              "format": "double"
            },
            "description": "Gets or sets presets.",
            "default": null,
            "nullable": true
          },
          "paymentSuccessUrl": {
            "type": "string",
            "description": "Gets payment success redirect url.",
            "default": "https://www.gizmopowered.net/payment/success",
            "nullable": true
          },
          "paymentCancelUrl": {
            "type": "string",
            "description": "Gets payment cancel redirect url.",
            "default": "https://www.gizmopowered.net/payment/failure",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Global payment providers configuration."
      },
      "PeriodUtilizationChartRecordDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the chart record.",
            "nullable": true
          },
          "value": {
            "type": "number",
            "description": "The value of the chart record.",
            "format": "double"
          },
          "totalSeconds": {
            "type": "integer",
            "description": "Period total seconds multiplied by the number of available hosts.",
            "format": "int32"
          },
          "usedSeconds": {
            "type": "integer",
            "description": "Period used seconds based on user sessions.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Period Utilization Chart Record."
      },
      "PointTransaction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Gets or sets primary id.",
            "format": "int32"
          },
          "createdById": {
            "type": "integer",
            "description": "Gets or sets created by id.",
            "format": "int32",
            "nullable": true
          },
          "createdTime": {
            "type": "string",
            "description": "Gets or sets created time.",
            "format": "date-time"
          },
          "modifiedById": {
            "type": "integer",
            "description": "Gets or sets modified by id.",
            "format": "int32",
            "nullable": true
          },
          "modifiedTime": {
            "type": "string",
            "description": "Gets or sets last modified time.",
            "format": "date-time",
            "nullable": true
          },
          "userId": {
            "type": "integer",
            "description": "Gets or sets user id.",
            "format": "int32"
          },
          "type": {
            "$ref": "#/components/schemas/LoyalityPointsTransactionType"
          },
          "amount": {
            "type": "integer",
            "description": "Gets or sets points amount.",
            "format": "int32"
          },
          "balance": {
            "type": "integer",
            "description": "Gets or sets points balance.",
            "format": "int32"
          },
          "isVoided": {
            "type": "boolean",
            "description": "Gets or sets if voided."
          },
          "shiftId": {
            "type": "integer",
            "description": "Gets or sets shift id.",
            "format": "int32",
            "nullable": true
          },
          "registerId": {
            "type": "integer",
            "description": "Gets or sets register id.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Points transaction entity."
      },
      "PointTransactionInfo": {
        "type": "object",
        "properties": {
          "createdById": {
            "type": "integer",
            "description": "Created by user id.",
            "format": "int32",
            "nullable": true
          },
          "createdByUsername": {
            "type": "string",
            "description": "Created by username. This value is optionally included.",
            "nullable": true
          },
          "createdTime": {
            "type": "string",
            "description": "Resource creation time.",
            "format": "date-time"
          },
          "modifiedById": {
            "type": "integer",
            "description": "Modified by user id.",
            "format": "int32",
            "nullable": true
          },
          "modifiedByUsername": {
            "type": "string",
            "description": "Modified by username. This value is optionally included.",
            "nullable": true
          },
          "modifiedTime": {
            "type": "string",
            "description": "Resource last modification time.",
            "format": "date-time",
            "nullable": true
          },
          "transactionId": {
            "type": "integer",
            "description": "Transaction id.",
            "format": "int32"
          },
          "amount": {
            "type": "number",
            "description": "Transaction amount.",
            "format": "double"
          },
          "balance": {
            "type": "number",
            "description": "Balance at time of transaction.",
            "format": "double"
          },
          "type": {
            "$ref": "#/components/schemas/LoyalityPointsTransactionType"
          },
          "userId": {
            "type": "integer",
            "description": "User id.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Point transaction model."
      },
      "ProductBase": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Gets or sets primary id.",
            "format": "int32"
          },
          "createdById": {
            "type": "integer",
            "description": "Gets or sets created by id.",
            "format": "int32",
            "nullable": true
          },
          "createdTime": {
            "type": "string",
            "description": "Gets or sets created time.",
            "format": "date-time"
          },
          "modifiedById": {
            "type": "integer",
            "description": "Gets or sets modified by id.",
            "format": "int32",
            "nullable": true
          },
          "modifiedTime": {
            "type": "string",
            "description": "Gets or sets last modified time.",
            "format": "date-time",
            "nullable": true
          },
          "name": {
            "maxLength": 45,
            "minLength": 0,
            "type": "string",
            "description": "Gets or sets name."
          },
          "description": {
            "maxLength": 65535,
            "minLength": 0,
            "type": "string",
            "description": "Gets or sets description.",
            "nullable": true
          },
          "price": {
            "type": "number",
            "description": "Gets or sets price.",
            "format": "double"
          },
          "cost": {
            "type": "number",
            "description": "Gets or sets cost.",
            "format": "double",
            "nullable": true
          },
          "orderOptions": {
            "$ref": "#/components/schemas/OrderOptionType"
          },
          "purchaseOptions": {
            "$ref": "#/components/schemas/PurchaseOptionType"
          },
          "points": {
            "type": "integer",
            "description": "Gets or sets points.",
            "format": "int32",
            "nullable": true
          },
          "pointsPrice": {
            "type": "integer",
            "description": "Gets or sets price points.",
            "format": "int32",
            "nullable": true
          },
          "barcode": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Gets or sets barcode.",
            "nullable": true
          },
          "stockOptions": {
            "$ref": "#/components/schemas/StockOptionType"
          },
          "stockAlert": {
            "type": "number",
            "description": "Gets or sets stock alert.",
            "format": "double"
          },
          "stockProductId": {
            "type": "integer",
            "description": "Gets or sets stock product id.",
            "format": "int32",
            "nullable": true
          },
          "stockProductAmount": {
            "type": "number",
            "description": "Gets or sets stock product amount.",
            "format": "double"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Gets or sets is deleted."
          },
          "productGroupId": {
            "type": "integer",
            "description": "Gets or sets product group id.",
            "format": "int32"
          },
          "displayOrder": {
            "type": "integer",
            "description": "Gets or sets display order.",
            "format": "int32"
          },
          "guid": {
            "type": "string",
            "description": "Gets or sets entity guid.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Product base entity."
      },
      "ProductOrder": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Gets or sets primary id.",
            "format": "int32"
          },
          "createdById": {
            "type": "integer",
            "description": "Gets or sets created by id.",
            "format": "int32",
            "nullable": true
          },
          "createdTime": {
            "type": "string",
            "description": "Gets or sets created time.",
            "format": "date-time"
          },
          "modifiedById": {
            "type": "integer",
            "description": "Gets or sets modified by id.",
            "format": "int32",
            "nullable": true
          },
          "modifiedTime": {
            "type": "string",
            "description": "Gets or sets last modified time.",
            "format": "date-time",
            "nullable": true
          },
          "userId": {
            "type": "integer",
            "description": "Gets or sets user id.",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/OrderStatus"
          },
          "subTotal": {
            "type": "number",
            "description": "Gets sub total.",
            "format": "double"
          },
          "total": {
            "type": "number",
            "description": "Gets or sets sub total.",
            "format": "double"
          },
          "pointsTotal": {
            "type": "integer",
            "description": "Gets or sets total points.",
            "format": "int32"
          },
          "tax": {
            "type": "number",
            "description": "Gets or sets tax amount.",
            "format": "double"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Gets or sets if entity is deleted."
          },
          "isVoided": {
            "type": "boolean",
            "description": "Gets or sets if voided."
          },
          "hostId": {
            "type": "integer",
            "description": "Gets or sets host id.",
            "format": "int32",
            "nullable": true
          },
          "shiftId": {
            "type": "integer",
            "description": "Gets or sets shift id.",
            "format": "int32",
            "nullable": true
          },
          "registerId": {
            "type": "integer",
            "description": "Gets or sets register id.",
            "format": "int32",
            "nullable": true
          },
          "preferedPaymentMethodId": {
            "type": "integer",
            "description": "Gets or sets prefered payment method id.",
            "format": "int32",
            "nullable": true
          },
          "isDelivered": {
            "type": "boolean",
            "description": "Gets or sets if delivered."
          },
          "deliveredTime": {
            "type": "string",
            "description": "Gets or sets delivered time.",
            "format": "date-time",
            "nullable": true
          },
          "source": {
            "$ref": "#/components/schemas/OrderSource"
          },
          "userNote": {
            "maxLength": 255,
            "type": "string",
            "description": "Gets or sets order source.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Product order entity."
      },
      "ProductReportDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Report Name.",
            "nullable": true
          },
          "dateFrom": {
            "type": "string",
            "description": "Filtered Date From.",
            "format": "date-time"
          },
          "dateTo": {
            "type": "string",
            "description": "Filtered Date To.",
            "format": "date-time"
          },
          "companyName": {
            "type": "string",
            "description": "Company Name.",
            "nullable": true
          },
          "reportType": {
            "$ref": "#/components/schemas/ReportTypes"
          },
          "productId": {
            "type": "integer",
            "description": "Filtered Product Id.",
            "format": "int32"
          },
          "productName": {
            "type": "string",
            "description": "Filtered Product Name.",
            "nullable": true
          },
          "userId": {
            "type": "integer",
            "description": "Filtered User Id.",
            "format": "int32",
            "nullable": true
          },
          "userName": {
            "type": "string",
            "description": "Filtered User Name.",
            "nullable": true
          },
          "userGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserGroupProductsSoldDTO"
            },
            "description": "List of product sales per user group.",
            "nullable": true
          },
          "salesChart": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChartRecordDTO"
            },
            "description": "List of records for the general sales chart.",
            "nullable": true
          },
          "salesChartPerDay": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChartRecordDTO"
            },
            "description": "List of records for the sales per day chart.",
            "nullable": true
          },
          "salesChartPerHour": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChartRecordDTO"
            },
            "description": "List of records for the sales per hour chart.",
            "nullable": true
          },
          "stockChartMin": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChartRecordDTO"
            },
            "description": "List of records with minimum values for the stock chart.",
            "nullable": true
          },
          "stockChartMax": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChartRecordDTO"
            },
            "description": "List of records with maximum values for the stock chart.",
            "nullable": true
          },
          "timeUsageChart": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimeUsageChartRecordDTO"
            },
            "description": "List of records for the time usage chart.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Product Report."
      },
      "ProductStockDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Product Id.",
            "format": "int32"
          },
          "productName": {
            "type": "string",
            "description": "Product name.",
            "nullable": true
          },
          "initial": {
            "type": "number",
            "description": "Initial number of items in stock.",
            "format": "double"
          },
          "added": {
            "type": "number",
            "description": "Number of items added in stock.",
            "format": "double"
          },
          "removed": {
            "type": "number",
            "description": "Number of items removed from stock.",
            "format": "double"
          },
          "set": {
            "type": "number",
            "description": "Manually set stock to specific number of items.",
            "format": "double"
          },
          "sold": {
            "type": "number",
            "description": "The number of items sold of the product.",
            "format": "double"
          },
          "returned": {
            "type": "number",
            "description": "The number of items returned of the product.",
            "format": "double"
          },
          "final": {
            "type": "number",
            "description": "Number of items the stock left with.",
            "format": "double"
          },
          "diff": {
            "type": "number",
            "description": "Difference between initial and final stock.",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Product Stock Information."
      },
      "ProductTime": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Gets or sets primary id.",
            "format": "int32"
          },
          "createdById": {
            "type": "integer",
            "description": "Gets or sets created by id.",
            "format": "int32",
            "nullable": true
          },
          "createdTime": {
            "type": "string",
            "description": "Gets or sets created time.",
            "format": "date-time"
          },
          "modifiedById": {
            "type": "integer",
            "description": "Gets or sets modified by id.",
            "format": "int32",
            "nullable": true
          },
          "modifiedTime": {
            "type": "string",
            "description": "Gets or sets last modified time.",
            "format": "date-time",
            "nullable": true
          },
          "name": {
            "maxLength": 45,
            "minLength": 0,
            "type": "string",
            "description": "Gets or sets name."
          },
          "description": {
            "maxLength": 65535,
            "minLength": 0,
            "type": "string",
            "description": "Gets or sets description.",
            "nullable": true
          },
          "price": {
            "type": "number",
            "description": "Gets or sets price.",
            "format": "double"
          },
          "cost": {
            "type": "number",
            "description": "Gets or sets cost.",
            "format": "double",
            "nullable": true
          },
          "orderOptions": {
            "$ref": "#/components/schemas/OrderOptionType"
          },
          "purchaseOptions": {
            "$ref": "#/components/schemas/PurchaseOptionType"
          },
          "points": {
            "type": "integer",
            "description": "Gets or sets points.",
            "format": "int32",
            "nullable": true
          },
          "pointsPrice": {
            "type": "integer",
            "description": "Gets or sets price points.",
            "format": "int32",
            "nullable": true
          },
          "barcode": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Gets or sets barcode.",
            "nullable": true
          },
          "stockOptions": {
            "$ref": "#/components/schemas/StockOptionType"
          },
          "stockAlert": {
            "type": "number",
            "description": "Gets or sets stock alert.",
            "format": "double"
          },
          "stockProductId": {
            "type": "integer",
            "description": "Gets or sets stock product id.",
            "format": "int32",
            "nullable": true
          },
          "stockProductAmount": {
            "type": "number",
            "description": "Gets or sets stock product amount.",
            "format": "double"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Gets or sets is deleted."
          },
          "productGroupId": {
            "type": "integer",
            "description": "Gets or sets product group id.",
            "format": "int32"
          },
          "displayOrder": {
            "type": "integer",
            "description": "Gets or sets display order.",
            "format": "int32"
          },
          "guid": {
            "type": "string",
            "description": "Gets or sets entity guid.",
            "format": "uuid"
          },
          "minutes": {
            "type": "integer",
            "description": "Gets or sets minutes.",
            "format": "int32"
          },
          "weekDayMaxMinutes": {
            "maximum": 7200,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets weekday maximum minutes.",
            "format": "int32",
            "nullable": true
          },
          "weekEndMaxMinutes": {
            "maximum": 2880,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets weekend maximum minutes.",
            "format": "int32",
            "nullable": true
          },
          "appGroupId": {
            "type": "integer",
            "description": "Gets or sets app profile id.",
            "format": "int32",
            "nullable": true
          },
          "expiresAfter": {
            "type": "integer",
            "description": "Gets or sets expire after days.",
            "format": "int32"
          },
          "expirationOptions": {
            "$ref": "#/components/schemas/ProductTimeExpirationOptionType"
          },
          "expireFromOptions": {
            "$ref": "#/components/schemas/ExpireFromOptionType"
          },
          "usageOptions": {
            "$ref": "#/components/schemas/ProductTimeUsageOptionType"
          },
          "useOrder": {
            "type": "integer",
            "description": "Gets or sets use order.",
            "format": "int32"
          },
          "expireAfterType": {
            "$ref": "#/components/schemas/ExpireAfterType"
          },
          "expireAtDayTimeMinute": {
            "type": "integer",
            "description": "Gets or sets expire at day time minute.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Product time entity."
      },
      "ProductTimeExpirationOptionType": {
        "enum": [
          0,
          1,
          2,
          4,
          8
        ],
        "type": "integer",
        "description": "Product time expiration options.",
        "format": "int32"
      },
      "ProductTimeUsageOptionType": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "description": "Product time usage options.",
        "format": "int32"
      },
      "ProductTransactionDTO": {
        "type": "object",
        "properties": {
          "transactionDate": {
            "type": "string",
            "description": "The time the transaction performed.",
            "format": "date-time"
          },
          "productTransactionType": {
            "$ref": "#/components/schemas/ProductTransactionTypes"
          },
          "productId": {
            "type": "integer",
            "description": "Product Id.",
            "format": "int32"
          },
          "productName": {
            "type": "string",
            "description": "Product name.",
            "nullable": true
          },
          "quantity": {
            "type": "number",
            "description": "Number of items within the transaction.",
            "format": "double"
          },
          "operatorId": {
            "type": "integer",
            "description": "The Id of the operator that performed the transaction.",
            "format": "int32",
            "nullable": true
          },
          "operatorName": {
            "type": "string",
            "description": "The name of the operator that performed the transaction.",
            "nullable": true
          },
          "registerId": {
            "type": "integer",
            "description": "The Id of the register on which the transaction was performed.",
            "format": "int32",
            "nullable": true
          },
          "registerName": {
            "type": "string",
            "description": "The name of the register on which the transaction was performed.",
            "nullable": true
          },
          "customerId": {
            "type": "integer",
            "description": "The Id of the customer for whom the transaction was created.",
            "format": "int32",
            "nullable": true
          },
          "customerName": {
            "type": "string",
            "description": "The username of the customer for whom the transaction was created.",
            "nullable": true
          },
          "invoiceId": {
            "type": "integer",
            "description": "Id of the invoice that is related to the transaction.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Product Transaction."
      },
      "ProductTransactionTypes": {
        "enum": [
          1,
          2,
          3
        ],
        "type": "integer",
        "description": "Specifies the type of the product transaction.",
        "format": "int32"
      },
      "ProductsLogReportDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Report Name.",
            "nullable": true
          },
          "dateFrom": {
            "type": "string",
            "description": "Filtered Date From.",
            "format": "date-time"
          },
          "dateTo": {
            "type": "string",
            "description": "Filtered Date To.",
            "format": "date-time"
          },
          "companyName": {
            "type": "string",
            "description": "Company Name.",
            "nullable": true
          },
          "reportType": {
            "$ref": "#/components/schemas/ReportTypes"
          },
          "productId": {
            "type": "integer",
            "description": "Filtered Product Id.",
            "format": "int32",
            "nullable": true
          },
          "productName": {
            "type": "string",
            "description": "Filtered Product Name.",
            "nullable": true
          },
          "operatorId": {
            "type": "integer",
            "description": "Filtered Operator Id.",
            "format": "int32",
            "nullable": true
          },
          "operatorName": {
            "type": "string",
            "description": "Filtered Operator Id.",
            "nullable": true
          },
          "productTransactionType": {
            "$ref": "#/components/schemas/ProductTransactionTypes"
          },
          "productTransactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductTransactionDTO"
            },
            "description": "List of product transactions within the reporting period.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Products Log Report."
      },
      "ProductsReportDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Report Name.",
            "nullable": true
          },
          "dateFrom": {
            "type": "string",
            "description": "Filtered Date From.",
            "format": "date-time"
          },
          "dateTo": {
            "type": "string",
            "description": "Filtered Date To.",
            "format": "date-time"
          },
          "companyName": {
            "type": "string",
            "description": "Company Name.",
            "nullable": true
          },
          "reportType": {
            "$ref": "#/components/schemas/ReportTypes"
          },
          "userId": {
            "type": "integer",
            "description": "Filtered User Id.",
            "format": "int32",
            "nullable": true
          },
          "userName": {
            "type": "string",
            "description": "Filtered User Name.",
            "nullable": true
          },
          "products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupedProductSalesDTO"
            },
            "description": "List of products.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Products Report."
      },
      "PurchaseOptionType": {
        "enum": [
          0,
          1
        ],
        "type": "integer",
        "description": "Points money option type.",
        "format": "int32"
      },
      "RefundDTO": {
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "description": "The time the refund was created.",
            "format": "date-time"
          },
          "operatorId": {
            "type": "integer",
            "description": "The Id of the operator that performed the refund.",
            "format": "int32",
            "nullable": true
          },
          "operatorName": {
            "type": "string",
            "description": "The name of the operator that performed the refund.",
            "nullable": true
          },
          "registerId": {
            "type": "integer",
            "description": "The Id of the register on which the refund performed.",
            "format": "int32",
            "nullable": true
          },
          "registerName": {
            "type": "string",
            "description": "The name of the register on which the refund was performed.",
            "nullable": true
          },
          "refundMethodId": {
            "type": "integer",
            "description": "Refund method Id.",
            "format": "int32",
            "nullable": true
          },
          "refundMethodName": {
            "type": "string",
            "description": "Refund method name.",
            "nullable": true
          },
          "refundedAmount": {
            "type": "number",
            "description": "Amount refunded.",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Refund Information."
      },
      "RefundStatus": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "description": "Refund status.",
        "format": "int32"
      },
      "RegisterTransactionDTO": {
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "description": "The creation time of the register transaction.",
            "format": "date-time"
          },
          "transactionType": {
            "$ref": "#/components/schemas/RegisterTransactionType"
          },
          "paymentMethodName": {
            "type": "string",
            "description": "The payment type name of the transaction.",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "The amount of the transaction.",
            "format": "double"
          },
          "quantity": {
            "type": "integer",
            "description": "The quantity of the transactions with the specific amount, in case of grouped transactions.",
            "format": "int32"
          },
          "total": {
            "type": "number",
            "description": "The total amount of the transactions with the specific amount, in case of grouped transactions.",
            "format": "double"
          },
          "operatorId": {
            "type": "integer",
            "description": "The Id of the operator performed the register transaction.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Register Transaction."
      },
      "RegisterTransactionType": {
        "enum": [
          1,
          2
        ],
        "type": "integer",
        "description": "Register transaction type.",
        "format": "int32"
      },
      "RegistrationVerificationMethod": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "description": "Registration verification methods.",
        "format": "int32"
      },
      "ReportEntryType": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "ReportMailRecipient": {
        "required": [
          "email"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email address of the recipient.",
            "format": "email"
          },
          "isActive": {
            "type": "boolean",
            "description": "The recipient is active.",
            "default": true
          }
        },
        "additionalProperties": false,
        "description": "Report Mail Recipient."
      },
      "ReportMailTask": {
        "type": "object",
        "properties": {
          "reportType": {
            "$ref": "#/components/schemas/ReportTypes"
          },
          "parameters": {
            "type": "string",
            "description": "Report parameters to pass on execution.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Report Mail Task."
      },
      "ReportPeriodTypes": {
        "enum": [
          1,
          2,
          4,
          8,
          16
        ],
        "type": "integer",
        "description": "Specifies the period type of the report.",
        "format": "int32"
      },
      "ReportScheduledTask": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Scheduled task name.",
            "nullable": true
          },
          "isActive": {
            "type": "boolean",
            "description": "The scheduled task is active."
          },
          "time": {
            "$ref": "#/components/schemas/TimeSpan"
          },
          "reportPeriodType": {
            "$ref": "#/components/schemas/ReportPeriodTypes"
          },
          "recipients": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReportMailRecipient"
            },
            "description": "List of recipiends e-mails to send",
            "nullable": true
          },
          "reportMailTasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReportMailTask"
            },
            "description": "List of report mail task under the scheduled task.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Report Scheduled Task."
      },
      "ReportTypes": {
        "enum": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          16,
          17,
          18,
          19,
          20,
          21,
          22,
          23,
          24
        ],
        "type": "integer",
        "description": "Defines report types.",
        "format": "int32"
      },
      "ReservationConfig": {
        "type": "object",
        "properties": {
          "enableLoginBlock": {
            "type": "boolean",
            "description": "Enables blocking login on hosts with upcoming reservations.",
            "default": true
          },
          "loginBlockTime": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "description": "Time in minutes before upcoming reservation to block login.",
            "format": "int32",
            "default": 30
          },
          "enableLoginUnblock": {
            "type": "boolean",
            "description": "Enables unblocking login for active reservation.",
            "default": false
          },
          "loginUnblockTime": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "description": "Time in minutes before unblocking login for active reservation.",
            "format": "int32",
            "default": 30
          }
        },
        "additionalProperties": false,
        "description": "Reservation configuration class."
      },
      "ReservationHostInfo": {
        "required": [
          "hostId"
        ],
        "type": "object",
        "properties": {
          "hostId": {
            "type": "integer",
            "description": "Gets or sets host id.",
            "format": "int32"
          },
          "preferedUserId": {
            "type": "integer",
            "description": "Gets or sets prefered user id.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Reservation host info."
      },
      "ReservationHostParameter": {
        "required": [
          "hostId"
        ],
        "type": "object",
        "properties": {
          "hostId": {
            "type": "integer",
            "description": "Host id.",
            "format": "int32"
          },
          "preferedUserId": {
            "type": "integer",
            "description": "Prefered user id.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Reservation host parameter."
      },
      "ReservationInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Gets or sets reservation id.",
            "format": "int32"
          },
          "userId": {
            "type": "integer",
            "description": "Gets or sets reserving user id.",
            "format": "int32",
            "nullable": true
          },
          "note": {
            "type": "string",
            "description": "Gets or sets note.",
            "nullable": true
          },
          "duration": {
            "type": "integer",
            "description": "Gets or sets duration.",
            "format": "int32"
          },
          "contactPhone": {
            "type": "string",
            "description": "Gets or sets contact phone.",
            "nullable": true
          },
          "contactEmail": {
            "type": "string",
            "description": "Gets or sets contact email.",
            "nullable": true
          },
          "date": {
            "type": "string",
            "description": "Gets or sets date.",
            "format": "date-time"
          },
          "pin": {
            "type": "string",
            "description": "Gets or sets pin.",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/ReservationStatus"
          },
          "endDate": {
            "type": "string",
            "description": "Gets or sets end date.",
            "format": "date-time",
            "readOnly": true
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReservationUserInfo"
            },
            "description": "Gets reservation user info.",
            "nullable": true
          },
          "hosts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReservationHostInfo"
            },
            "description": "Gets or sets reserved host info.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Reservation info."
      },
      "ReservationStatus": {
        "enum": [
          0,
          1
        ],
        "type": "integer",
        "description": "Reservation status.",
        "format": "int32"
      },
      "ReservationUserInfo": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "description": "Gets or sets user id.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Reservation user info."
      },
      "ReservationUserParameter": {
        "required": [
          "userId"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "description": "User id.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Reservation user parameter."
      },
      "SMSGatewayConfig": {
        "type": "object",
        "properties": {
          "isEnabled": {
            "type": "boolean",
            "description": "Gets or sets if gateway is enabled.",
            "default": false
          },
          "current": {
            "type": "string",
            "description": "Gets or sets current provider guid.",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "SMS gateway configuration class."
      },
      "SMTPConfig": {
        "required": [
          "host"
        ],
        "type": "object",
        "properties": {
          "host": {
            "type": "string",
            "description": "Gets or sets SMTP server host."
          },
          "port": {
            "maximum": 65536,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets mail server port.",
            "format": "int32",
            "default": 465
          },
          "username": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Gets or sets username.",
            "nullable": true
          },
          "password": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Gets or sets password.",
            "nullable": true
          },
          "enableAuthentication": {
            "type": "boolean",
            "description": "Gets or sets if authentication should be used.",
            "default": false
          },
          "useSSL": {
            "type": "boolean",
            "description": "Gets or sets if SSL should be used.",
            "default": true
          },
          "smtpSecurity": {
            "$ref": "#/components/schemas/SMTPSecurity"
          },
          "isEnabled": {
            "type": "boolean",
            "description": "Gets or sets if SMTP is enabled.",
            "default": false
          },
          "replyToAddress": {
            "type": "string",
            "description": "Gets or sets reply to address.",
            "format": "email",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Service SMTP configuration class."
      },
      "SMTPSecurity": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "description": "SMTP Security.",
        "format": "int32"
      },
      "SaleReport": {
        "type": "object",
        "properties": {
          "products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SaleReportProductEntry"
            },
            "description": "Product sales.",
            "nullable": true
          },
          "fixedTime": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SaleReportProductEntry"
            },
            "description": "Fixed time sales.",
            "nullable": true
          },
          "deletedTimeProducts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SaleReportProductEntry"
            },
            "description": "Deleted time product.",
            "nullable": true
          },
          "sessionTime": {
            "type": "number",
            "description": "Total session time sold (in seconds).",
            "format": "double"
          },
          "sessionTimeTotal": {
            "type": "number",
            "description": "Gets total session time.",
            "format": "double"
          },
          "sessionTimeMinutes": {
            "type": "integer",
            "description": "Total session time sold (in minutes).",
            "format": "int32",
            "readOnly": true
          },
          "productTotal": {
            "type": "number",
            "description": "Total product sum.",
            "format": "double",
            "readOnly": true
          },
          "fixedTimeTotal": {
            "type": "number",
            "description": "Total fixed time sum.",
            "format": "double",
            "readOnly": true
          },
          "timeTotal": {
            "type": "number",
            "description": "Total time sum.",
            "format": "double",
            "readOnly": true
          },
          "deletedTimeTotal": {
            "type": "number",
            "description": "Total deleted time (in seconds).",
            "format": "double",
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "Sale report model."
      },
      "SaleReportProductEntry": {
        "type": "object",
        "properties": {
          "productName": {
            "type": "string",
            "description": "Product name.",
            "nullable": true
          },
          "quantity": {
            "type": "number",
            "description": "Quantity.",
            "format": "double"
          },
          "total": {
            "type": "number",
            "description": "Total sum.",
            "format": "double"
          },
          "type": {
            "$ref": "#/components/schemas/ReportEntryType"
          }
        },
        "additionalProperties": false,
        "description": "Sale report product entry model."
      },
      "SaleSummaryReport": {
        "type": "object",
        "properties": {
          "invoicePaymentTotal": {
            "type": "number",
            "description": "Total amount on invoices.",
            "format": "double"
          },
          "invoicePaymentCount": {
            "type": "integer",
            "description": "Total payments on invoices.",
            "format": "int32"
          },
          "depositPaymentTotal": {
            "type": "number",
            "description": "Total amount on desposits.",
            "format": "double"
          },
          "depositPaymentCount": {
            "type": "integer",
            "description": "Total payments on deposits.",
            "format": "int32"
          },
          "paymentTotal": {
            "type": "number",
            "description": "Total payments amount.",
            "format": "double",
            "readOnly": true
          },
          "totalPaymentCount": {
            "type": "integer",
            "description": "Total payments count.",
            "format": "int32",
            "readOnly": true
          },
          "total": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "outstanding": {
            "type": "number",
            "description": "Gets or sets outstanding amount.",
            "format": "double"
          },
          "tax": {
            "type": "number",
            "description": "Total tax sum.",
            "format": "double"
          },
          "cost": {
            "type": "number",
            "description": "Total cost sum.",
            "format": "double"
          },
          "net": {
            "type": "number",
            "description": "Total net sum.",
            "format": "double"
          },
          "revenue": {
            "type": "number",
            "description": "Total revenue sum.",
            "format": "double"
          },
          "withdrawals": {
            "type": "number",
            "format": "double"
          },
          "proceeds": {
            "type": "number",
            "format": "double"
          },
          "nonDepositSales": {
            "type": "number",
            "format": "double"
          },
          "proceedsCurrent": {
            "type": "number",
            "format": "double"
          },
          "proceedsPrevious": {
            "type": "number",
            "format": "double"
          },
          "refundsTotal": {
            "type": "number",
            "description": "Total amount of refunds.",
            "format": "double"
          },
          "cashRefunds": {
            "type": "number",
            "description": "Total amount of refunds in cash.",
            "format": "double"
          },
          "depositRefunds": {
            "type": "number",
            "description": "Total amount of refunds in deposits.",
            "format": "double"
          },
          "invoiceCount": {
            "type": "integer",
            "format": "int32"
          },
          "invoiced": {
            "type": "number",
            "format": "double"
          },
          "voidedInvoicesCount": {
            "type": "integer",
            "format": "int32"
          },
          "voidedInvocesSubTotal": {
            "type": "number",
            "format": "double"
          },
          "voidedInvocesTotal": {
            "type": "number",
            "format": "double"
          },
          "payInsOutsTotal": {
            "type": "number",
            "description": "Total amount of pay ins/outs.",
            "format": "double"
          },
          "paymentsByMethod": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/InvoicePaymentSummary"
            },
            "nullable": true
          },
          "invoicedByOperator": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/OperatorInvoicePaymentSummary"
            },
            "nullable": true
          },
          "withdrawalsByOperator": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/OperatorBasicSummary"
            },
            "nullable": true
          },
          "proceedsByMethod": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/InvoicePaymentSummary"
            },
            "nullable": true
          },
          "proceedsByOperator": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/OperatorInvoicePaymentSummary"
            },
            "nullable": true
          },
          "voidsByOperator": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/OperatorBasicSummary"
            },
            "nullable": true
          },
          "refundsByOperator": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/OperatorBasicSummary"
            },
            "nullable": true
          },
          "refundsByMethod": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/InvoicePaymentSummary"
            },
            "nullable": true
          },
          "totalsByOperator": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/OperatorBasicSummary"
            },
            "nullable": true
          },
          "payInsOutsByOperator": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/OperatorBasicSummary"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Sale summary report model."
      },
      "SchedulerConfig": {
        "type": "object",
        "properties": {
          "tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReportScheduledTask"
            },
            "description": "Gets scheduler tasks.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Scheduler configuration class."
      },
      "ServiceBackupConfig": {
        "type": "object",
        "properties": {
          "isEnabled": {
            "type": "boolean",
            "description": "Gets or sets if backup is enabled.",
            "default": true
          },
          "backupFolder": {
            "type": "string",
            "description": "Gets or sets backup folder.",
            "nullable": true
          },
          "maxFiles": {
            "type": "integer",
            "description": "Gets or sets maximum amount of backup files to keep.",
            "format": "int32",
            "default": 30
          },
          "time": {
            "$ref": "#/components/schemas/TimeSpan"
          }
        },
        "additionalProperties": false,
        "description": "Service backup configuration class."
      },
      "ServiceConfig": {
        "type": "object",
        "properties": {
          "network": {
            "$ref": "#/components/schemas/ServiceNetworkConfig"
          },
          "database": {
            "$ref": "#/components/schemas/ServiceDatabaseConfig"
          },
          "web": {
            "$ref": "#/components/schemas/ServiceWebConfig"
          },
          "fileSystem": {
            "$ref": "#/components/schemas/ServiceFileSystemConfig"
          },
          "general": {
            "$ref": "#/components/schemas/ServiceGeneralConfig"
          },
          "backup": {
            "$ref": "#/components/schemas/ServiceBackupConfig"
          },
          "smtp": {
            "$ref": "#/components/schemas/SMTPConfig"
          },
          "smsGateway": {
            "$ref": "#/components/schemas/SMSGatewayConfig"
          },
          "scheduler": {
            "$ref": "#/components/schemas/SchedulerConfig"
          }
        },
        "additionalProperties": false,
        "description": "Service configuration class."
      },
      "ServiceDatabaseConfig": {
        "type": "object",
        "properties": {
          "dbType": {
            "$ref": "#/components/schemas/DatabaseType"
          },
          "dbConnectionString": {
            "type": "string",
            "description": "Gets or sets database connection string.",
            "default": null,
            "nullable": true
          },
          "commandTimeout": {
            "type": "integer",
            "description": "Database command timeout.",
            "format": "int32",
            "default": null,
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Service database configuration class."
      },
      "ServiceFileSystemConfig": {
        "required": [
          "defaultsUserDataPath",
          "usersDataPath"
        ],
        "type": "object",
        "properties": {
          "usersDataPath": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Gets or sets path to the user data storage.",
            "default": "UserData"
          },
          "defaultsUserDataPath": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Gets the path to users profile defaults directory.",
            "default": "DefaultUserFiles"
          }
        },
        "additionalProperties": false,
        "description": "Service file system configuration class."
      },
      "ServiceGeneralConfig": {
        "type": "object",
        "properties": {
          "terminatePendingSessions": {
            "type": "boolean",
            "description": "Gets or sets if pending session should terminate.",
            "default": true
          },
          "pendingSessionTimeout": {
            "type": "integer",
            "description": "Gets or sets timeout for pending user sessions.",
            "format": "int32",
            "default": 180
          },
          "forceUserBalanceReprocess": {
            "type": "boolean",
            "description": "Gets or sets if user balance reprocessing should be forced."
          },
          "autoUpdateClient": {
            "type": "boolean",
            "description": "Enables or disables client auto update.",
            "default": true
          },
          "autoDowngradeClient": {
            "type": "boolean",
            "description": "Gets or sets client auto downgrade should be enabled.",
            "default": true
          },
          "memberAutoInvoice": {
            "$ref": "#/components/schemas/AutoInvoiceConfig"
          },
          "guestAutoInvoice": {
            "$ref": "#/components/schemas/AutoInvoiceConfig"
          },
          "automaticReloginMembers": {
            "type": "boolean",
            "description": "Gets or sets if members should relogin automatically.",
            "default": false
          },
          "automaticReloginGuests": {
            "type": "boolean",
            "description": "Gets or sets if guests should relogin automatically.",
            "default": false
          },
          "logoutDisconnectedClients": {
            "type": "boolean",
            "description": "Gets or sets if disconnected clients should logout.",
            "default": false
          },
          "withholdUnpaidSessionDeposits": {
            "type": "boolean",
            "description": "Gets or sets if should withhold unpaid session deposits.",
            "default": false
          },
          "autoLoginGuestsAfterDepositOrTimeSale": {
            "type": "boolean",
            "description": "Gets or sets if should auto login guests after deposit or time sale.",
            "default": false
          },
          "executeBatchFilesOnComputers": {
            "type": "boolean",
            "description": "Gets or sets if should execute batch files on computers.",
            "default": false
          },
          "ageHourRestrictions": {
            "$ref": "#/components/schemas/AgeHourRestrictionConfig"
          }
        },
        "additionalProperties": false,
        "description": "Service general configuration class."
      },
      "ServiceNetworkConfig": {
        "type": "object",
        "properties": {
          "bindInterfaceID": {
            "type": "string",
            "description": "Gtes or Sets the network interface id that the service is bound to.",
            "default": null,
            "nullable": true
          },
          "bindIpAddress": {
            "type": "string",
            "description": "Gets or sets bind network address.",
            "default": "0.0.0.0",
            "nullable": true
          },
          "bindPort": {
            "maximum": 65536,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets integer binding port value.",
            "format": "int32",
            "default": 44966
          },
          "managerBindPort": {
            "maximum": 65536,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets manager connections bind port.",
            "format": "int32",
            "default": 44967
          },
          "backLog": {
            "maximum": 255,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets ineteger backlog value.",
            "format": "int32",
            "default": 10
          },
          "multicastIpAddress": {
            "type": "string",
            "description": "Gets or sets the Multicasting Ip Address string.",
            "default": "224.0.0.0",
            "nullable": true
          },
          "multicastPort": {
            "maximum": 65536,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets Multicasting port.",
            "format": "int32",
            "default": 47874
          },
          "multicastTtl": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "description": "Gets or sets Multicasting Time to live.",
            "format": "int32",
            "default": 0
          },
          "registeredOnly": {
            "type": "boolean",
            "description": "Gets or sets registered only option.",
            "default": false
          },
          "restoreHostnames": {
            "type": "boolean",
            "description": "Gets or sets if the hostnames should be restored on client machines.",
            "default": false
          },
          "autoDiscoverClients": {
            "type": "boolean",
            "description": "Gets or sets if client auto discovery should be enabled.",
            "default": true
          }
        },
        "additionalProperties": false,
        "description": "Service network configuration class."
      },
      "ServiceNetworkStats": {
        "type": "object",
        "properties": {
          "dataSent": {
            "type": "integer",
            "description": "Total data sent.",
            "format": "int64"
          },
          "dataReceived": {
            "type": "integer",
            "description": "Total data received.",
            "format": "int64"
          },
          "clients": {
            "type": "integer",
            "description": "Total number for connected clients.",
            "format": "int32"
          },
          "managers": {
            "type": "integer",
            "description": "Total number of connected managers.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Service network stats."
      },
      "ServiceWebConfig": {
        "type": "object",
        "properties": {
          "enableWebProtal": {
            "type": "boolean",
            "description": "Gets or sets if web portal enabled.",
            "default": true
          },
          "webPortalPort": {
            "maximum": 65536,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets web portal port.",
            "format": "int32",
            "default": 80
          },
          "enableSSL": {
            "type": "boolean",
            "description": "Gets or sets if HTTPs connections should be enabled.",
            "default": false
          },
          "sslPort": {
            "maximum": 65536,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets if HTTPs port.",
            "format": "int32",
            "default": 443
          },
          "pfxPath": {
            "type": "string",
            "description": "Gets or sets PFX file path.",
            "default": null,
            "nullable": true
          },
          "pfxPassword": {
            "type": "string",
            "description": "Gets or sets PFX file password.",
            "default": null,
            "nullable": true
          },
          "tokenSecret": {
            "type": "string",
            "description": "Gets or sets Token secret.",
            "default": null,
            "nullable": true
          },
          "externalHost": {
            "type": "string",
            "description": "Gets or sets external host name.",
            "default": "localhost",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Service web configuration class."
      },
      "SessionState": {
        "enum": [
          0,
          1,
          2,
          5,
          9,
          17,
          33
        ],
        "type": "integer",
        "description": "User session states.",
        "format": "int32"
      },
      "SessionsLogReportDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Report Name.",
            "nullable": true
          },
          "dateFrom": {
            "type": "string",
            "description": "Filtered Date From.",
            "format": "date-time"
          },
          "dateTo": {
            "type": "string",
            "description": "Filtered Date To.",
            "format": "date-time"
          },
          "companyName": {
            "type": "string",
            "description": "Company Name.",
            "nullable": true
          },
          "reportType": {
            "$ref": "#/components/schemas/ReportTypes"
          },
          "userId": {
            "type": "integer",
            "description": "Filtered User Id.",
            "format": "int32",
            "nullable": true
          },
          "userName": {
            "type": "string",
            "description": "Filtered User Name.",
            "nullable": true
          },
          "hostId": {
            "type": "integer",
            "description": "Filtered Host Id.",
            "format": "int32",
            "nullable": true
          },
          "hostName": {
            "type": "string",
            "description": "Filtered Host Name.",
            "nullable": true
          },
          "operatorId": {
            "type": "integer",
            "description": "Filtered Operator Id.",
            "format": "int32",
            "nullable": true
          },
          "operatorName": {
            "type": "string",
            "description": "Filtered Operator Name.",
            "nullable": true
          },
          "sessions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserSessionDetailsDTO"
            },
            "description": "List of sessions within the reporting period.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Sessions Log Report."
      },
      "Sex": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "description": "Sex enumeration.",
        "format": "int32"
      },
      "ShiftDTO": {
        "type": "object",
        "properties": {
          "shiftId": {
            "type": "integer",
            "description": "Shift Id.",
            "format": "int32"
          },
          "isActive": {
            "type": "boolean",
            "description": "The shift is active."
          },
          "startCash": {
            "type": "number",
            "description": "Cash amount the shift started with.",
            "format": "double"
          },
          "registerId": {
            "type": "integer",
            "description": "The Id of the register on which the shift was started.",
            "format": "int32"
          },
          "registerName": {
            "type": "string",
            "description": "The name of the register on which the shift was started.",
            "nullable": true
          },
          "operatorName": {
            "type": "string",
            "description": "The name of the operator to which the shift belongs.",
            "nullable": true
          },
          "endedByOperatorName": {
            "type": "string",
            "description": "The name of the operator who ended the shift.",
            "nullable": true
          },
          "startTime": {
            "type": "string",
            "description": "The time the shift started.",
            "format": "date-time"
          },
          "endTime": {
            "type": "string",
            "description": "The time the shift ended or null if is still active.",
            "format": "date-time",
            "nullable": true
          },
          "durationMinutes": {
            "type": "integer",
            "description": "Duration of the shift in minutes.",
            "format": "int32"
          },
          "duration": {
            "type": "string",
            "description": "Duration of the shift as text.",
            "nullable": true
          },
          "expected": {
            "type": "number",
            "description": "Amount expected the shift to end with.",
            "format": "double"
          },
          "actual": {
            "type": "number",
            "description": "Actual amount the shift ended with.",
            "format": "double",
            "nullable": true
          },
          "difference": {
            "type": "number",
            "description": "Difference between the expected and the actual amount.",
            "format": "double",
            "nullable": true
          },
          "sales": {
            "type": "number",
            "description": "Total amount of sales in this shift.",
            "format": "double"
          },
          "deposits": {
            "type": "number",
            "description": "Total amount of deposits in this shift.",
            "format": "double"
          },
          "withdrawals": {
            "type": "number",
            "description": "Total amount of withdrawals in this shift.",
            "format": "double"
          },
          "refunds": {
            "type": "number",
            "description": "Total amount of refunds in this shift.",
            "format": "double"
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShiftDetailsDTO"
            },
            "description": "List of shift details by payment method.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Shift Information."
      },
      "ShiftDetailsDTO": {
        "type": "object",
        "properties": {
          "paymentMethodName": {
            "type": "string",
            "description": "Payment method name.",
            "nullable": true
          },
          "startCash": {
            "type": "number",
            "description": "Cash amount the shift started with for this payment method.",
            "format": "double"
          },
          "sales": {
            "type": "number",
            "description": "Total amount of sales in this shift for this payment method.",
            "format": "double"
          },
          "deposits": {
            "type": "number",
            "description": "Total amount of deposits in this shift for this payment method.",
            "format": "double"
          },
          "withdrawals": {
            "type": "number",
            "description": "Total amount of withdrawals in this shift for this payment method.",
            "format": "double"
          },
          "refunds": {
            "type": "number",
            "description": "Total amount of refunds in this shift for this payment method.",
            "format": "double"
          },
          "payIns": {
            "type": "number",
            "description": "Total amount of pay ins in this shift for this payment method.",
            "format": "double"
          },
          "payOuts": {
            "type": "number",
            "description": "Total amount of pay outs in this shift for this payment method.",
            "format": "double"
          },
          "expected": {
            "type": "number",
            "description": "Amount expected the shift to end with for this payment method.",
            "format": "double"
          },
          "actual": {
            "type": "number",
            "description": "Actual amount the shift ended with for this payment method.",
            "format": "double"
          },
          "difference": {
            "type": "number",
            "description": "Difference between the expected and the actual amount for this payment method.",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Shift Details."
      },
      "ShiftsLogReportDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Report Name.",
            "nullable": true
          },
          "dateFrom": {
            "type": "string",
            "description": "Filtered Date From.",
            "format": "date-time"
          },
          "dateTo": {
            "type": "string",
            "description": "Filtered Date To.",
            "format": "date-time"
          },
          "companyName": {
            "type": "string",
            "description": "Company Name.",
            "nullable": true
          },
          "reportType": {
            "$ref": "#/components/schemas/ReportTypes"
          },
          "operatorId": {
            "type": "integer",
            "description": "Filtered Operator Id.",
            "format": "int32",
            "nullable": true
          },
          "operatorName": {
            "type": "string",
            "description": "Filtered Operator Name.",
            "nullable": true
          },
          "registerId": {
            "type": "integer",
            "description": "Filtered Register Id.",
            "format": "int32",
            "nullable": true
          },
          "registerName": {
            "type": "string",
            "description": "Filtered Register Name.",
            "nullable": true
          },
          "shiftsLogReportType": {
            "$ref": "#/components/schemas/ShiftsLogReportTypes"
          },
          "shifts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShiftDTO"
            },
            "description": "Report Shifts.",
            "nullable": true
          },
          "totalExpectedExcludingStartCashActive": {
            "type": "number",
            "description": "Total amount expected the active shifts to end with excluding start cash.",
            "format": "double",
            "nullable": true
          },
          "totalDuration": {
            "type": "string",
            "description": "Total duration of the shifts as text.",
            "nullable": true
          },
          "totalExpectedExcludingStartCash": {
            "type": "number",
            "description": "Total amount expected the shifts to end with excluding start cash.",
            "format": "double",
            "nullable": true
          },
          "totalDifference": {
            "type": "number",
            "description": "Total difference between the expected and the actual amount.",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Shifts Log Report."
      },
      "ShiftsLogReportTypes": {
        "enum": [
          1,
          2
        ],
        "type": "integer",
        "description": "Specifies the report type of the shift log report.",
        "format": "int32"
      },
      "SoldProductDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Product Id.",
            "format": "int32"
          },
          "productName": {
            "type": "string",
            "description": "Product name.",
            "nullable": true
          },
          "unitPrice": {
            "type": "number",
            "description": "The unit price of the product.",
            "format": "double"
          },
          "unitCost": {
            "type": "number",
            "description": "The unit cost of the product.",
            "format": "double"
          },
          "quantity": {
            "type": "number",
            "description": "The number of items sold of the product.",
            "format": "double"
          },
          "totalCost": {
            "type": "number",
            "description": "The total cost of the products.",
            "format": "double"
          },
          "value": {
            "type": "number",
            "description": "The cost of the product.",
            "format": "double"
          },
          "pointsValue": {
            "type": "integer",
            "description": "The cost in points of the product.",
            "format": "int32"
          },
          "pointsAward": {
            "type": "integer",
            "description": "The points award of the product.",
            "format": "int32"
          },
          "taxRate": {
            "type": "number",
            "description": "The tax rate of the product.",
            "format": "double"
          },
          "tax": {
            "type": "number",
            "description": "The tax amount of the product.",
            "format": "double"
          },
          "isInBundle": {
            "type": "boolean",
            "description": "The product has been sold as part of a bundle."
          }
        },
        "additionalProperties": false,
        "description": "Sold Product Information."
      },
      "StockOptionType": {
        "enum": [
          0,
          1,
          2,
          4,
          8
        ],
        "type": "integer",
        "description": "Stock options.",
        "format": "int32"
      },
      "StockReportDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Report Name.",
            "nullable": true
          },
          "dateFrom": {
            "type": "string",
            "description": "Filtered Date From.",
            "format": "date-time"
          },
          "dateTo": {
            "type": "string",
            "description": "Filtered Date To.",
            "format": "date-time"
          },
          "companyName": {
            "type": "string",
            "description": "Company Name.",
            "nullable": true
          },
          "reportType": {
            "$ref": "#/components/schemas/ReportTypes"
          },
          "products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductStockDTO"
            },
            "description": "List of products with stock.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Stock Report."
      },
      "StockTransaction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Gets or sets primary id.",
            "format": "int32"
          },
          "createdById": {
            "type": "integer",
            "description": "Gets or sets created by id.",
            "format": "int32",
            "nullable": true
          },
          "createdTime": {
            "type": "string",
            "description": "Gets or sets created time.",
            "format": "date-time"
          },
          "modifiedById": {
            "type": "integer",
            "description": "Gets or sets modified by id.",
            "format": "int32",
            "nullable": true
          },
          "modifiedTime": {
            "type": "string",
            "description": "Gets or sets last modified time.",
            "format": "date-time",
            "nullable": true
          },
          "productId": {
            "type": "integer",
            "description": "Gets or sets product id.",
            "format": "int32"
          },
          "sourceProductId": {
            "type": "integer",
            "description": "Gets or sets source product id.",
            "format": "int32",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/StockTransactionType"
          },
          "amount": {
            "type": "number",
            "description": "Gets or sets transaction amount.",
            "format": "double"
          },
          "onHand": {
            "type": "number",
            "description": "Gets or sets on hand stock amount.",
            "format": "double"
          },
          "sourceProductAmount": {
            "type": "number",
            "description": "Gets or sets amount of source product.",
            "format": "double",
            "nullable": true
          },
          "sourceProductOnHand": {
            "type": "number",
            "description": "Gets or sets amount of source product on hand.",
            "format": "double",
            "nullable": true
          },
          "isVoided": {
            "type": "boolean",
            "description": "Gets or sets if voided."
          },
          "shiftId": {
            "type": "integer",
            "description": "Gets or sets shift id.",
            "format": "int32",
            "nullable": true
          },
          "registerId": {
            "type": "integer",
            "description": "Gets or sets register id.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Stock transaction entity."
      },
      "StockTransactionType": {
        "enum": [
          0,
          1,
          2,
          3,
          4
        ],
        "type": "integer",
        "description": "Stock transaction type.",
        "format": "int32"
      },
      "TimeLeftWarningType": {
        "enum": [
          0,
          1,
          2,
          4,
          7
        ],
        "type": "integer",
        "description": "Time left warning types.",
        "format": "int32"
      },
      "TimeNotification": {
        "type": "object",
        "properties": {
          "timeLeftWarning": {
            "type": "integer",
            "description": "The minute of the notification.",
            "format": "int32"
          },
          "timeLeftWarningType": {
            "$ref": "#/components/schemas/TimeLeftWarningType"
          }
        },
        "additionalProperties": false,
        "description": "Time notification."
      },
      "TimePointAwardOptionType": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "description": "Time product award options.",
        "format": "int32"
      },
      "TimeSpan": {
        "type": "object",
        "properties": {
          "hours": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "minutes": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "seconds": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "milliseconds": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "ticks": {
            "type": "integer",
            "format": "int64"
          },
          "days": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "totalDays": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "totalHours": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "totalMilliseconds": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "totalMinutes": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "totalSeconds": {
            "type": "number",
            "format": "double",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "TimeUsageChartRecordDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the chart record.",
            "nullable": true
          },
          "value": {
            "type": "number",
            "description": "The value of the chart record.",
            "format": "double"
          },
          "voids": {
            "type": "integer",
            "description": "Number of products that was used before void.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Chart record for the usage of time products."
      },
      "TopUserInfoDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "User Id.",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "User name.",
            "nullable": true
          },
          "score": {
            "type": "number",
            "description": "The score the user achieved.",
            "format": "double"
          },
          "scoreText": {
            "type": "string",
            "description": "The score the user achieved as text.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Top User Info."
      },
      "TopUsersReportDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Report Name.",
            "nullable": true
          },
          "dateFrom": {
            "type": "string",
            "description": "Filtered Date From.",
            "format": "date-time"
          },
          "dateTo": {
            "type": "string",
            "description": "Filtered Date To.",
            "format": "date-time"
          },
          "companyName": {
            "type": "string",
            "description": "Company Name.",
            "nullable": true
          },
          "reportType": {
            "$ref": "#/components/schemas/ReportTypes"
          },
          "topUsersNumber": {
            "type": "integer",
            "description": "Filtered number of top users to display.",
            "format": "int32"
          },
          "memberCounters": {
            "$ref": "#/components/schemas/MemberCountersDTO"
          },
          "topSpenders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TopUsersReportUserGroupDTO"
            },
            "description": "List of top spenders grouped by user group.",
            "nullable": true
          },
          "topPointEarners": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TopUsersReportUserGroupDTO"
            },
            "description": "List of top point earners grouped by user group.",
            "nullable": true
          },
          "topPointSpenders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TopUsersReportUserGroupDTO"
            },
            "description": "List of top point spenders grouped by user group.",
            "nullable": true
          },
          "topSessions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TopUsersReportUserGroupDTO"
            },
            "description": "List of top users based on total usage time grouped by user group.",
            "nullable": true
          },
          "topSessionDuration": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TopUsersReportUserGroupDTO"
            },
            "description": "List of top users based on longest session grouped by user group.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Top Users Report."
      },
      "TopUsersReportUserGroupDTO": {
        "type": "object",
        "properties": {
          "userGroupName": {
            "type": "string",
            "description": "User Group Name.",
            "nullable": true
          },
          "topUsers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TopUserInfoDTO"
            },
            "description": "List of users within this group.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Top Users Report User Group."
      },
      "TransactionsLogActionTypes": {
        "enum": [
          1,
          2,
          3,
          4,
          5
        ],
        "type": "integer",
        "description": "Action types included in transactions log report.",
        "format": "int32"
      },
      "TransactionsLogReportDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Report Name.",
            "nullable": true
          },
          "dateFrom": {
            "type": "string",
            "description": "Filtered Date From.",
            "format": "date-time"
          },
          "dateTo": {
            "type": "string",
            "description": "Filtered Date To.",
            "format": "date-time"
          },
          "companyName": {
            "type": "string",
            "description": "Company Name.",
            "nullable": true
          },
          "reportType": {
            "$ref": "#/components/schemas/ReportTypes"
          },
          "operatorId": {
            "type": "integer",
            "description": "Filtered Operator Id.",
            "format": "int32",
            "nullable": true
          },
          "operatorName": {
            "type": "string",
            "description": "Filtered Operator Name.",
            "nullable": true
          },
          "registerId": {
            "type": "integer",
            "description": "Filtered Register Id.",
            "format": "int32",
            "nullable": true
          },
          "registerName": {
            "type": "string",
            "description": "Filtered Register Name.",
            "nullable": true
          },
          "userId": {
            "type": "integer",
            "description": "Filtered User Id.",
            "format": "int32",
            "nullable": true
          },
          "userName": {
            "type": "string",
            "description": "Filtered User Name.",
            "nullable": true
          },
          "transactionsLogActionType": {
            "$ref": "#/components/schemas/TransactionsLogActionTypes"
          },
          "transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OperatorTransactionDTO"
            },
            "description": "List of operator transactions.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Transactions Log Report."
      },
      "UserAttribute": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Gets or sets primary id.",
            "format": "int32"
          },
          "createdById": {
            "type": "integer",
            "description": "Gets or sets created by id.",
            "format": "int32",
            "nullable": true
          },
          "createdTime": {
            "type": "string",
            "description": "Gets or sets created time.",
            "format": "date-time"
          },
          "modifiedById": {
            "type": "integer",
            "description": "Gets or sets modified by id.",
            "format": "int32",
            "nullable": true
          },
          "modifiedTime": {
            "type": "string",
            "description": "Gets or sets last modified time.",
            "format": "date-time",
            "nullable": true
          },
          "userId": {
            "type": "integer",
            "description": "Gets or sets user id.",
            "format": "int32"
          },
          "attributeId": {
            "type": "integer",
            "description": "Gets or sets attribute id.",
            "format": "int32"
          },
          "value": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Gets or sets attribute value.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "User attribute entity."
      },
      "UserBalance": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "description": "Gets or sets user id.",
            "format": "int32"
          },
          "deposits": {
            "type": "number",
            "description": "Gets or sets total user deposits.",
            "format": "double"
          },
          "points": {
            "type": "integer",
            "description": "Gets or sets total user points.",
            "format": "int32"
          },
          "onInvoices": {
            "type": "number",
            "description": "Gets or sets total outstanding amount on invoices.",
            "format": "double"
          },
          "onInvoicedUsage": {
            "type": "number",
            "description": "Gets or sets total outstanding amount on invoiced usage sessions.",
            "format": "double"
          },
          "onUninvoicedUsage": {
            "type": "number",
            "description": "Gets or sets total outstanding amount on current active usage session.",
            "format": "double"
          },
          "timeProduct": {
            "type": "number",
            "description": "Gets total amount of time on time product purchases.",
            "format": "double"
          },
          "timeFixed": {
            "type": "number",
            "description": "Gets or sets total amount of time on fixed time purchases.",
            "format": "double"
          },
          "availableTime": {
            "type": "number",
            "description": "Gets or sets total time based on user deposits and time products.",
            "format": "double",
            "nullable": true
          },
          "availableCreditedTime": {
            "type": "number",
            "description": "Gets or sets total time based on user deposits and time products.\r\nThis value also includes time based on credit limit.",
            "format": "double",
            "nullable": true
          },
          "balance": {
            "type": "number",
            "description": "Gets current balance.",
            "format": "double",
            "readOnly": true
          },
          "timeProductBalance": {
            "type": "number",
            "description": "Gets time balance on product time.",
            "format": "double",
            "readOnly": true
          },
          "usageBalance": {
            "type": "number",
            "description": "Gets usage session balance.",
            "format": "double",
            "readOnly": true
          },
          "totalOutstanding": {
            "type": "number",
            "description": "Gets total outstanding.",
            "format": "double",
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "User balance class."
      },
      "UserDTO": {
        "type": "object",
        "properties": {
          "userName": {
            "type": "string",
            "description": "User's username.",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "description": "User's first name.",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "User's last name.",
            "nullable": true
          },
          "birthDate": {
            "type": "string",
            "description": "User's birth date.",
            "format": "date-time",
            "nullable": true
          },
          "registered": {
            "type": "string",
            "description": "Registration date of the user.",
            "format": "date-time"
          },
          "groupId": {
            "type": "integer",
            "description": "The Id of the group to which the user belongs.",
            "format": "int32"
          },
          "groupName": {
            "type": "string",
            "description": "The name of the group to which the user belongs.",
            "nullable": true
          },
          "country": {
            "type": "string",
            "description": "User's country.",
            "nullable": true
          },
          "city": {
            "type": "string",
            "description": "User's city.",
            "nullable": true
          },
          "address": {
            "type": "string",
            "description": "User's address.",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "User's e-mail.",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "description": "User's phone number.",
            "nullable": true
          },
          "mobilePhone": {
            "type": "string",
            "description": "User's mobile phone number.",
            "nullable": true
          },
          "postCode": {
            "type": "string",
            "description": "User's postal code.",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "description": "User Id.",
            "format": "int32"
          },
          "sex": {
            "$ref": "#/components/schemas/Sex"
          },
          "isBanned": {
            "type": "boolean",
            "description": "User is banned."
          }
        },
        "additionalProperties": false,
        "description": "User's Information."
      },
      "UserGeneralReport": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "description": "User id.",
            "format": "int32"
          },
          "created": {
            "type": "string",
            "description": "User creation date.",
            "format": "date-time"
          },
          "totalPoints": {
            "type": "integer",
            "description": "Total amount of points earned.",
            "format": "int32"
          },
          "totalPointsRedeemed": {
            "type": "integer",
            "description": "Total points redeemed.",
            "format": "int32"
          },
          "totalDeposits": {
            "type": "number",
            "description": "Total amount of deposits.",
            "format": "double"
          },
          "totalWitdrawals": {
            "type": "number",
            "description": "Total amount of withdrawals.",
            "format": "double"
          },
          "totalSpent": {
            "type": "number",
            "description": "Total spent.",
            "format": "double"
          },
          "totalProductSpent": {
            "type": "number",
            "description": "Total spent on products.",
            "format": "double"
          },
          "totalSessionSpent": {
            "type": "number",
            "description": "Total amount spent on session.",
            "format": "double"
          },
          "totalTimeProductSpent": {
            "type": "number",
            "description": "Total amount spent on time products.",
            "format": "double"
          },
          "totalSessions": {
            "type": "integer",
            "description": "Total login sessions.",
            "format": "int32"
          },
          "totalSessionTime": {
            "type": "number",
            "description": "Total session time.",
            "format": "double"
          },
          "totalFixedTimeSpent": {
            "type": "number",
            "description": "Total amount sepnt on fixed time.",
            "format": "double"
          },
          "membershipDuration": {
            "$ref": "#/components/schemas/TimeSpan"
          },
          "totalTimeSpent": {
            "type": "number",
            "description": "Total amount spent on time.",
            "format": "double",
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "User general report model."
      },
      "UserGroup": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Gets or sets primary id.",
            "format": "int32"
          },
          "createdById": {
            "type": "integer",
            "description": "Gets or sets created by id.",
            "format": "int32",
            "nullable": true
          },
          "createdTime": {
            "type": "string",
            "description": "Gets or sets created time.",
            "format": "date-time"
          },
          "modifiedById": {
            "type": "integer",
            "description": "Gets or sets modified by id.",
            "format": "int32",
            "nullable": true
          },
          "modifiedTime": {
            "type": "string",
            "description": "Gets or sets last modified time.",
            "format": "date-time",
            "nullable": true
          },
          "name": {
            "maxLength": 45,
            "minLength": 0,
            "type": "string",
            "description": "Gets or sets name."
          },
          "description": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Gets or sets description.",
            "nullable": true
          },
          "appGroupId": {
            "type": "integer",
            "description": "Gets or sets app profile id.",
            "format": "int32",
            "nullable": true
          },
          "securityProfileId": {
            "type": "integer",
            "description": "Gets or sets security profile id.",
            "format": "int32",
            "nullable": true
          },
          "billProfileId": {
            "type": "integer",
            "description": "Gets or sets bill profile id.",
            "format": "int32",
            "nullable": true
          },
          "requiredUserInfo": {
            "$ref": "#/components/schemas/UserInfoTypes"
          },
          "overrides": {
            "$ref": "#/components/schemas/GroupOverrides"
          },
          "options": {
            "$ref": "#/components/schemas/UserGroupOptionType"
          },
          "creditLimitOptions": {
            "$ref": "#/components/schemas/CreditLimitOptionType"
          },
          "isNegativeBalanceAllowed": {
            "type": "boolean",
            "description": "Gets or sets if user group allows negative balance."
          },
          "creditLimit": {
            "type": "number",
            "description": "Gets or sets credit limit.",
            "format": "double"
          },
          "pointsAwardOptions": {
            "$ref": "#/components/schemas/TimePointAwardOptionType"
          },
          "pointsMoneyRatio": {
            "type": "number",
            "description": "Gets or sets points money ratio.",
            "format": "double"
          },
          "pointsTimeRatio": {
            "type": "integer",
            "description": "Gets or sets points time multiplier.",
            "format": "int32"
          },
          "points": {
            "type": "integer",
            "description": "Gets or sets amount of points to award.",
            "format": "int32",
            "nullable": true
          },
          "isDefault": {
            "type": "boolean",
            "description": "Gets or sets if user group is default for new users."
          },
          "isAgeRatingEnabled": {
            "type": "boolean",
            "description": "Gets or sets if age rating is enabled for the group."
          },
          "billingOptions": {
            "$ref": "#/components/schemas/BillingOption"
          },
          "waitingLinePriority": {
            "type": "integer",
            "description": "Gets or sets user group priority.",
            "format": "int32"
          },
          "isWaitingLinePriorityEnabled": {
            "type": "boolean",
            "description": "Gets or sets if waiting line priority enabled."
          }
        },
        "additionalProperties": false,
        "description": "User group entity."
      },
      "UserGroupOptionType": {
        "enum": [
          0,
          1,
          2,
          4,
          8,
          16,
          32,
          64
        ],
        "type": "integer",
        "description": "User group options.",
        "format": "int32"
      },
      "UserGroupProductsSoldDTO": {
        "type": "object",
        "properties": {
          "userGroupName": {
            "type": "string",
            "description": "User group name.",
            "nullable": true
          },
          "product": {
            "$ref": "#/components/schemas/GroupProductSoldDTO"
          }
        },
        "additionalProperties": false,
        "description": "Product sales for a user group."
      },
      "UserInfoTypes": {
        "enum": [
          0,
          1,
          2,
          4,
          8,
          16,
          32,
          64,
          128,
          256,
          512,
          1024,
          2048,
          3899,
          4096,
          8192,
          16384
        ],
        "type": "integer",
        "description": "User personal information types.",
        "format": "int32"
      },
      "UserLoginSessionInfo": {
        "type": "object",
        "properties": {
          "sessionId": {
            "type": "integer",
            "description": "Gets or sets session id.",
            "format": "int32"
          },
          "userId": {
            "type": "integer",
            "description": "Gets or sets user id.",
            "format": "int32"
          },
          "hostId": {
            "type": "integer",
            "description": "Gets or sets host id.",
            "format": "int32"
          },
          "loginTime": {
            "type": "string",
            "description": "Gets or sets login time.",
            "format": "date-time"
          },
          "loggedInById": {
            "type": "integer",
            "description": "Gets or sets logged in by user id.",
            "format": "int32",
            "nullable": true
          },
          "logoutTime": {
            "type": "string",
            "description": "Gets or sets logout time.",
            "format": "date-time",
            "nullable": true
          },
          "loggedOutById": {
            "type": "integer",
            "description": "Gets or sets logged out by user id.",
            "format": "int32",
            "nullable": true
          },
          "moveHostId": {
            "type": "integer",
            "description": "Gets or sets moved host id.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "User login dto."
      },
      "UserMember": {
        "required": [
          "guid",
          "username"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Gets or sets primary id.",
            "format": "int32"
          },
          "createdById": {
            "type": "integer",
            "description": "Gets or sets created by id.",
            "format": "int32",
            "nullable": true
          },
          "createdTime": {
            "type": "string",
            "description": "Gets or sets created time.",
            "format": "date-time"
          },
          "modifiedById": {
            "type": "integer",
            "description": "Gets or sets modified by id.",
            "format": "int32",
            "nullable": true
          },
          "modifiedTime": {
            "type": "string",
            "description": "Gets or sets last modified time.",
            "format": "date-time",
            "nullable": true
          },
          "username": {
            "maxLength": 30,
            "minLength": 0,
            "type": "string",
            "description": "Gets or sets username."
          },
          "email": {
            "maxLength": 254,
            "minLength": 0,
            "type": "string",
            "description": "Gets or sets email.",
            "nullable": true
          },
          "userGroupId": {
            "type": "integer",
            "description": "Gets or sets users group id.",
            "format": "int32"
          },
          "isNegativeBalanceAllowed": {
            "type": "boolean",
            "description": "Gets or sets if user allowed to have negative balance.",
            "nullable": true
          },
          "isPersonalInfoRequested": {
            "type": "boolean",
            "description": "Gets or sets if personal info is requested."
          },
          "billingOptions": {
            "$ref": "#/components/schemas/BillingOption"
          },
          "enableDate": {
            "type": "string",
            "description": "Gets or sets user re-enable date-time.",
            "format": "date-time",
            "nullable": true
          },
          "disabledDate": {
            "type": "string",
            "description": "Gets or sets disabled date-time.",
            "format": "date-time",
            "nullable": true
          },
          "firstName": {
            "maxLength": 45,
            "minLength": 0,
            "type": "string",
            "description": "Gets or sets first name.",
            "nullable": true
          },
          "lastName": {
            "maxLength": 45,
            "minLength": 0,
            "type": "string",
            "description": "Gets or sets last name.",
            "nullable": true
          },
          "birthDate": {
            "type": "string",
            "description": "Gets or sets birth date.",
            "format": "date-time",
            "nullable": true
          },
          "address": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Gets or sets address.",
            "nullable": true
          },
          "city": {
            "maxLength": 45,
            "minLength": 0,
            "type": "string",
            "description": "Gets or sets city.",
            "nullable": true
          },
          "country": {
            "maxLength": 45,
            "minLength": 0,
            "type": "string",
            "description": "Gets or sets country.",
            "nullable": true
          },
          "postCode": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "Gets or sets post code.",
            "nullable": true
          },
          "phone": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "Gets or sets phone number.",
            "nullable": true
          },
          "mobilePhone": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "Gets or sets mobile phone number.",
            "nullable": true
          },
          "sex": {
            "$ref": "#/components/schemas/Sex"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Gets or sets if user is deleted."
          },
          "isDisabled": {
            "type": "boolean",
            "description": "Gets or sets if user is enabled."
          },
          "guid": {
            "type": "string",
            "description": "Gets or sets item guid.",
            "format": "uuid"
          },
          "smartCardUID": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Gets or sets SmartCard UID.",
            "nullable": true
          },
          "identification": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Gets or sets identification number.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "User member entity."
      },
      "UserNote": {
        "required": [
          "text"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Gets or sets primary id.",
            "format": "int32"
          },
          "createdById": {
            "type": "integer",
            "description": "Gets or sets created by id.",
            "format": "int32",
            "nullable": true
          },
          "createdTime": {
            "type": "string",
            "description": "Gets or sets created time.",
            "format": "date-time"
          },
          "modifiedById": {
            "type": "integer",
            "description": "Gets or sets modified by id.",
            "format": "int32",
            "nullable": true
          },
          "modifiedTime": {
            "type": "string",
            "description": "Gets or sets last modified time.",
            "format": "date-time",
            "nullable": true
          },
          "userId": {
            "type": "integer",
            "description": "Gets or sets user id.",
            "format": "int32"
          },
          "userNoteOptions": {
            "$ref": "#/components/schemas/UserNoteOptions"
          },
          "text": {
            "maxLength": 65535,
            "minLength": 0,
            "type": "string",
            "description": "Gets or sets note text."
          },
          "options": {
            "$ref": "#/components/schemas/NoteOptions"
          },
          "sevirity": {
            "$ref": "#/components/schemas/NoteSeverity"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Gets or sets if note is deleted."
          }
        },
        "additionalProperties": false,
        "description": "User note entity."
      },
      "UserNoteOptions": {
        "enum": [
          0
        ],
        "type": "integer",
        "description": "User note options.",
        "format": "int32"
      },
      "UserProductTime": {
        "type": "object",
        "properties": {
          "invoiceId": {
            "type": "integer",
            "description": "Invoice id.",
            "format": "int32"
          },
          "invoiceLineId": {
            "type": "integer",
            "description": "Invoice line id.",
            "format": "int32"
          },
          "productName": {
            "type": "string",
            "description": "Product name.",
            "nullable": true
          },
          "purchaseDate": {
            "type": "string",
            "description": "Purchase date.",
            "format": "date-time"
          },
          "totalSeconds": {
            "type": "number",
            "description": "Total seconds in time product.",
            "format": "double"
          },
          "usedSeconds": {
            "type": "number",
            "description": "Total used seconds.",
            "format": "double"
          },
          "expiresAtLogout": {
            "type": "boolean",
            "description": "Indicates if product expires at logout."
          },
          "expiryDate": {
            "type": "string",
            "description": "Expiry date.",
            "format": "date-time",
            "nullable": true
          },
          "isPaid": {
            "type": "boolean",
            "description": "Indicates if product is fully paid."
          },
          "isDepleted": {
            "type": "boolean",
            "description": "Indicates if product is depelted."
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Indicates if product is deleted."
          },
          "isVoided": {
            "type": "boolean",
            "description": "Indicates if product is voided."
          },
          "isExpired": {
            "type": "boolean",
            "description": "Indicates if product expired."
          },
          "type": {
            "$ref": "#/components/schemas/UserProductTimeType"
          },
          "secondsLeft": {
            "type": "number",
            "description": "Gets seconds left.",
            "format": "double",
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "User product time DTO."
      },
      "UserProductTimeType": {
        "enum": [
          0,
          1
        ],
        "type": "integer",
        "description": "Product time purchase type enumeration.",
        "format": "int32"
      },
      "UserRecoveryMethod": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "UserReportDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Report Name.",
            "nullable": true
          },
          "dateFrom": {
            "type": "string",
            "description": "Filtered Date From.",
            "format": "date-time"
          },
          "dateTo": {
            "type": "string",
            "description": "Filtered Date To.",
            "format": "date-time"
          },
          "companyName": {
            "type": "string",
            "description": "Company Name.",
            "nullable": true
          },
          "reportType": {
            "$ref": "#/components/schemas/ReportTypes"
          },
          "user": {
            "$ref": "#/components/schemas/UserDTO"
          },
          "pointsEarned": {
            "type": "integer",
            "description": "Points earned.",
            "format": "int32"
          },
          "redeemed": {
            "type": "integer",
            "description": "Points used.",
            "format": "int32"
          },
          "logins": {
            "type": "integer",
            "description": "Number of logins.",
            "format": "int32"
          },
          "loginTime": {
            "type": "string",
            "description": "Total session time as text.",
            "nullable": true
          },
          "deposits": {
            "type": "number",
            "description": "Total amount of deposits.",
            "format": "double"
          },
          "withdrawals": {
            "type": "number",
            "description": "Total amount of withdrawals.",
            "format": "double"
          },
          "products": {
            "type": "number",
            "description": "Total amount of money spent for products.",
            "format": "double"
          },
          "fixedTime": {
            "type": "number",
            "description": "Total amount of money spent on fixed time.",
            "format": "double"
          },
          "sessions": {
            "type": "number",
            "description": "Total amount of money spent on session time.",
            "format": "double"
          },
          "timeProducts": {
            "type": "number",
            "description": "Total amount of money spent on time products.",
            "format": "double"
          },
          "moneySpend": {
            "type": "number",
            "description": "Total amount of money spent.",
            "format": "double"
          },
          "checkOutItems": {
            "type": "integer",
            "description": "Number of assets checked out.",
            "format": "int32"
          },
          "photo": {
            "type": "string",
            "description": "User's profile picture.",
            "format": "byte",
            "nullable": true
          },
          "sessionTimeChartRecords": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChartRecordDTO"
            },
            "description": "List of records for the average daily session time chart.",
            "nullable": true
          },
          "invoicesChartRecords": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChartRecordDTO"
            },
            "description": "List of records for the average daily spend chart.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "User Report."
      },
      "UserSession": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Gets or sets primary id.",
            "format": "int32"
          },
          "createdById": {
            "type": "integer",
            "description": "Gets or sets created by id.",
            "format": "int32",
            "nullable": true
          },
          "createdTime": {
            "type": "string",
            "description": "Gets or sets created time.",
            "format": "date-time"
          },
          "userId": {
            "type": "integer",
            "description": "Gets or sets user id.",
            "format": "int32"
          },
          "hostId": {
            "type": "integer",
            "description": "Gets host Id.",
            "format": "int32"
          },
          "state": {
            "$ref": "#/components/schemas/SessionState"
          },
          "span": {
            "type": "number",
            "description": "Gets total span.",
            "format": "double"
          },
          "billedSpan": {
            "type": "number",
            "description": "Gets amount of seconds billed in session active span.",
            "format": "double"
          },
          "pendTime": {
            "type": "string",
            "description": "Gets or sets session last pend time.",
            "format": "date-time",
            "nullable": true
          },
          "pendSpan": {
            "type": "number",
            "description": "Gets or sets pend span.",
            "format": "double"
          },
          "endTime": {
            "type": "string",
            "description": "Gets or sets session end time.",
            "format": "date-time",
            "nullable": true
          },
          "slot": {
            "type": "integer",
            "description": "Gets or sets session slot.",
            "format": "int32"
          },
          "pendSpanTotal": {
            "type": "number",
            "description": "Gets or sets total pend span.",
            "format": "double"
          },
          "pauseSpan": {
            "type": "number",
            "description": "Gets or sets pause span.",
            "format": "double"
          },
          "pauseSpanTotal": {
            "type": "number",
            "description": "Gets or sets total pause span.",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "User session entity."
      },
      "UserSessionDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "User Session Id.",
            "format": "int32"
          },
          "startTime": {
            "type": "string",
            "description": "The time the session started.",
            "format": "date-time"
          },
          "endTime": {
            "type": "string",
            "description": "The time the session ended, null if still active.",
            "format": "date-time",
            "nullable": true
          },
          "span": {
            "type": "number",
            "description": "Duration of the user session in seconds.",
            "format": "double"
          },
          "billedSpan": {
            "type": "number",
            "description": "Billed seconds.",
            "format": "double"
          },
          "userId": {
            "type": "integer",
            "description": "The Id of the user to which the session belongs.",
            "format": "int32"
          },
          "userGroupId": {
            "type": "integer",
            "description": "The Id of the group in which the user of the session belongs.",
            "format": "int32"
          },
          "userIsGuest": {
            "type": "boolean",
            "description": "User is guest."
          },
          "hostId": {
            "type": "integer",
            "description": "The Id of the host on which the user session ran.",
            "format": "int32"
          },
          "slot": {
            "type": "integer",
            "description": "The slot number on which the user session ran.",
            "format": "int32"
          },
          "totalMinutes": {
            "type": "number",
            "description": "Duration of the user session in minutes.",
            "format": "double"
          },
          "duration": {
            "type": "string",
            "description": "The time the session was running as text.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "User Session Information."
      },
      "UserSessionDetailsDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "User Session Id.",
            "format": "int32"
          },
          "startTime": {
            "type": "string",
            "description": "The time the session started.",
            "format": "date-time"
          },
          "endTime": {
            "type": "string",
            "description": "The time the session ended, null if still active.",
            "format": "date-time",
            "nullable": true
          },
          "span": {
            "type": "number",
            "description": "Duration of the user session in seconds.",
            "format": "double"
          },
          "billedSpan": {
            "type": "number",
            "description": "Billed seconds.",
            "format": "double"
          },
          "userId": {
            "type": "integer",
            "description": "The Id of the user to which the session belongs.",
            "format": "int32"
          },
          "userGroupId": {
            "type": "integer",
            "description": "The Id of the group in which the user of the session belongs.",
            "format": "int32"
          },
          "userIsGuest": {
            "type": "boolean",
            "description": "User is guest."
          },
          "hostId": {
            "type": "integer",
            "description": "The Id of the host on which the user session ran.",
            "format": "int32"
          },
          "slot": {
            "type": "integer",
            "description": "The slot number on which the user session ran.",
            "format": "int32"
          },
          "totalMinutes": {
            "type": "number",
            "description": "Duration of the user session in minutes.",
            "format": "double"
          },
          "duration": {
            "type": "string",
            "description": "The time the session was running as text.",
            "nullable": true
          },
          "userName": {
            "type": "string",
            "description": "The name of the user to which the session belongs.",
            "nullable": true
          },
          "hostName": {
            "type": "string",
            "description": "The name of the host on which the user session ran.",
            "nullable": true
          },
          "hostNumber": {
            "type": "integer",
            "description": "The number of the host on which the user session ran.",
            "format": "int32"
          },
          "loginOperatorId": {
            "type": "integer",
            "description": "The Id of the operator that started the session.",
            "format": "int32",
            "nullable": true
          },
          "loginOperatorName": {
            "type": "string",
            "description": "The name of the operator that started the session.",
            "nullable": true
          },
          "logoutOperatorId": {
            "type": "integer",
            "description": "The Id of the operator that ended the session.",
            "format": "int32",
            "nullable": true
          },
          "logoutOperatorName": {
            "type": "string",
            "description": "The name of the operator that ended the session.",
            "nullable": true
          },
          "moveHostName": {
            "type": "string",
            "description": "The name of the host to which the session was moved.",
            "nullable": true
          },
          "state": {
            "$ref": "#/components/schemas/SessionState"
          }
        },
        "additionalProperties": false,
        "description": "User Session Details."
      },
      "UserSessionInfoExtended": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "Gets or sets user name.",
            "nullable": true
          },
          "userId": {
            "type": "integer",
            "description": "Gets or sets user id.",
            "format": "int32"
          },
          "span": {
            "type": "number",
            "description": "Gets total session span.",
            "format": "double"
          },
          "lastLogin": {
            "type": "string",
            "description": "Gets or sets last login date time.",
            "format": "date-time",
            "nullable": true
          },
          "lastLogout": {
            "type": "string",
            "description": "Gets or sets last logout date time.",
            "format": "date-time",
            "nullable": true
          },
          "hostId": {
            "type": "integer",
            "description": "Gets or sets host id.",
            "format": "int32"
          },
          "hostName": {
            "type": "string",
            "description": "Gets or sets host name.",
            "nullable": true
          },
          "hostNumber": {
            "type": "integer",
            "description": "Gets or sets host number.",
            "format": "int32"
          },
          "userGroupName": {
            "type": "string",
            "description": "Gets or sets user group name.",
            "nullable": true
          },
          "userGroupId": {
            "type": "integer",
            "description": "Gets or sets user group id.",
            "format": "int32",
            "nullable": true
          },
          "hostGroupName": {
            "type": "string",
            "description": "Gets or sets host group name.",
            "nullable": true
          },
          "hostGroupId": {
            "type": "integer",
            "description": "Gets or sets host group id.",
            "format": "int32",
            "nullable": true
          },
          "sessionState": {
            "$ref": "#/components/schemas/SessionState"
          },
          "slot": {
            "type": "integer",
            "description": "Gets or sets session slot.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "User session info extended model."
      },
      "UserSessionStat": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "description": "Gets or sets user id.",
            "format": "int32"
          },
          "username": {
            "type": "string",
            "description": "Gets or sets user name.",
            "nullable": true
          },
          "hours": {
            "type": "string",
            "description": "Total hours.",
            "nullable": true,
            "readOnly": true
          },
          "totalSpan": {
            "$ref": "#/components/schemas/TimeSpan"
          }
        },
        "additionalProperties": false,
        "description": "User session stat dto."
      },
      "UserSpending": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "description": "User id.",
            "format": "int32"
          },
          "username": {
            "type": "string",
            "description": "User name.",
            "nullable": true
          },
          "cash": {
            "type": "number",
            "description": "Total cash spent.",
            "format": "double"
          },
          "deposits": {
            "type": "number",
            "description": "Total deposits spent.",
            "format": "double"
          },
          "creditCard": {
            "type": "number",
            "description": "Total deposits spent.",
            "format": "double"
          },
          "points": {
            "type": "integer",
            "description": "Total points spent.",
            "format": "int32"
          },
          "total": {
            "type": "number",
            "description": "Total spent.",
            "format": "double",
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "User spending DTO."
      },
      "VerificationCompleteResultCode": {
        "enum": [
          0,
          1,
          101,
          102,
          103,
          104,
          105,
          201,
          202,
          301,
          401
        ],
        "type": "integer",
        "format": "int32"
      },
      "VerificationStartResultCode": {
        "enum": [
          0,
          1,
          402,
          403,
          405,
          501,
          502
        ],
        "type": "integer",
        "format": "int32"
      },
      "VerificationStartResultModelEmail": {
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/VerificationStartResultCode"
          },
          "token": {
            "type": "string",
            "nullable": true
          },
          "codeLength": {
            "type": "integer",
            "format": "int32"
          },
          "email": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "VerificationStartResultModelMobilePhone": {
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/VerificationStartResultCode"
          },
          "token": {
            "type": "string",
            "nullable": true
          },
          "codeLength": {
            "type": "integer",
            "format": "int32"
          },
          "mobilePhone": {
            "type": "string",
            "nullable": true
          },
          "deliveryMethod": {
            "$ref": "#/components/schemas/ConfirmationCodeDeliveryMethod"
          }
        },
        "additionalProperties": false
      },
      "VoidInvoice": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Gets or sets primary id.",
            "format": "int32"
          },
          "createdById": {
            "type": "integer",
            "description": "Gets or sets created by id.",
            "format": "int32",
            "nullable": true
          },
          "createdTime": {
            "type": "string",
            "description": "Gets or sets created time.",
            "format": "date-time"
          },
          "shiftId": {
            "type": "integer",
            "description": "Gets or sets shift id.",
            "format": "int32",
            "nullable": true
          },
          "registerId": {
            "type": "integer",
            "description": "Gets or sets register id.",
            "format": "int32",
            "nullable": true
          },
          "invoiceId": {
            "type": "integer",
            "description": "Gets or sets invoice id.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Invoice void entity."
      },
      "WaitingLineConfig": {
        "type": "object",
        "properties": {
          "enableLogoutGreacePeriod": {
            "type": "boolean",
            "description": "Gets or sets if logout grace period should be enabled.",
            "default": false
          },
          "logoutGracePeriod": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets logout grace period in minutes.",
            "format": "int32",
            "default": 30
          },
          "removeFromAllOnLogin": {
            "type": "boolean",
            "description": "Gets or sets if user should be removed from all waiting lines on login.",
            "default": true
          },
          "nextInLineTime": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "description": "Gets waiting line next in line time.",
            "format": "int32",
            "default": 30
          },
          "removeTime": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "description": "Gets global waiting line remove time.",
            "format": "int32",
            "default": 30
          }
        },
        "additionalProperties": false,
        "description": "Waiting line configuration class."
      },
      "WebApiErrorBase": {
        "type": "object",
        "additionalProperties": false
      },
      "WebApiErrorResponse": {
        "type": "object",
        "properties": {
          "httpStatusCode": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "isError": {
            "type": "boolean"
          },
          "errorCodeType": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "errorCodeTypeReadable": {
            "type": "string",
            "nullable": true
          },
          "errorCode": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "errorCodeReadable": {
            "type": "string",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WebApiErrorBase"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ZDTO": {
        "type": "object",
        "properties": {
          "zId": {
            "type": "integer",
            "description": "Incremental number of the Z.",
            "format": "int32"
          },
          "openTime": {
            "type": "string",
            "description": "The time of the first Z transaction.",
            "format": "date-time"
          },
          "closeTime": {
            "type": "string",
            "description": "The time the Z was closed.",
            "format": "date-time"
          },
          "firstInvoiceId": {
            "type": "integer",
            "description": "The Id of the first invoice within the Z.",
            "format": "int32"
          },
          "lastInvoiceId": {
            "type": "integer",
            "description": "The Id of the last invoice within the Z.",
            "format": "int32"
          },
          "invoiceCount": {
            "type": "integer",
            "description": "Number of invoices within the Z.",
            "format": "int32"
          },
          "itemCount": {
            "type": "integer",
            "description": "Number of items within the Z.",
            "format": "int32"
          },
          "totalTax": {
            "type": "number",
            "description": "Z's total tax.",
            "format": "double"
          },
          "totalValue": {
            "type": "number",
            "description": "Z's total value.",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Z's Information."
      },
      "ZLogReportDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Report Name.",
            "nullable": true
          },
          "dateFrom": {
            "type": "string",
            "description": "Filtered Date From.",
            "format": "date-time"
          },
          "dateTo": {
            "type": "string",
            "description": "Filtered Date To.",
            "format": "date-time"
          },
          "companyName": {
            "type": "string",
            "description": "Company Name.",
            "nullable": true
          },
          "reportType": {
            "$ref": "#/components/schemas/ReportTypes"
          }
        },
        "additionalProperties": false,
        "description": "Z Log Report."
      },
      "ZReportDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Report Name.",
            "nullable": true
          },
          "dateFrom": {
            "type": "string",
            "description": "Filtered Date From.",
            "format": "date-time"
          },
          "dateTo": {
            "type": "string",
            "description": "Filtered Date To.",
            "format": "date-time"
          },
          "companyName": {
            "type": "string",
            "description": "Company Name.",
            "nullable": true
          },
          "reportType": {
            "$ref": "#/components/schemas/ReportTypes"
          },
          "operatorId": {
            "type": "integer",
            "description": "Filtered Operator Id.",
            "format": "int32",
            "nullable": true
          },
          "operatorName": {
            "type": "string",
            "description": "Filtered Operator Name.",
            "nullable": true
          },
          "registerId": {
            "type": "integer",
            "description": "Filtered Register Id.",
            "format": "int32",
            "nullable": true
          },
          "registerName": {
            "type": "string",
            "description": "Filtered Register Name.",
            "nullable": true
          },
          "financialReportType": {
            "$ref": "#/components/schemas/FinancialReportTypes"
          },
          "deposits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountTransactionDTO"
            },
            "description": "List of deposit operations performed during the reporting period.",
            "nullable": true
          },
          "withdrawals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountTransactionDTO"
            },
            "description": "List of withdrawal operations performed during the reporting period.",
            "nullable": true
          },
          "depositVoids": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountTransactionDTO"
            },
            "description": "List of deposit void operations performed during the reporting period.",
            "nullable": true
          },
          "groupInvoices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FinancialReportUserGroupInvoicesDTO"
            },
            "description": "List of invoices grouped based on financial report type.",
            "nullable": true
          },
          "groupVoidInvoices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FinancialReportUserGroupInvoicesDTO"
            },
            "description": "List of voided invoices grouped based on financial report type.",
            "nullable": true
          },
          "depositsSummary": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FinancialSummaryRecordDTO"
            },
            "description": "Summary of deposits grouped by payment method.",
            "nullable": true
          },
          "salesSummary": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FinancialSummaryRecordDTO"
            },
            "description": "Summary of sales grouped by payment method.",
            "nullable": true
          },
          "voidInvoicesPaidCash": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FinancialSummaryRecordDTO"
            },
            "description": "Summary of voids grouped by refund method.",
            "nullable": true
          },
          "voidInvoicesNoRefundOrUnpaid": {
            "$ref": "#/components/schemas/FinancialSummaryRecordDTO"
          },
          "pastSalesPaymentsSummary": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FinancialSummaryRecordDTO"
            },
            "description": "Summary of past sales paid within the reporting period grouped by payment method.",
            "nullable": true
          },
          "paymentMethods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ListItemDTO"
            },
            "description": "List of available payment methods.",
            "nullable": true
          },
          "registerTransactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RegisterTransactionDTO"
            },
            "description": "List of register transactions performed during the reporting period.",
            "nullable": true
          },
          "z": {
            "$ref": "#/components/schemas/ZDTO"
          }
        },
        "additionalProperties": false,
        "description": "Z Report."
      }
    }
  },
  "tags": [
    {
      "name": "Apps",
      "description": "App api set."
    },
    {
      "name": "Attributes",
      "description": "Attribute api set."
    },
    {
      "name": "Export",
      "description": "Export api set.\r\nProvides exporting functionality."
    },
    {
      "name": "HostComputers",
      "description": "Host computer api set."
    },
    {
      "name": "HostGroups",
      "description": "Host group api set."
    },
    {
      "name": "Hosts",
      "description": "Host api set."
    },
    {
      "name": "Invoices",
      "description": "Invoice api set."
    },
    {
      "name": "Licenses",
      "description": "App license api set."
    },
    {
      "name": "MonetaryUnit",
      "description": "Monetary unit api set."
    },
    {
      "name": "Points",
      "description": "Points api set."
    },
    {
      "name": "Products",
      "description": "Products api set."
    },
    {
      "name": "Registration",
      "description": "Registration api set."
    },
    {
      "name": "Reports",
      "description": "Reports api set."
    },
    {
      "name": "Reservations",
      "description": "Reservation api set."
    },
    {
      "name": "Service",
      "description": "Service api set."
    },
    {
      "name": "Stats",
      "description": "Stats api set."
    },
    {
      "name": "Stock",
      "description": "Stock api set."
    },
    {
      "name": "UserGroups",
      "description": "User group api set."
    },
    {
      "name": "Users",
      "description": "User api set."
    },
    {
      "name": "UserSessions",
      "description": "User sessions api set."
    },
    {
      "name": "Verifications",
      "description": "Verification api set."
    }
  ]
}